// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PriceFactorLog is an object representing the database table.
type PriceFactorLog struct {
	Time           time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	EvalTime       time.Time `boil:"eval_time" json:"eval_time" toml:"eval_time" yaml:"eval_time"`
	Pubimps        int       `boil:"pubimps" json:"pubimps" toml:"pubimps" yaml:"pubimps"`
	Soldimps       int       `boil:"soldimps" json:"soldimps" toml:"soldimps" yaml:"soldimps"`
	Cost           float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Revenue        float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	GP             float64   `boil:"gp" json:"gp" toml:"gp" yaml:"gp"`
	GPP            float64   `boil:"gpp" json:"gpp" toml:"gpp" yaml:"gpp"`
	Publisher      string    `boil:"publisher" json:"publisher" toml:"publisher" yaml:"publisher"`
	Domain         string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Country        string    `boil:"country" json:"country" toml:"country" yaml:"country"`
	Device         string    `boil:"device" json:"device" toml:"device" yaml:"device"`
	OldFactor      float64   `boil:"old_factor" json:"old_factor" toml:"old_factor" yaml:"old_factor"`
	NewFactor      float64   `boil:"new_factor" json:"new_factor" toml:"new_factor" yaml:"new_factor"`
	ResponseStatus int       `boil:"response_status" json:"response_status" toml:"response_status" yaml:"response_status"`
	Increase       float64   `boil:"increase" json:"increase" toml:"increase" yaml:"increase"`
	Source         string    `boil:"source" json:"source" toml:"source" yaml:"source"`

	R *priceFactorLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L priceFactorLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PriceFactorLogColumns = struct {
	Time           string
	EvalTime       string
	Pubimps        string
	Soldimps       string
	Cost           string
	Revenue        string
	GP             string
	GPP            string
	Publisher      string
	Domain         string
	Country        string
	Device         string
	OldFactor      string
	NewFactor      string
	ResponseStatus string
	Increase       string
	Source         string
}{
	Time:           "time",
	EvalTime:       "eval_time",
	Pubimps:        "pubimps",
	Soldimps:       "soldimps",
	Cost:           "cost",
	Revenue:        "revenue",
	GP:             "gp",
	GPP:            "gpp",
	Publisher:      "publisher",
	Domain:         "domain",
	Country:        "country",
	Device:         "device",
	OldFactor:      "old_factor",
	NewFactor:      "new_factor",
	ResponseStatus: "response_status",
	Increase:       "increase",
	Source:         "source",
}

var PriceFactorLogTableColumns = struct {
	Time           string
	EvalTime       string
	Pubimps        string
	Soldimps       string
	Cost           string
	Revenue        string
	GP             string
	GPP            string
	Publisher      string
	Domain         string
	Country        string
	Device         string
	OldFactor      string
	NewFactor      string
	ResponseStatus string
	Increase       string
	Source         string
}{
	Time:           "price_factor_log.time",
	EvalTime:       "price_factor_log.eval_time",
	Pubimps:        "price_factor_log.pubimps",
	Soldimps:       "price_factor_log.soldimps",
	Cost:           "price_factor_log.cost",
	Revenue:        "price_factor_log.revenue",
	GP:             "price_factor_log.gp",
	GPP:            "price_factor_log.gpp",
	Publisher:      "price_factor_log.publisher",
	Domain:         "price_factor_log.domain",
	Country:        "price_factor_log.country",
	Device:         "price_factor_log.device",
	OldFactor:      "price_factor_log.old_factor",
	NewFactor:      "price_factor_log.new_factor",
	ResponseStatus: "price_factor_log.response_status",
	Increase:       "price_factor_log.increase",
	Source:         "price_factor_log.source",
}

// Generated where

var PriceFactorLogWhere = struct {
	Time           whereHelpertime_Time
	EvalTime       whereHelpertime_Time
	Pubimps        whereHelperint
	Soldimps       whereHelperint
	Cost           whereHelperfloat64
	Revenue        whereHelperfloat64
	GP             whereHelperfloat64
	GPP            whereHelperfloat64
	Publisher      whereHelperstring
	Domain         whereHelperstring
	Country        whereHelperstring
	Device         whereHelperstring
	OldFactor      whereHelperfloat64
	NewFactor      whereHelperfloat64
	ResponseStatus whereHelperint
	Increase       whereHelperfloat64
	Source         whereHelperstring
}{
	Time:           whereHelpertime_Time{field: "\"price_factor_log\".\"time\""},
	EvalTime:       whereHelpertime_Time{field: "\"price_factor_log\".\"eval_time\""},
	Pubimps:        whereHelperint{field: "\"price_factor_log\".\"pubimps\""},
	Soldimps:       whereHelperint{field: "\"price_factor_log\".\"soldimps\""},
	Cost:           whereHelperfloat64{field: "\"price_factor_log\".\"cost\""},
	Revenue:        whereHelperfloat64{field: "\"price_factor_log\".\"revenue\""},
	GP:             whereHelperfloat64{field: "\"price_factor_log\".\"gp\""},
	GPP:            whereHelperfloat64{field: "\"price_factor_log\".\"gpp\""},
	Publisher:      whereHelperstring{field: "\"price_factor_log\".\"publisher\""},
	Domain:         whereHelperstring{field: "\"price_factor_log\".\"domain\""},
	Country:        whereHelperstring{field: "\"price_factor_log\".\"country\""},
	Device:         whereHelperstring{field: "\"price_factor_log\".\"device\""},
	OldFactor:      whereHelperfloat64{field: "\"price_factor_log\".\"old_factor\""},
	NewFactor:      whereHelperfloat64{field: "\"price_factor_log\".\"new_factor\""},
	ResponseStatus: whereHelperint{field: "\"price_factor_log\".\"response_status\""},
	Increase:       whereHelperfloat64{field: "\"price_factor_log\".\"increase\""},
	Source:         whereHelperstring{field: "\"price_factor_log\".\"source\""},
}

// PriceFactorLogRels is where relationship names are stored.
var PriceFactorLogRels = struct {
}{}

// priceFactorLogR is where relationships are stored.
type priceFactorLogR struct {
}

// NewStruct creates a new relationship struct
func (*priceFactorLogR) NewStruct() *priceFactorLogR {
	return &priceFactorLogR{}
}

// priceFactorLogL is where Load methods for each relationship are stored.
type priceFactorLogL struct{}

var (
	priceFactorLogAllColumns            = []string{"time", "eval_time", "pubimps", "soldimps", "cost", "revenue", "gp", "gpp", "publisher", "domain", "country", "device", "old_factor", "new_factor", "response_status", "increase", "source"}
	priceFactorLogColumnsWithoutDefault = []string{"time", "eval_time", "pubimps", "soldimps", "cost", "revenue", "gp", "gpp", "publisher", "domain", "country", "device", "old_factor", "new_factor", "response_status", "increase", "source"}
	priceFactorLogColumnsWithDefault    = []string{}
	priceFactorLogPrimaryKeyColumns     = []string{"publisher", "domain", "country", "device", "time"}
	priceFactorLogGeneratedColumns      = []string{}
)

type (
	// PriceFactorLogSlice is an alias for a slice of pointers to PriceFactorLog.
	// This should almost always be used instead of []PriceFactorLog.
	PriceFactorLogSlice []*PriceFactorLog
	// PriceFactorLogHook is the signature for custom PriceFactorLog hook methods
	PriceFactorLogHook func(context.Context, boil.ContextExecutor, *PriceFactorLog) error

	priceFactorLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	priceFactorLogType                 = reflect.TypeOf(&PriceFactorLog{})
	priceFactorLogMapping              = queries.MakeStructMapping(priceFactorLogType)
	priceFactorLogPrimaryKeyMapping, _ = queries.BindMapping(priceFactorLogType, priceFactorLogMapping, priceFactorLogPrimaryKeyColumns)
	priceFactorLogInsertCacheMut       sync.RWMutex
	priceFactorLogInsertCache          = make(map[string]insertCache)
	priceFactorLogUpdateCacheMut       sync.RWMutex
	priceFactorLogUpdateCache          = make(map[string]updateCache)
	priceFactorLogUpsertCacheMut       sync.RWMutex
	priceFactorLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var priceFactorLogAfterSelectMu sync.Mutex
var priceFactorLogAfterSelectHooks []PriceFactorLogHook

var priceFactorLogBeforeInsertMu sync.Mutex
var priceFactorLogBeforeInsertHooks []PriceFactorLogHook
var priceFactorLogAfterInsertMu sync.Mutex
var priceFactorLogAfterInsertHooks []PriceFactorLogHook

var priceFactorLogBeforeUpdateMu sync.Mutex
var priceFactorLogBeforeUpdateHooks []PriceFactorLogHook
var priceFactorLogAfterUpdateMu sync.Mutex
var priceFactorLogAfterUpdateHooks []PriceFactorLogHook

var priceFactorLogBeforeDeleteMu sync.Mutex
var priceFactorLogBeforeDeleteHooks []PriceFactorLogHook
var priceFactorLogAfterDeleteMu sync.Mutex
var priceFactorLogAfterDeleteHooks []PriceFactorLogHook

var priceFactorLogBeforeUpsertMu sync.Mutex
var priceFactorLogBeforeUpsertHooks []PriceFactorLogHook
var priceFactorLogAfterUpsertMu sync.Mutex
var priceFactorLogAfterUpsertHooks []PriceFactorLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PriceFactorLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PriceFactorLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PriceFactorLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PriceFactorLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PriceFactorLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PriceFactorLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PriceFactorLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PriceFactorLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PriceFactorLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceFactorLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPriceFactorLogHook registers your hook function for all future operations.
func AddPriceFactorLogHook(hookPoint boil.HookPoint, priceFactorLogHook PriceFactorLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		priceFactorLogAfterSelectMu.Lock()
		priceFactorLogAfterSelectHooks = append(priceFactorLogAfterSelectHooks, priceFactorLogHook)
		priceFactorLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		priceFactorLogBeforeInsertMu.Lock()
		priceFactorLogBeforeInsertHooks = append(priceFactorLogBeforeInsertHooks, priceFactorLogHook)
		priceFactorLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		priceFactorLogAfterInsertMu.Lock()
		priceFactorLogAfterInsertHooks = append(priceFactorLogAfterInsertHooks, priceFactorLogHook)
		priceFactorLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		priceFactorLogBeforeUpdateMu.Lock()
		priceFactorLogBeforeUpdateHooks = append(priceFactorLogBeforeUpdateHooks, priceFactorLogHook)
		priceFactorLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		priceFactorLogAfterUpdateMu.Lock()
		priceFactorLogAfterUpdateHooks = append(priceFactorLogAfterUpdateHooks, priceFactorLogHook)
		priceFactorLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		priceFactorLogBeforeDeleteMu.Lock()
		priceFactorLogBeforeDeleteHooks = append(priceFactorLogBeforeDeleteHooks, priceFactorLogHook)
		priceFactorLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		priceFactorLogAfterDeleteMu.Lock()
		priceFactorLogAfterDeleteHooks = append(priceFactorLogAfterDeleteHooks, priceFactorLogHook)
		priceFactorLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		priceFactorLogBeforeUpsertMu.Lock()
		priceFactorLogBeforeUpsertHooks = append(priceFactorLogBeforeUpsertHooks, priceFactorLogHook)
		priceFactorLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		priceFactorLogAfterUpsertMu.Lock()
		priceFactorLogAfterUpsertHooks = append(priceFactorLogAfterUpsertHooks, priceFactorLogHook)
		priceFactorLogAfterUpsertMu.Unlock()
	}
}

// One returns a single priceFactorLog record from the query.
func (q priceFactorLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PriceFactorLog, error) {
	o := &PriceFactorLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for price_factor_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PriceFactorLog records from the query.
func (q priceFactorLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (PriceFactorLogSlice, error) {
	var o []*PriceFactorLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PriceFactorLog slice")
	}

	if len(priceFactorLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PriceFactorLog records in the query.
func (q priceFactorLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count price_factor_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q priceFactorLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if price_factor_log exists")
	}

	return count > 0, nil
}

// PriceFactorLogs retrieves all the records using an executor.
func PriceFactorLogs(mods ...qm.QueryMod) priceFactorLogQuery {
	mods = append(mods, qm.From("\"price_factor_log\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"price_factor_log\".*"})
	}

	return priceFactorLogQuery{q}
}

// FindPriceFactorLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPriceFactorLog(ctx context.Context, exec boil.ContextExecutor, publisher string, domain string, country string, device string, time time.Time, selectCols ...string) (*PriceFactorLog, error) {
	priceFactorLogObj := &PriceFactorLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"price_factor_log\" where \"publisher\"=$1 AND \"domain\"=$2 AND \"country\"=$3 AND \"device\"=$4 AND \"time\"=$5", sel,
	)

	q := queries.Raw(query, publisher, domain, country, device, time)

	err := q.Bind(ctx, exec, priceFactorLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from price_factor_log")
	}

	if err = priceFactorLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return priceFactorLogObj, err
	}

	return priceFactorLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PriceFactorLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no price_factor_log provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(priceFactorLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	priceFactorLogInsertCacheMut.RLock()
	cache, cached := priceFactorLogInsertCache[key]
	priceFactorLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			priceFactorLogAllColumns,
			priceFactorLogColumnsWithDefault,
			priceFactorLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(priceFactorLogType, priceFactorLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(priceFactorLogType, priceFactorLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"price_factor_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"price_factor_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into price_factor_log")
	}

	if !cached {
		priceFactorLogInsertCacheMut.Lock()
		priceFactorLogInsertCache[key] = cache
		priceFactorLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PriceFactorLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PriceFactorLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	priceFactorLogUpdateCacheMut.RLock()
	cache, cached := priceFactorLogUpdateCache[key]
	priceFactorLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			priceFactorLogAllColumns,
			priceFactorLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update price_factor_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"price_factor_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, priceFactorLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(priceFactorLogType, priceFactorLogMapping, append(wl, priceFactorLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update price_factor_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for price_factor_log")
	}

	if !cached {
		priceFactorLogUpdateCacheMut.Lock()
		priceFactorLogUpdateCache[key] = cache
		priceFactorLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q priceFactorLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for price_factor_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for price_factor_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PriceFactorLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceFactorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"price_factor_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, priceFactorLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in priceFactorLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all priceFactorLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PriceFactorLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no price_factor_log provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(priceFactorLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	priceFactorLogUpsertCacheMut.RLock()
	cache, cached := priceFactorLogUpsertCache[key]
	priceFactorLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			priceFactorLogAllColumns,
			priceFactorLogColumnsWithDefault,
			priceFactorLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			priceFactorLogAllColumns,
			priceFactorLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert price_factor_log, could not build update column list")
		}

		ret := strmangle.SetComplement(priceFactorLogAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(priceFactorLogPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert price_factor_log, could not build conflict column list")
			}

			conflict = make([]string, len(priceFactorLogPrimaryKeyColumns))
			copy(conflict, priceFactorLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"price_factor_log\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(priceFactorLogType, priceFactorLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(priceFactorLogType, priceFactorLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert price_factor_log")
	}

	if !cached {
		priceFactorLogUpsertCacheMut.Lock()
		priceFactorLogUpsertCache[key] = cache
		priceFactorLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PriceFactorLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PriceFactorLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PriceFactorLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), priceFactorLogPrimaryKeyMapping)
	sql := "DELETE FROM \"price_factor_log\" WHERE \"publisher\"=$1 AND \"domain\"=$2 AND \"country\"=$3 AND \"device\"=$4 AND \"time\"=$5"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from price_factor_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for price_factor_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q priceFactorLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no priceFactorLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from price_factor_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for price_factor_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PriceFactorLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(priceFactorLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceFactorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"price_factor_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, priceFactorLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from priceFactorLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for price_factor_log")
	}

	if len(priceFactorLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PriceFactorLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPriceFactorLog(ctx, exec, o.Publisher, o.Domain, o.Country, o.Device, o.Time)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PriceFactorLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PriceFactorLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceFactorLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"price_factor_log\".* FROM \"price_factor_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, priceFactorLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PriceFactorLogSlice")
	}

	*o = slice

	return nil
}

// PriceFactorLogExists checks if the PriceFactorLog row exists.
func PriceFactorLogExists(ctx context.Context, exec boil.ContextExecutor, publisher string, domain string, country string, device string, time time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"price_factor_log\" where \"publisher\"=$1 AND \"domain\"=$2 AND \"country\"=$3 AND \"device\"=$4 AND \"time\"=$5 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, publisher, domain, country, device, time)
	}
	row := exec.QueryRowContext(ctx, sql, publisher, domain, country, device, time)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if price_factor_log exists")
	}

	return exists, nil
}

// Exists checks if the PriceFactorLog row exists.
func (o *PriceFactorLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PriceFactorLogExists(ctx, exec, o.Publisher, o.Domain, o.Country, o.Device, o.Time)
}
