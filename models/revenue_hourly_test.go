// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRevenueHourlies(t *testing.T) {
	t.Parallel()

	query := RevenueHourlies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRevenueHourliesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevenueHourliesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RevenueHourlies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevenueHourliesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RevenueHourlySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevenueHourliesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RevenueHourlyExists(ctx, tx, o.Time)
	if err != nil {
		t.Errorf("Unable to check if RevenueHourly exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RevenueHourlyExists to return true, but got false.")
	}
}

func testRevenueHourliesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	revenueHourlyFound, err := FindRevenueHourly(ctx, tx, o.Time)
	if err != nil {
		t.Error(err)
	}

	if revenueHourlyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRevenueHourliesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RevenueHourlies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRevenueHourliesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RevenueHourlies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRevenueHourliesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	revenueHourlyOne := &RevenueHourly{}
	revenueHourlyTwo := &RevenueHourly{}
	if err = randomize.Struct(seed, revenueHourlyOne, revenueHourlyDBTypes, false, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}
	if err = randomize.Struct(seed, revenueHourlyTwo, revenueHourlyDBTypes, false, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = revenueHourlyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = revenueHourlyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RevenueHourlies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRevenueHourliesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	revenueHourlyOne := &RevenueHourly{}
	revenueHourlyTwo := &RevenueHourly{}
	if err = randomize.Struct(seed, revenueHourlyOne, revenueHourlyDBTypes, false, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}
	if err = randomize.Struct(seed, revenueHourlyTwo, revenueHourlyDBTypes, false, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = revenueHourlyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = revenueHourlyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func revenueHourlyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func revenueHourlyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func revenueHourlyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func revenueHourlyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func revenueHourlyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func revenueHourlyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func revenueHourlyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func revenueHourlyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func revenueHourlyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RevenueHourly) error {
	*o = RevenueHourly{}
	return nil
}

func testRevenueHourliesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RevenueHourly{}
	o := &RevenueHourly{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RevenueHourly object: %s", err)
	}

	AddRevenueHourlyHook(boil.BeforeInsertHook, revenueHourlyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	revenueHourlyBeforeInsertHooks = []RevenueHourlyHook{}

	AddRevenueHourlyHook(boil.AfterInsertHook, revenueHourlyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	revenueHourlyAfterInsertHooks = []RevenueHourlyHook{}

	AddRevenueHourlyHook(boil.AfterSelectHook, revenueHourlyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	revenueHourlyAfterSelectHooks = []RevenueHourlyHook{}

	AddRevenueHourlyHook(boil.BeforeUpdateHook, revenueHourlyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	revenueHourlyBeforeUpdateHooks = []RevenueHourlyHook{}

	AddRevenueHourlyHook(boil.AfterUpdateHook, revenueHourlyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	revenueHourlyAfterUpdateHooks = []RevenueHourlyHook{}

	AddRevenueHourlyHook(boil.BeforeDeleteHook, revenueHourlyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	revenueHourlyBeforeDeleteHooks = []RevenueHourlyHook{}

	AddRevenueHourlyHook(boil.AfterDeleteHook, revenueHourlyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	revenueHourlyAfterDeleteHooks = []RevenueHourlyHook{}

	AddRevenueHourlyHook(boil.BeforeUpsertHook, revenueHourlyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	revenueHourlyBeforeUpsertHooks = []RevenueHourlyHook{}

	AddRevenueHourlyHook(boil.AfterUpsertHook, revenueHourlyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	revenueHourlyAfterUpsertHooks = []RevenueHourlyHook{}
}

func testRevenueHourliesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRevenueHourliesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(revenueHourlyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRevenueHourliesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRevenueHourliesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RevenueHourlySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRevenueHourliesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RevenueHourlies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	revenueHourlyDBTypes = map[string]string{`Time`: `timestamp without time zone`, `PublisherImpressions`: `bigint`, `SoldImpressions`: `bigint`, `Cost`: `double precision`, `Revenue`: `double precision`, `DemandPartnerFees`: `double precision`, `MissedOpportunities`: `bigint`, `DataFee`: `double precision`, `DPBidRequests`: `bigint`}
	_                    = bytes.MinRead
)

func testRevenueHourliesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(revenueHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(revenueHourlyAllColumns) == len(revenueHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRevenueHourliesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(revenueHourlyAllColumns) == len(revenueHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RevenueHourly{}
	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, revenueHourlyDBTypes, true, revenueHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(revenueHourlyAllColumns, revenueHourlyPrimaryKeyColumns) {
		fields = revenueHourlyAllColumns
	} else {
		fields = strmangle.SetComplement(
			revenueHourlyAllColumns,
			revenueHourlyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RevenueHourlySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRevenueHourliesUpsert(t *testing.T) {
	t.Parallel()

	if len(revenueHourlyAllColumns) == len(revenueHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RevenueHourly{}
	if err = randomize.Struct(seed, &o, revenueHourlyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RevenueHourly: %s", err)
	}

	count, err := RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, revenueHourlyDBTypes, false, revenueHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RevenueHourly struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RevenueHourly: %s", err)
	}

	count, err = RevenueHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
