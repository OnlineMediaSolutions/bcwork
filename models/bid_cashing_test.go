// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBidCashings(t *testing.T) {
	t.Parallel()

	query := BidCashings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBidCashingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBidCashingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BidCashings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBidCashingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BidCashingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBidCashingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BidCashingExists(ctx, tx, o.RuleID)
	if err != nil {
		t.Errorf("Unable to check if BidCashing exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BidCashingExists to return true, but got false.")
	}
}

func testBidCashingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bidCashingFound, err := FindBidCashing(ctx, tx, o.RuleID)
	if err != nil {
		t.Error(err)
	}

	if bidCashingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBidCashingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BidCashings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBidCashingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BidCashings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBidCashingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bidCashingOne := &BidCashing{}
	bidCashingTwo := &BidCashing{}
	if err = randomize.Struct(seed, bidCashingOne, bidCashingDBTypes, false, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}
	if err = randomize.Struct(seed, bidCashingTwo, bidCashingDBTypes, false, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bidCashingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bidCashingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BidCashings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBidCashingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bidCashingOne := &BidCashing{}
	bidCashingTwo := &BidCashing{}
	if err = randomize.Struct(seed, bidCashingOne, bidCashingDBTypes, false, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}
	if err = randomize.Struct(seed, bidCashingTwo, bidCashingDBTypes, false, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bidCashingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bidCashingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bidCashingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func bidCashingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func bidCashingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func bidCashingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func bidCashingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func bidCashingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func bidCashingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func bidCashingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func bidCashingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BidCashing) error {
	*o = BidCashing{}
	return nil
}

func testBidCashingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BidCashing{}
	o := &BidCashing{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bidCashingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BidCashing object: %s", err)
	}

	AddBidCashingHook(boil.BeforeInsertHook, bidCashingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bidCashingBeforeInsertHooks = []BidCashingHook{}

	AddBidCashingHook(boil.AfterInsertHook, bidCashingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bidCashingAfterInsertHooks = []BidCashingHook{}

	AddBidCashingHook(boil.AfterSelectHook, bidCashingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bidCashingAfterSelectHooks = []BidCashingHook{}

	AddBidCashingHook(boil.BeforeUpdateHook, bidCashingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bidCashingBeforeUpdateHooks = []BidCashingHook{}

	AddBidCashingHook(boil.AfterUpdateHook, bidCashingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bidCashingAfterUpdateHooks = []BidCashingHook{}

	AddBidCashingHook(boil.BeforeDeleteHook, bidCashingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bidCashingBeforeDeleteHooks = []BidCashingHook{}

	AddBidCashingHook(boil.AfterDeleteHook, bidCashingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bidCashingAfterDeleteHooks = []BidCashingHook{}

	AddBidCashingHook(boil.BeforeUpsertHook, bidCashingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bidCashingBeforeUpsertHooks = []BidCashingHook{}

	AddBidCashingHook(boil.AfterUpsertHook, bidCashingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bidCashingAfterUpsertHooks = []BidCashingHook{}
}

func testBidCashingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBidCashingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bidCashingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBidCashingToOnePublisherUsingBidCashingPublisher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BidCashing
	var foreign Publisher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bidCashingDBTypes, false, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Publisher = foreign.PublisherID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BidCashingPublisher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PublisherID != foreign.PublisherID {
		t.Errorf("want: %v, got %v", foreign.PublisherID, check.PublisherID)
	}

	ranAfterSelectHook := false
	AddPublisherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Publisher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BidCashingSlice{&local}
	if err = local.L.LoadBidCashingPublisher(ctx, tx, false, (*[]*BidCashing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BidCashingPublisher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BidCashingPublisher = nil
	if err = local.L.LoadBidCashingPublisher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BidCashingPublisher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBidCashingToOneSetOpPublisherUsingBidCashingPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BidCashing
	var b, c Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bidCashingDBTypes, false, strmangle.SetComplement(bidCashingPrimaryKeyColumns, bidCashingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Publisher{&b, &c} {
		err = a.SetBidCashingPublisher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BidCashingPublisher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BidCashings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Publisher != x.PublisherID {
			t.Error("foreign key was wrong value", a.Publisher)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Publisher))
		reflect.Indirect(reflect.ValueOf(&a.Publisher)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Publisher != x.PublisherID {
			t.Error("foreign key was wrong value", a.Publisher, x.PublisherID)
		}
	}
}

func testBidCashingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBidCashingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BidCashingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBidCashingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BidCashings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bidCashingDBTypes = map[string]string{`Publisher`: `character varying`, `Domain`: `character varying`, `Country`: `character varying`, `Device`: `character varying`, `BidCashing`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `RuleID`: `character varying`, `DemandPartnerID`: `character varying`, `Browser`: `character varying`, `Os`: `character varying`, `PlacementType`: `character varying`}
	_                 = bytes.MinRead
)

func testBidCashingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bidCashingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bidCashingAllColumns) == len(bidCashingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBidCashingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bidCashingAllColumns) == len(bidCashingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BidCashing{}
	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bidCashingDBTypes, true, bidCashingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bidCashingAllColumns, bidCashingPrimaryKeyColumns) {
		fields = bidCashingAllColumns
	} else {
		fields = strmangle.SetComplement(
			bidCashingAllColumns,
			bidCashingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BidCashingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBidCashingsUpsert(t *testing.T) {
	t.Parallel()

	if len(bidCashingAllColumns) == len(bidCashingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BidCashing{}
	if err = randomize.Struct(seed, &o, bidCashingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BidCashing: %s", err)
	}

	count, err := BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bidCashingDBTypes, false, bidCashingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BidCashing struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BidCashing: %s", err)
	}

	count, err = BidCashings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
