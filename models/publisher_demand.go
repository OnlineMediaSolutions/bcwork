// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PublisherDemand is an object representing the database table.
type PublisherDemand struct {
	PublisherID     string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain          string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	DemandPartnerID string    `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	AdsTXTStatus    bool      `boil:"ads_txt_status" json:"ads_txt_status" toml:"ads_txt_status" yaml:"ads_txt_status"`
	Active          bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *publisherDemandR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publisherDemandL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublisherDemandColumns = struct {
	PublisherID     string
	Domain          string
	DemandPartnerID string
	AdsTXTStatus    string
	Active          string
	CreatedAt       string
	UpdatedAt       string
}{
	PublisherID:     "publisher_id",
	Domain:          "domain",
	DemandPartnerID: "demand_partner_id",
	AdsTXTStatus:    "ads_txt_status",
	Active:          "active",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var PublisherDemandTableColumns = struct {
	PublisherID     string
	Domain          string
	DemandPartnerID string
	AdsTXTStatus    string
	Active          string
	CreatedAt       string
	UpdatedAt       string
}{
	PublisherID:     "publisher_demand.publisher_id",
	Domain:          "publisher_demand.domain",
	DemandPartnerID: "publisher_demand.demand_partner_id",
	AdsTXTStatus:    "publisher_demand.ads_txt_status",
	Active:          "publisher_demand.active",
	CreatedAt:       "publisher_demand.created_at",
	UpdatedAt:       "publisher_demand.updated_at",
}

// Generated where

var PublisherDemandWhere = struct {
	PublisherID     whereHelperstring
	Domain          whereHelperstring
	DemandPartnerID whereHelperstring
	AdsTXTStatus    whereHelperbool
	Active          whereHelperbool
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpernull_Time
}{
	PublisherID:     whereHelperstring{field: "\"publisher_demand\".\"publisher_id\""},
	Domain:          whereHelperstring{field: "\"publisher_demand\".\"domain\""},
	DemandPartnerID: whereHelperstring{field: "\"publisher_demand\".\"demand_partner_id\""},
	AdsTXTStatus:    whereHelperbool{field: "\"publisher_demand\".\"ads_txt_status\""},
	Active:          whereHelperbool{field: "\"publisher_demand\".\"active\""},
	CreatedAt:       whereHelpertime_Time{field: "\"publisher_demand\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"publisher_demand\".\"updated_at\""},
}

// PublisherDemandRels is where relationship names are stored.
var PublisherDemandRels = struct {
	DemandPartner string
	Publisher     string
}{
	DemandPartner: "DemandPartner",
	Publisher:     "Publisher",
}

// publisherDemandR is where relationships are stored.
type publisherDemandR struct {
	DemandPartner *Dpo       `boil:"DemandPartner" json:"DemandPartner" toml:"DemandPartner" yaml:"DemandPartner"`
	Publisher     *Publisher `boil:"Publisher" json:"Publisher" toml:"Publisher" yaml:"Publisher"`
}

// NewStruct creates a new relationship struct
func (*publisherDemandR) NewStruct() *publisherDemandR {
	return &publisherDemandR{}
}

func (r *publisherDemandR) GetDemandPartner() *Dpo {
	if r == nil {
		return nil
	}
	return r.DemandPartner
}

func (r *publisherDemandR) GetPublisher() *Publisher {
	if r == nil {
		return nil
	}
	return r.Publisher
}

// publisherDemandL is where Load methods for each relationship are stored.
type publisherDemandL struct{}

var (
	publisherDemandAllColumns            = []string{"publisher_id", "domain", "demand_partner_id", "ads_txt_status", "active", "created_at", "updated_at"}
	publisherDemandColumnsWithoutDefault = []string{"publisher_id", "domain", "demand_partner_id", "created_at"}
	publisherDemandColumnsWithDefault    = []string{"ads_txt_status", "active", "updated_at"}
	publisherDemandPrimaryKeyColumns     = []string{"publisher_id", "domain", "demand_partner_id"}
	publisherDemandGeneratedColumns      = []string{}
)

type (
	// PublisherDemandSlice is an alias for a slice of pointers to PublisherDemand.
	// This should almost always be used instead of []PublisherDemand.
	PublisherDemandSlice []*PublisherDemand
	// PublisherDemandHook is the signature for custom PublisherDemand hook methods
	PublisherDemandHook func(context.Context, boil.ContextExecutor, *PublisherDemand) error

	publisherDemandQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publisherDemandType                 = reflect.TypeOf(&PublisherDemand{})
	publisherDemandMapping              = queries.MakeStructMapping(publisherDemandType)
	publisherDemandPrimaryKeyMapping, _ = queries.BindMapping(publisherDemandType, publisherDemandMapping, publisherDemandPrimaryKeyColumns)
	publisherDemandInsertCacheMut       sync.RWMutex
	publisherDemandInsertCache          = make(map[string]insertCache)
	publisherDemandUpdateCacheMut       sync.RWMutex
	publisherDemandUpdateCache          = make(map[string]updateCache)
	publisherDemandUpsertCacheMut       sync.RWMutex
	publisherDemandUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publisherDemandAfterSelectMu sync.Mutex
var publisherDemandAfterSelectHooks []PublisherDemandHook

var publisherDemandBeforeInsertMu sync.Mutex
var publisherDemandBeforeInsertHooks []PublisherDemandHook
var publisherDemandAfterInsertMu sync.Mutex
var publisherDemandAfterInsertHooks []PublisherDemandHook

var publisherDemandBeforeUpdateMu sync.Mutex
var publisherDemandBeforeUpdateHooks []PublisherDemandHook
var publisherDemandAfterUpdateMu sync.Mutex
var publisherDemandAfterUpdateHooks []PublisherDemandHook

var publisherDemandBeforeDeleteMu sync.Mutex
var publisherDemandBeforeDeleteHooks []PublisherDemandHook
var publisherDemandAfterDeleteMu sync.Mutex
var publisherDemandAfterDeleteHooks []PublisherDemandHook

var publisherDemandBeforeUpsertMu sync.Mutex
var publisherDemandBeforeUpsertHooks []PublisherDemandHook
var publisherDemandAfterUpsertMu sync.Mutex
var publisherDemandAfterUpsertHooks []PublisherDemandHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublisherDemand) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublisherDemand) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublisherDemand) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublisherDemand) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublisherDemand) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublisherDemand) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublisherDemand) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublisherDemand) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublisherDemand) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherDemandAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublisherDemandHook registers your hook function for all future operations.
func AddPublisherDemandHook(hookPoint boil.HookPoint, publisherDemandHook PublisherDemandHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		publisherDemandAfterSelectMu.Lock()
		publisherDemandAfterSelectHooks = append(publisherDemandAfterSelectHooks, publisherDemandHook)
		publisherDemandAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		publisherDemandBeforeInsertMu.Lock()
		publisherDemandBeforeInsertHooks = append(publisherDemandBeforeInsertHooks, publisherDemandHook)
		publisherDemandBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		publisherDemandAfterInsertMu.Lock()
		publisherDemandAfterInsertHooks = append(publisherDemandAfterInsertHooks, publisherDemandHook)
		publisherDemandAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		publisherDemandBeforeUpdateMu.Lock()
		publisherDemandBeforeUpdateHooks = append(publisherDemandBeforeUpdateHooks, publisherDemandHook)
		publisherDemandBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		publisherDemandAfterUpdateMu.Lock()
		publisherDemandAfterUpdateHooks = append(publisherDemandAfterUpdateHooks, publisherDemandHook)
		publisherDemandAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		publisherDemandBeforeDeleteMu.Lock()
		publisherDemandBeforeDeleteHooks = append(publisherDemandBeforeDeleteHooks, publisherDemandHook)
		publisherDemandBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		publisherDemandAfterDeleteMu.Lock()
		publisherDemandAfterDeleteHooks = append(publisherDemandAfterDeleteHooks, publisherDemandHook)
		publisherDemandAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		publisherDemandBeforeUpsertMu.Lock()
		publisherDemandBeforeUpsertHooks = append(publisherDemandBeforeUpsertHooks, publisherDemandHook)
		publisherDemandBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		publisherDemandAfterUpsertMu.Lock()
		publisherDemandAfterUpsertHooks = append(publisherDemandAfterUpsertHooks, publisherDemandHook)
		publisherDemandAfterUpsertMu.Unlock()
	}
}

// One returns a single publisherDemand record from the query.
func (q publisherDemandQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PublisherDemand, error) {
	o := &PublisherDemand{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for publisher_demand")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PublisherDemand records from the query.
func (q publisherDemandQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublisherDemandSlice, error) {
	var o []*PublisherDemand

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PublisherDemand slice")
	}

	if len(publisherDemandAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PublisherDemand records in the query.
func (q publisherDemandQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count publisher_demand rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publisherDemandQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if publisher_demand exists")
	}

	return count > 0, nil
}

// DemandPartner pointed to by the foreign key.
func (o *PublisherDemand) DemandPartner(mods ...qm.QueryMod) dpoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"demand_partner_id\" = ?", o.DemandPartnerID),
	}

	queryMods = append(queryMods, mods...)

	return Dpos(queryMods...)
}

// Publisher pointed to by the foreign key.
func (o *PublisherDemand) Publisher(mods ...qm.QueryMod) publisherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"publisher_id\" = ?", o.PublisherID),
	}

	queryMods = append(queryMods, mods...)

	return Publishers(queryMods...)
}

// LoadDemandPartner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (publisherDemandL) LoadDemandPartner(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisherDemand interface{}, mods queries.Applicator) error {
	var slice []*PublisherDemand
	var object *PublisherDemand

	if singular {
		var ok bool
		object, ok = maybePublisherDemand.(*PublisherDemand)
		if !ok {
			object = new(PublisherDemand)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisherDemand)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisherDemand))
			}
		}
	} else {
		s, ok := maybePublisherDemand.(*[]*PublisherDemand)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisherDemand)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisherDemand))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherDemandR{}
		}
		args[object.DemandPartnerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherDemandR{}
			}

			args[obj.DemandPartnerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dpo`),
		qm.WhereIn(`dpo.demand_partner_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dpo")
	}

	var resultSlice []*Dpo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dpo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dpo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dpo")
	}

	if len(dpoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DemandPartner = foreign
		if foreign.R == nil {
			foreign.R = &dpoR{}
		}
		foreign.R.DemandPartnerPublisherDemands = append(foreign.R.DemandPartnerPublisherDemands, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DemandPartnerID == foreign.DemandPartnerID {
				local.R.DemandPartner = foreign
				if foreign.R == nil {
					foreign.R = &dpoR{}
				}
				foreign.R.DemandPartnerPublisherDemands = append(foreign.R.DemandPartnerPublisherDemands, local)
				break
			}
		}
	}

	return nil
}

// LoadPublisher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (publisherDemandL) LoadPublisher(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisherDemand interface{}, mods queries.Applicator) error {
	var slice []*PublisherDemand
	var object *PublisherDemand

	if singular {
		var ok bool
		object, ok = maybePublisherDemand.(*PublisherDemand)
		if !ok {
			object = new(PublisherDemand)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisherDemand)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisherDemand))
			}
		}
	} else {
		s, ok := maybePublisherDemand.(*[]*PublisherDemand)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisherDemand)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisherDemand))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherDemandR{}
		}
		args[object.PublisherID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherDemandR{}
			}

			args[obj.PublisherID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`publisher`),
		qm.WhereIn(`publisher.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Publisher")
	}

	var resultSlice []*Publisher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Publisher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for publisher")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publisher")
	}

	if len(publisherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Publisher = foreign
		if foreign.R == nil {
			foreign.R = &publisherR{}
		}
		foreign.R.PublisherDemands = append(foreign.R.PublisherDemands, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PublisherID == foreign.PublisherID {
				local.R.Publisher = foreign
				if foreign.R == nil {
					foreign.R = &publisherR{}
				}
				foreign.R.PublisherDemands = append(foreign.R.PublisherDemands, local)
				break
			}
		}
	}

	return nil
}

// SetDemandPartner of the publisherDemand to the related item.
// Sets o.R.DemandPartner to related.
// Adds o to related.R.DemandPartnerPublisherDemands.
func (o *PublisherDemand) SetDemandPartner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dpo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"publisher_demand\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"demand_partner_id"}),
		strmangle.WhereClause("\"", "\"", 2, publisherDemandPrimaryKeyColumns),
	)
	values := []interface{}{related.DemandPartnerID, o.PublisherID, o.Domain, o.DemandPartnerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DemandPartnerID = related.DemandPartnerID
	if o.R == nil {
		o.R = &publisherDemandR{
			DemandPartner: related,
		}
	} else {
		o.R.DemandPartner = related
	}

	if related.R == nil {
		related.R = &dpoR{
			DemandPartnerPublisherDemands: PublisherDemandSlice{o},
		}
	} else {
		related.R.DemandPartnerPublisherDemands = append(related.R.DemandPartnerPublisherDemands, o)
	}

	return nil
}

// SetPublisher of the publisherDemand to the related item.
// Sets o.R.Publisher to related.
// Adds o to related.R.PublisherDemands.
func (o *PublisherDemand) SetPublisher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Publisher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"publisher_demand\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"publisher_id"}),
		strmangle.WhereClause("\"", "\"", 2, publisherDemandPrimaryKeyColumns),
	)
	values := []interface{}{related.PublisherID, o.PublisherID, o.Domain, o.DemandPartnerID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PublisherID = related.PublisherID
	if o.R == nil {
		o.R = &publisherDemandR{
			Publisher: related,
		}
	} else {
		o.R.Publisher = related
	}

	if related.R == nil {
		related.R = &publisherR{
			PublisherDemands: PublisherDemandSlice{o},
		}
	} else {
		related.R.PublisherDemands = append(related.R.PublisherDemands, o)
	}

	return nil
}

// PublisherDemands retrieves all the records using an executor.
func PublisherDemands(mods ...qm.QueryMod) publisherDemandQuery {
	mods = append(mods, qm.From("\"publisher_demand\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"publisher_demand\".*"})
	}

	return publisherDemandQuery{q}
}

// FindPublisherDemand retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublisherDemand(ctx context.Context, exec boil.ContextExecutor, publisherID string, domain string, demandPartnerID string, selectCols ...string) (*PublisherDemand, error) {
	publisherDemandObj := &PublisherDemand{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"publisher_demand\" where \"publisher_id\"=$1 AND \"domain\"=$2 AND \"demand_partner_id\"=$3", sel,
	)

	q := queries.Raw(query, publisherID, domain, demandPartnerID)

	err := q.Bind(ctx, exec, publisherDemandObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from publisher_demand")
	}

	if err = publisherDemandObj.doAfterSelectHooks(ctx, exec); err != nil {
		return publisherDemandObj, err
	}

	return publisherDemandObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublisherDemand) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publisher_demand provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherDemandColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publisherDemandInsertCacheMut.RLock()
	cache, cached := publisherDemandInsertCache[key]
	publisherDemandInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publisherDemandAllColumns,
			publisherDemandColumnsWithDefault,
			publisherDemandColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publisherDemandType, publisherDemandMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publisherDemandType, publisherDemandMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"publisher_demand\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"publisher_demand\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into publisher_demand")
	}

	if !cached {
		publisherDemandInsertCacheMut.Lock()
		publisherDemandInsertCache[key] = cache
		publisherDemandInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PublisherDemand.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublisherDemand) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publisherDemandUpdateCacheMut.RLock()
	cache, cached := publisherDemandUpdateCache[key]
	publisherDemandUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publisherDemandAllColumns,
			publisherDemandPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update publisher_demand, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"publisher_demand\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publisherDemandPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publisherDemandType, publisherDemandMapping, append(wl, publisherDemandPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update publisher_demand row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for publisher_demand")
	}

	if !cached {
		publisherDemandUpdateCacheMut.Lock()
		publisherDemandUpdateCache[key] = cache
		publisherDemandUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publisherDemandQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for publisher_demand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for publisher_demand")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublisherDemandSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherDemandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"publisher_demand\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publisherDemandPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in publisherDemand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all publisherDemand")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublisherDemand) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no publisher_demand provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherDemandColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publisherDemandUpsertCacheMut.RLock()
	cache, cached := publisherDemandUpsertCache[key]
	publisherDemandUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			publisherDemandAllColumns,
			publisherDemandColumnsWithDefault,
			publisherDemandColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			publisherDemandAllColumns,
			publisherDemandPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert publisher_demand, could not build update column list")
		}

		ret := strmangle.SetComplement(publisherDemandAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(publisherDemandPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert publisher_demand, could not build conflict column list")
			}

			conflict = make([]string, len(publisherDemandPrimaryKeyColumns))
			copy(conflict, publisherDemandPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"publisher_demand\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(publisherDemandType, publisherDemandMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publisherDemandType, publisherDemandMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert publisher_demand")
	}

	if !cached {
		publisherDemandUpsertCacheMut.Lock()
		publisherDemandUpsertCache[key] = cache
		publisherDemandUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PublisherDemand record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublisherDemand) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PublisherDemand provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publisherDemandPrimaryKeyMapping)
	sql := "DELETE FROM \"publisher_demand\" WHERE \"publisher_id\"=$1 AND \"domain\"=$2 AND \"demand_partner_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from publisher_demand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for publisher_demand")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publisherDemandQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no publisherDemandQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisher_demand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher_demand")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublisherDemandSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publisherDemandBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherDemandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"publisher_demand\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publisherDemandPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisherDemand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher_demand")
	}

	if len(publisherDemandAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublisherDemand) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublisherDemand(ctx, exec, o.PublisherID, o.Domain, o.DemandPartnerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublisherDemandSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublisherDemandSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherDemandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"publisher_demand\".* FROM \"publisher_demand\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publisherDemandPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PublisherDemandSlice")
	}

	*o = slice

	return nil
}

// PublisherDemandExists checks if the PublisherDemand row exists.
func PublisherDemandExists(ctx context.Context, exec boil.ContextExecutor, publisherID string, domain string, demandPartnerID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"publisher_demand\" where \"publisher_id\"=$1 AND \"domain\"=$2 AND \"demand_partner_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, publisherID, domain, demandPartnerID)
	}
	row := exec.QueryRowContext(ctx, sql, publisherID, domain, demandPartnerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if publisher_demand exists")
	}

	return exists, nil
}

// Exists checks if the PublisherDemand row exists.
func (o *PublisherDemand) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PublisherDemandExists(ctx, exec, o.PublisherID, o.Domain, o.DemandPartnerID)
}
