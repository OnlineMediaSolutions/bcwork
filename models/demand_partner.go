// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DemandPartner is an object representing the database table.
type DemandPartner struct {
	DemandPartnerID string `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	Name            string `boil:"name" json:"name" toml:"name" yaml:"name"`
	IntegrationType string `boil:"integration_type" json:"integration_type" toml:"integration_type" yaml:"integration_type"`

	R *demandPartnerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L demandPartnerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DemandPartnerColumns = struct {
	DemandPartnerID string
	Name            string
	IntegrationType string
}{
	DemandPartnerID: "demand_partner_id",
	Name:            "name",
	IntegrationType: "integration_type",
}

var DemandPartnerTableColumns = struct {
	DemandPartnerID string
	Name            string
	IntegrationType string
}{
	DemandPartnerID: "demand_partner.demand_partner_id",
	Name:            "demand_partner.name",
	IntegrationType: "demand_partner.integration_type",
}

// Generated where

var DemandPartnerWhere = struct {
	DemandPartnerID whereHelperstring
	Name            whereHelperstring
	IntegrationType whereHelperstring
}{
	DemandPartnerID: whereHelperstring{field: "\"demand_partner\".\"demand_partner_id\""},
	Name:            whereHelperstring{field: "\"demand_partner\".\"name\""},
	IntegrationType: whereHelperstring{field: "\"demand_partner\".\"integration_type\""},
}

// DemandPartnerRels is where relationship names are stored.
var DemandPartnerRels = struct {
	DemandParnterPlacements string
}{
	DemandParnterPlacements: "DemandParnterPlacements",
}

// demandPartnerR is where relationships are stored.
type demandPartnerR struct {
	DemandParnterPlacements DemandParnterPlacementSlice `boil:"DemandParnterPlacements" json:"DemandParnterPlacements" toml:"DemandParnterPlacements" yaml:"DemandParnterPlacements"`
}

// NewStruct creates a new relationship struct
func (*demandPartnerR) NewStruct() *demandPartnerR {
	return &demandPartnerR{}
}

func (r *demandPartnerR) GetDemandParnterPlacements() DemandParnterPlacementSlice {
	if r == nil {
		return nil
	}
	return r.DemandParnterPlacements
}

// demandPartnerL is where Load methods for each relationship are stored.
type demandPartnerL struct{}

var (
	demandPartnerAllColumns            = []string{"demand_partner_id", "name", "integration_type"}
	demandPartnerColumnsWithoutDefault = []string{"demand_partner_id", "name", "integration_type"}
	demandPartnerColumnsWithDefault    = []string{}
	demandPartnerPrimaryKeyColumns     = []string{"demand_partner_id"}
	demandPartnerGeneratedColumns      = []string{}
)

type (
	// DemandPartnerSlice is an alias for a slice of pointers to DemandPartner.
	// This should almost always be used instead of []DemandPartner.
	DemandPartnerSlice []*DemandPartner
	// DemandPartnerHook is the signature for custom DemandPartner hook methods
	DemandPartnerHook func(context.Context, boil.ContextExecutor, *DemandPartner) error

	demandPartnerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	demandPartnerType                 = reflect.TypeOf(&DemandPartner{})
	demandPartnerMapping              = queries.MakeStructMapping(demandPartnerType)
	demandPartnerPrimaryKeyMapping, _ = queries.BindMapping(demandPartnerType, demandPartnerMapping, demandPartnerPrimaryKeyColumns)
	demandPartnerInsertCacheMut       sync.RWMutex
	demandPartnerInsertCache          = make(map[string]insertCache)
	demandPartnerUpdateCacheMut       sync.RWMutex
	demandPartnerUpdateCache          = make(map[string]updateCache)
	demandPartnerUpsertCacheMut       sync.RWMutex
	demandPartnerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var demandPartnerAfterSelectMu sync.Mutex
var demandPartnerAfterSelectHooks []DemandPartnerHook

var demandPartnerBeforeInsertMu sync.Mutex
var demandPartnerBeforeInsertHooks []DemandPartnerHook
var demandPartnerAfterInsertMu sync.Mutex
var demandPartnerAfterInsertHooks []DemandPartnerHook

var demandPartnerBeforeUpdateMu sync.Mutex
var demandPartnerBeforeUpdateHooks []DemandPartnerHook
var demandPartnerAfterUpdateMu sync.Mutex
var demandPartnerAfterUpdateHooks []DemandPartnerHook

var demandPartnerBeforeDeleteMu sync.Mutex
var demandPartnerBeforeDeleteHooks []DemandPartnerHook
var demandPartnerAfterDeleteMu sync.Mutex
var demandPartnerAfterDeleteHooks []DemandPartnerHook

var demandPartnerBeforeUpsertMu sync.Mutex
var demandPartnerBeforeUpsertHooks []DemandPartnerHook
var demandPartnerAfterUpsertMu sync.Mutex
var demandPartnerAfterUpsertHooks []DemandPartnerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DemandPartner) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DemandPartner) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DemandPartner) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DemandPartner) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DemandPartner) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DemandPartner) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DemandPartner) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DemandPartner) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DemandPartner) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDemandPartnerHook registers your hook function for all future operations.
func AddDemandPartnerHook(hookPoint boil.HookPoint, demandPartnerHook DemandPartnerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		demandPartnerAfterSelectMu.Lock()
		demandPartnerAfterSelectHooks = append(demandPartnerAfterSelectHooks, demandPartnerHook)
		demandPartnerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		demandPartnerBeforeInsertMu.Lock()
		demandPartnerBeforeInsertHooks = append(demandPartnerBeforeInsertHooks, demandPartnerHook)
		demandPartnerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		demandPartnerAfterInsertMu.Lock()
		demandPartnerAfterInsertHooks = append(demandPartnerAfterInsertHooks, demandPartnerHook)
		demandPartnerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		demandPartnerBeforeUpdateMu.Lock()
		demandPartnerBeforeUpdateHooks = append(demandPartnerBeforeUpdateHooks, demandPartnerHook)
		demandPartnerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		demandPartnerAfterUpdateMu.Lock()
		demandPartnerAfterUpdateHooks = append(demandPartnerAfterUpdateHooks, demandPartnerHook)
		demandPartnerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		demandPartnerBeforeDeleteMu.Lock()
		demandPartnerBeforeDeleteHooks = append(demandPartnerBeforeDeleteHooks, demandPartnerHook)
		demandPartnerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		demandPartnerAfterDeleteMu.Lock()
		demandPartnerAfterDeleteHooks = append(demandPartnerAfterDeleteHooks, demandPartnerHook)
		demandPartnerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		demandPartnerBeforeUpsertMu.Lock()
		demandPartnerBeforeUpsertHooks = append(demandPartnerBeforeUpsertHooks, demandPartnerHook)
		demandPartnerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		demandPartnerAfterUpsertMu.Lock()
		demandPartnerAfterUpsertHooks = append(demandPartnerAfterUpsertHooks, demandPartnerHook)
		demandPartnerAfterUpsertMu.Unlock()
	}
}

// One returns a single demandPartner record from the query.
func (q demandPartnerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DemandPartner, error) {
	o := &DemandPartner{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for demand_partner")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DemandPartner records from the query.
func (q demandPartnerQuery) All(ctx context.Context, exec boil.ContextExecutor) (DemandPartnerSlice, error) {
	var o []*DemandPartner

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DemandPartner slice")
	}

	if len(demandPartnerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DemandPartner records in the query.
func (q demandPartnerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count demand_partner rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q demandPartnerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if demand_partner exists")
	}

	return count > 0, nil
}

// DemandParnterPlacements retrieves all the demand_parnter_placement's DemandParnterPlacements with an executor.
func (o *DemandPartner) DemandParnterPlacements(mods ...qm.QueryMod) demandParnterPlacementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"demand_parnter_placement\".\"demand_partner_id\"=?", o.DemandPartnerID),
	)

	return DemandParnterPlacements(queryMods...)
}

// LoadDemandParnterPlacements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (demandPartnerL) LoadDemandParnterPlacements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDemandPartner interface{}, mods queries.Applicator) error {
	var slice []*DemandPartner
	var object *DemandPartner

	if singular {
		var ok bool
		object, ok = maybeDemandPartner.(*DemandPartner)
		if !ok {
			object = new(DemandPartner)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDemandPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDemandPartner))
			}
		}
	} else {
		s, ok := maybeDemandPartner.(*[]*DemandPartner)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDemandPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDemandPartner))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &demandPartnerR{}
		}
		args[object.DemandPartnerID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &demandPartnerR{}
			}
			args[obj.DemandPartnerID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`demand_parnter_placement`),
		qm.WhereIn(`demand_parnter_placement.demand_partner_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load demand_parnter_placement")
	}

	var resultSlice []*DemandParnterPlacement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice demand_parnter_placement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on demand_parnter_placement")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for demand_parnter_placement")
	}

	if len(demandParnterPlacementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DemandParnterPlacements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &demandParnterPlacementR{}
			}
			foreign.R.DemandPartner = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DemandPartnerID == foreign.DemandPartnerID {
				local.R.DemandParnterPlacements = append(local.R.DemandParnterPlacements, foreign)
				if foreign.R == nil {
					foreign.R = &demandParnterPlacementR{}
				}
				foreign.R.DemandPartner = local
				break
			}
		}
	}

	return nil
}

// AddDemandParnterPlacements adds the given related objects to the existing relationships
// of the demand_partner, optionally inserting them as new records.
// Appends related to o.R.DemandParnterPlacements.
// Sets related.R.DemandPartner appropriately.
func (o *DemandPartner) AddDemandParnterPlacements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DemandParnterPlacement) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DemandPartnerID = o.DemandPartnerID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"demand_parnter_placement\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"demand_partner_id"}),
				strmangle.WhereClause("\"", "\"", 2, demandParnterPlacementPrimaryKeyColumns),
			)
			values := []interface{}{o.DemandPartnerID, rel.DemandPartnerPlacementID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DemandPartnerID = o.DemandPartnerID
		}
	}

	if o.R == nil {
		o.R = &demandPartnerR{
			DemandParnterPlacements: related,
		}
	} else {
		o.R.DemandParnterPlacements = append(o.R.DemandParnterPlacements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &demandParnterPlacementR{
				DemandPartner: o,
			}
		} else {
			rel.R.DemandPartner = o
		}
	}
	return nil
}

// DemandPartners retrieves all the records using an executor.
func DemandPartners(mods ...qm.QueryMod) demandPartnerQuery {
	mods = append(mods, qm.From("\"demand_partner\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"demand_partner\".*"})
	}

	return demandPartnerQuery{q}
}

// FindDemandPartner retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDemandPartner(ctx context.Context, exec boil.ContextExecutor, demandPartnerID string, selectCols ...string) (*DemandPartner, error) {
	demandPartnerObj := &DemandPartner{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"demand_partner\" where \"demand_partner_id\"=$1", sel,
	)

	q := queries.Raw(query, demandPartnerID)

	err := q.Bind(ctx, exec, demandPartnerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from demand_partner")
	}

	if err = demandPartnerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return demandPartnerObj, err
	}

	return demandPartnerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DemandPartner) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand_partner provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandPartnerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	demandPartnerInsertCacheMut.RLock()
	cache, cached := demandPartnerInsertCache[key]
	demandPartnerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			demandPartnerAllColumns,
			demandPartnerColumnsWithDefault,
			demandPartnerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(demandPartnerType, demandPartnerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(demandPartnerType, demandPartnerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"demand_partner\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"demand_partner\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into demand_partner")
	}

	if !cached {
		demandPartnerInsertCacheMut.Lock()
		demandPartnerInsertCache[key] = cache
		demandPartnerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DemandPartner.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DemandPartner) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	demandPartnerUpdateCacheMut.RLock()
	cache, cached := demandPartnerUpdateCache[key]
	demandPartnerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			demandPartnerAllColumns,
			demandPartnerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update demand_partner, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"demand_partner\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, demandPartnerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(demandPartnerType, demandPartnerMapping, append(wl, demandPartnerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update demand_partner row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for demand_partner")
	}

	if !cached {
		demandPartnerUpdateCacheMut.Lock()
		demandPartnerUpdateCache[key] = cache
		demandPartnerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q demandPartnerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for demand_partner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for demand_partner")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DemandPartnerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"demand_partner\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, demandPartnerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in demandPartner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all demandPartner")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DemandPartner) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no demand_partner provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandPartnerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	demandPartnerUpsertCacheMut.RLock()
	cache, cached := demandPartnerUpsertCache[key]
	demandPartnerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			demandPartnerAllColumns,
			demandPartnerColumnsWithDefault,
			demandPartnerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			demandPartnerAllColumns,
			demandPartnerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert demand_partner, could not build update column list")
		}

		ret := strmangle.SetComplement(demandPartnerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(demandPartnerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert demand_partner, could not build conflict column list")
			}

			conflict = make([]string, len(demandPartnerPrimaryKeyColumns))
			copy(conflict, demandPartnerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"demand_partner\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(demandPartnerType, demandPartnerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(demandPartnerType, demandPartnerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert demand_partner")
	}

	if !cached {
		demandPartnerUpsertCacheMut.Lock()
		demandPartnerUpsertCache[key] = cache
		demandPartnerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DemandPartner record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DemandPartner) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DemandPartner provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), demandPartnerPrimaryKeyMapping)
	sql := "DELETE FROM \"demand_partner\" WHERE \"demand_partner_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from demand_partner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for demand_partner")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q demandPartnerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no demandPartnerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand_partner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_partner")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DemandPartnerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(demandPartnerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"demand_partner\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandPartnerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demandPartner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_partner")
	}

	if len(demandPartnerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DemandPartner) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDemandPartner(ctx, exec, o.DemandPartnerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandPartnerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DemandPartnerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"demand_partner\".* FROM \"demand_partner\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandPartnerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DemandPartnerSlice")
	}

	*o = slice

	return nil
}

// DemandPartnerExists checks if the DemandPartner row exists.
func DemandPartnerExists(ctx context.Context, exec boil.ContextExecutor, demandPartnerID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"demand_partner\" where \"demand_partner_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, demandPartnerID)
	}
	row := exec.QueryRowContext(ctx, sql, demandPartnerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if demand_partner exists")
	}

	return exists, nil
}

// Exists checks if the DemandPartner row exists.
func (o *DemandPartner) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DemandPartnerExists(ctx, exec, o.DemandPartnerID)
}
