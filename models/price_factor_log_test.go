// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPriceFactorLogs(t *testing.T) {
	t.Parallel()

	query := PriceFactorLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPriceFactorLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPriceFactorLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PriceFactorLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPriceFactorLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PriceFactorLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPriceFactorLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PriceFactorLogExists(ctx, tx, o.Publisher, o.Domain, o.Country, o.Device, o.Time)
	if err != nil {
		t.Errorf("Unable to check if PriceFactorLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PriceFactorLogExists to return true, but got false.")
	}
}

func testPriceFactorLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	priceFactorLogFound, err := FindPriceFactorLog(ctx, tx, o.Publisher, o.Domain, o.Country, o.Device, o.Time)
	if err != nil {
		t.Error(err)
	}

	if priceFactorLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPriceFactorLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PriceFactorLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPriceFactorLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PriceFactorLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPriceFactorLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceFactorLogOne := &PriceFactorLog{}
	priceFactorLogTwo := &PriceFactorLog{}
	if err = randomize.Struct(seed, priceFactorLogOne, priceFactorLogDBTypes, false, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}
	if err = randomize.Struct(seed, priceFactorLogTwo, priceFactorLogDBTypes, false, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = priceFactorLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = priceFactorLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PriceFactorLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPriceFactorLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	priceFactorLogOne := &PriceFactorLog{}
	priceFactorLogTwo := &PriceFactorLog{}
	if err = randomize.Struct(seed, priceFactorLogOne, priceFactorLogDBTypes, false, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}
	if err = randomize.Struct(seed, priceFactorLogTwo, priceFactorLogDBTypes, false, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = priceFactorLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = priceFactorLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func priceFactorLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func priceFactorLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func priceFactorLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func priceFactorLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func priceFactorLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func priceFactorLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func priceFactorLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func priceFactorLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func priceFactorLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PriceFactorLog) error {
	*o = PriceFactorLog{}
	return nil
}

func testPriceFactorLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PriceFactorLog{}
	o := &PriceFactorLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog object: %s", err)
	}

	AddPriceFactorLogHook(boil.BeforeInsertHook, priceFactorLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	priceFactorLogBeforeInsertHooks = []PriceFactorLogHook{}

	AddPriceFactorLogHook(boil.AfterInsertHook, priceFactorLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	priceFactorLogAfterInsertHooks = []PriceFactorLogHook{}

	AddPriceFactorLogHook(boil.AfterSelectHook, priceFactorLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	priceFactorLogAfterSelectHooks = []PriceFactorLogHook{}

	AddPriceFactorLogHook(boil.BeforeUpdateHook, priceFactorLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	priceFactorLogBeforeUpdateHooks = []PriceFactorLogHook{}

	AddPriceFactorLogHook(boil.AfterUpdateHook, priceFactorLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	priceFactorLogAfterUpdateHooks = []PriceFactorLogHook{}

	AddPriceFactorLogHook(boil.BeforeDeleteHook, priceFactorLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	priceFactorLogBeforeDeleteHooks = []PriceFactorLogHook{}

	AddPriceFactorLogHook(boil.AfterDeleteHook, priceFactorLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	priceFactorLogAfterDeleteHooks = []PriceFactorLogHook{}

	AddPriceFactorLogHook(boil.BeforeUpsertHook, priceFactorLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	priceFactorLogBeforeUpsertHooks = []PriceFactorLogHook{}

	AddPriceFactorLogHook(boil.AfterUpsertHook, priceFactorLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	priceFactorLogAfterUpsertHooks = []PriceFactorLogHook{}
}

func testPriceFactorLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPriceFactorLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(priceFactorLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPriceFactorLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPriceFactorLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PriceFactorLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPriceFactorLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PriceFactorLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	priceFactorLogDBTypes = map[string]string{`Time`: `timestamp without time zone`, `EvalTime`: `timestamp without time zone`, `Pubimps`: `integer`, `Soldimps`: `integer`, `Cost`: `double precision`, `Revenue`: `double precision`, `GP`: `double precision`, `GPP`: `double precision`, `Publisher`: `character varying`, `Domain`: `character varying`, `Country`: `character`, `Device`: `character varying`, `OldFactor`: `double precision`, `NewFactor`: `double precision`, `ResponseStatus`: `integer`, `Increase`: `double precision`, `Source`: `character varying`}
	_                     = bytes.MinRead
)

func testPriceFactorLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(priceFactorLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(priceFactorLogAllColumns) == len(priceFactorLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPriceFactorLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(priceFactorLogAllColumns) == len(priceFactorLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PriceFactorLog{}
	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, priceFactorLogDBTypes, true, priceFactorLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(priceFactorLogAllColumns, priceFactorLogPrimaryKeyColumns) {
		fields = priceFactorLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			priceFactorLogAllColumns,
			priceFactorLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PriceFactorLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPriceFactorLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(priceFactorLogAllColumns) == len(priceFactorLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PriceFactorLog{}
	if err = randomize.Struct(seed, &o, priceFactorLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PriceFactorLog: %s", err)
	}

	count, err := PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, priceFactorLogDBTypes, false, priceFactorLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PriceFactorLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PriceFactorLog: %s", err)
	}

	count, err = PriceFactorLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
