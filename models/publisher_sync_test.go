// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPublisherSyncs(t *testing.T) {
	t.Parallel()

	query := PublisherSyncs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPublisherSyncsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSyncsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PublisherSyncs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSyncsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherSyncSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherSyncsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PublisherSyncExists(ctx, tx, o.Key)
	if err != nil {
		t.Errorf("Unable to check if PublisherSync exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublisherSyncExists to return true, but got false.")
	}
}

func testPublisherSyncsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	publisherSyncFound, err := FindPublisherSync(ctx, tx, o.Key)
	if err != nil {
		t.Error(err)
	}

	if publisherSyncFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPublisherSyncsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PublisherSyncs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPublisherSyncsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PublisherSyncs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublisherSyncsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherSyncOne := &PublisherSync{}
	publisherSyncTwo := &PublisherSync{}
	if err = randomize.Struct(seed, publisherSyncOne, publisherSyncDBTypes, false, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherSyncTwo, publisherSyncDBTypes, false, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherSyncOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherSyncTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherSyncs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublisherSyncsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publisherSyncOne := &PublisherSync{}
	publisherSyncTwo := &PublisherSync{}
	if err = randomize.Struct(seed, publisherSyncOne, publisherSyncDBTypes, false, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherSyncTwo, publisherSyncDBTypes, false, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherSyncOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherSyncTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func publisherSyncBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func publisherSyncAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func publisherSyncAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func publisherSyncBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func publisherSyncAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func publisherSyncBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func publisherSyncAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func publisherSyncBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func publisherSyncAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherSync) error {
	*o = PublisherSync{}
	return nil
}

func testPublisherSyncsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PublisherSync{}
	o := &PublisherSync{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PublisherSync object: %s", err)
	}

	AddPublisherSyncHook(boil.BeforeInsertHook, publisherSyncBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	publisherSyncBeforeInsertHooks = []PublisherSyncHook{}

	AddPublisherSyncHook(boil.AfterInsertHook, publisherSyncAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	publisherSyncAfterInsertHooks = []PublisherSyncHook{}

	AddPublisherSyncHook(boil.AfterSelectHook, publisherSyncAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	publisherSyncAfterSelectHooks = []PublisherSyncHook{}

	AddPublisherSyncHook(boil.BeforeUpdateHook, publisherSyncBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	publisherSyncBeforeUpdateHooks = []PublisherSyncHook{}

	AddPublisherSyncHook(boil.AfterUpdateHook, publisherSyncAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	publisherSyncAfterUpdateHooks = []PublisherSyncHook{}

	AddPublisherSyncHook(boil.BeforeDeleteHook, publisherSyncBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	publisherSyncBeforeDeleteHooks = []PublisherSyncHook{}

	AddPublisherSyncHook(boil.AfterDeleteHook, publisherSyncAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	publisherSyncAfterDeleteHooks = []PublisherSyncHook{}

	AddPublisherSyncHook(boil.BeforeUpsertHook, publisherSyncBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	publisherSyncBeforeUpsertHooks = []PublisherSyncHook{}

	AddPublisherSyncHook(boil.AfterUpsertHook, publisherSyncAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	publisherSyncAfterUpsertHooks = []PublisherSyncHook{}
}

func testPublisherSyncsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherSyncsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(publisherSyncColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherSyncsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherSyncsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherSyncSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherSyncsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherSyncs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publisherSyncDBTypes = map[string]string{`Key`: `character varying`, `HadError`: `boolean`}
	_                    = bytes.MinRead
)

func testPublisherSyncsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(publisherSyncPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(publisherSyncAllColumns) == len(publisherSyncPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPublisherSyncsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publisherSyncAllColumns) == len(publisherSyncPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherSync{}
	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherSyncDBTypes, true, publisherSyncPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publisherSyncAllColumns, publisherSyncPrimaryKeyColumns) {
		fields = publisherSyncAllColumns
	} else {
		fields = strmangle.SetComplement(
			publisherSyncAllColumns,
			publisherSyncPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PublisherSyncSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPublisherSyncsUpsert(t *testing.T) {
	t.Parallel()

	if len(publisherSyncAllColumns) == len(publisherSyncPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PublisherSync{}
	if err = randomize.Struct(seed, &o, publisherSyncDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherSync: %s", err)
	}

	count, err := PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, publisherSyncDBTypes, false, publisherSyncPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherSync struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherSync: %s", err)
	}

	count, err = PublisherSyncs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
