// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFactorChanges(t *testing.T) {
	t.Parallel()

	query := FactorChanges()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFactorChangesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFactorChangesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FactorChanges().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFactorChangesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FactorChangeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFactorChangesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FactorChangeExists(ctx, tx, o.Publisher, o.Domain, o.Country, o.Device, o.Time)
	if err != nil {
		t.Errorf("Unable to check if FactorChange exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FactorChangeExists to return true, but got false.")
	}
}

func testFactorChangesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	factorChangeFound, err := FindFactorChange(ctx, tx, o.Publisher, o.Domain, o.Country, o.Device, o.Time)
	if err != nil {
		t.Error(err)
	}

	if factorChangeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFactorChangesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FactorChanges().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFactorChangesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FactorChanges().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFactorChangesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	factorChangeOne := &FactorChange{}
	factorChangeTwo := &FactorChange{}
	if err = randomize.Struct(seed, factorChangeOne, factorChangeDBTypes, false, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}
	if err = randomize.Struct(seed, factorChangeTwo, factorChangeDBTypes, false, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = factorChangeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = factorChangeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FactorChanges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFactorChangesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	factorChangeOne := &FactorChange{}
	factorChangeTwo := &FactorChange{}
	if err = randomize.Struct(seed, factorChangeOne, factorChangeDBTypes, false, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}
	if err = randomize.Struct(seed, factorChangeTwo, factorChangeDBTypes, false, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = factorChangeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = factorChangeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func factorChangeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func factorChangeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func factorChangeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func factorChangeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func factorChangeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func factorChangeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func factorChangeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func factorChangeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func factorChangeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FactorChange) error {
	*o = FactorChange{}
	return nil
}

func testFactorChangesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FactorChange{}
	o := &FactorChange{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, factorChangeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FactorChange object: %s", err)
	}

	AddFactorChangeHook(boil.BeforeInsertHook, factorChangeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	factorChangeBeforeInsertHooks = []FactorChangeHook{}

	AddFactorChangeHook(boil.AfterInsertHook, factorChangeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	factorChangeAfterInsertHooks = []FactorChangeHook{}

	AddFactorChangeHook(boil.AfterSelectHook, factorChangeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	factorChangeAfterSelectHooks = []FactorChangeHook{}

	AddFactorChangeHook(boil.BeforeUpdateHook, factorChangeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	factorChangeBeforeUpdateHooks = []FactorChangeHook{}

	AddFactorChangeHook(boil.AfterUpdateHook, factorChangeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	factorChangeAfterUpdateHooks = []FactorChangeHook{}

	AddFactorChangeHook(boil.BeforeDeleteHook, factorChangeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	factorChangeBeforeDeleteHooks = []FactorChangeHook{}

	AddFactorChangeHook(boil.AfterDeleteHook, factorChangeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	factorChangeAfterDeleteHooks = []FactorChangeHook{}

	AddFactorChangeHook(boil.BeforeUpsertHook, factorChangeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	factorChangeBeforeUpsertHooks = []FactorChangeHook{}

	AddFactorChangeHook(boil.AfterUpsertHook, factorChangeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	factorChangeAfterUpsertHooks = []FactorChangeHook{}
}

func testFactorChangesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFactorChangesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(factorChangeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFactorChangesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFactorChangesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FactorChangeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFactorChangesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FactorChanges().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	factorChangeDBTypes = map[string]string{`Time`: `timestamp without time zone`, `EvalTime`: `timestamp without time zone`, `Pubimps`: `integer`, `Soldimps`: `integer`, `Cost`: `double precision`, `Revenue`: `double precision`, `GP`: `double precision`, `GPP`: `double precision`, `Publisher`: `character varying`, `Domain`: `character varying`, `Country`: `character`, `Device`: `character varying`, `OldFactor`: `double precision`, `NewFactor`: `double precision`, `ResponseStatus`: `integer`, `Increase`: `double precision`}
	_                   = bytes.MinRead
)

func testFactorChangesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(factorChangePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(factorChangeAllColumns) == len(factorChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFactorChangesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(factorChangeAllColumns) == len(factorChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FactorChange{}
	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, factorChangeDBTypes, true, factorChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(factorChangeAllColumns, factorChangePrimaryKeyColumns) {
		fields = factorChangeAllColumns
	} else {
		fields = strmangle.SetComplement(
			factorChangeAllColumns,
			factorChangePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FactorChangeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFactorChangesUpsert(t *testing.T) {
	t.Parallel()

	if len(factorChangeAllColumns) == len(factorChangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FactorChange{}
	if err = randomize.Struct(seed, &o, factorChangeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FactorChange: %s", err)
	}

	count, err := FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, factorChangeDBTypes, false, factorChangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FactorChange struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FactorChange: %s", err)
	}

	count, err = FactorChanges().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
