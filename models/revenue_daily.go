// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RevenueDaily is an object representing the database table.
type RevenueDaily struct {
	Time                 time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	PublisherImpressions int64     `boil:"publisher_impressions" json:"publisher_impressions" toml:"publisher_impressions" yaml:"publisher_impressions"`
	SoldImpressions      int64     `boil:"sold_impressions" json:"sold_impressions" toml:"sold_impressions" yaml:"sold_impressions"`
	Cost                 float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Revenue              float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	DemandPartnerFees    float64   `boil:"demand_partner_fees" json:"demand_partner_fees" toml:"demand_partner_fees" yaml:"demand_partner_fees"`
	MissedOpportunities  int64     `boil:"missed_opportunities" json:"missed_opportunities" toml:"missed_opportunities" yaml:"missed_opportunities"`
	DataFee              float64   `boil:"data_fee" json:"data_fee" toml:"data_fee" yaml:"data_fee"`
	DPBidRequests        int64     `boil:"dp_bid_requests" json:"dp_bid_requests" toml:"dp_bid_requests" yaml:"dp_bid_requests"`

	R *revenueDailyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L revenueDailyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RevenueDailyColumns = struct {
	Time                 string
	PublisherImpressions string
	SoldImpressions      string
	Cost                 string
	Revenue              string
	DemandPartnerFees    string
	MissedOpportunities  string
	DataFee              string
	DPBidRequests        string
}{
	Time:                 "time",
	PublisherImpressions: "publisher_impressions",
	SoldImpressions:      "sold_impressions",
	Cost:                 "cost",
	Revenue:              "revenue",
	DemandPartnerFees:    "demand_partner_fees",
	MissedOpportunities:  "missed_opportunities",
	DataFee:              "data_fee",
	DPBidRequests:        "dp_bid_requests",
}

var RevenueDailyTableColumns = struct {
	Time                 string
	PublisherImpressions string
	SoldImpressions      string
	Cost                 string
	Revenue              string
	DemandPartnerFees    string
	MissedOpportunities  string
	DataFee              string
	DPBidRequests        string
}{
	Time:                 "revenue_daily.time",
	PublisherImpressions: "revenue_daily.publisher_impressions",
	SoldImpressions:      "revenue_daily.sold_impressions",
	Cost:                 "revenue_daily.cost",
	Revenue:              "revenue_daily.revenue",
	DemandPartnerFees:    "revenue_daily.demand_partner_fees",
	MissedOpportunities:  "revenue_daily.missed_opportunities",
	DataFee:              "revenue_daily.data_fee",
	DPBidRequests:        "revenue_daily.dp_bid_requests",
}

// Generated where

var RevenueDailyWhere = struct {
	Time                 whereHelpertime_Time
	PublisherImpressions whereHelperint64
	SoldImpressions      whereHelperint64
	Cost                 whereHelperfloat64
	Revenue              whereHelperfloat64
	DemandPartnerFees    whereHelperfloat64
	MissedOpportunities  whereHelperint64
	DataFee              whereHelperfloat64
	DPBidRequests        whereHelperint64
}{
	Time:                 whereHelpertime_Time{field: "\"revenue_daily\".\"time\""},
	PublisherImpressions: whereHelperint64{field: "\"revenue_daily\".\"publisher_impressions\""},
	SoldImpressions:      whereHelperint64{field: "\"revenue_daily\".\"sold_impressions\""},
	Cost:                 whereHelperfloat64{field: "\"revenue_daily\".\"cost\""},
	Revenue:              whereHelperfloat64{field: "\"revenue_daily\".\"revenue\""},
	DemandPartnerFees:    whereHelperfloat64{field: "\"revenue_daily\".\"demand_partner_fees\""},
	MissedOpportunities:  whereHelperint64{field: "\"revenue_daily\".\"missed_opportunities\""},
	DataFee:              whereHelperfloat64{field: "\"revenue_daily\".\"data_fee\""},
	DPBidRequests:        whereHelperint64{field: "\"revenue_daily\".\"dp_bid_requests\""},
}

// RevenueDailyRels is where relationship names are stored.
var RevenueDailyRels = struct {
}{}

// revenueDailyR is where relationships are stored.
type revenueDailyR struct {
}

// NewStruct creates a new relationship struct
func (*revenueDailyR) NewStruct() *revenueDailyR {
	return &revenueDailyR{}
}

// revenueDailyL is where Load methods for each relationship are stored.
type revenueDailyL struct{}

var (
	revenueDailyAllColumns            = []string{"time", "publisher_impressions", "sold_impressions", "cost", "revenue", "demand_partner_fees", "missed_opportunities", "data_fee", "dp_bid_requests"}
	revenueDailyColumnsWithoutDefault = []string{"time"}
	revenueDailyColumnsWithDefault    = []string{"publisher_impressions", "sold_impressions", "cost", "revenue", "demand_partner_fees", "missed_opportunities", "data_fee", "dp_bid_requests"}
	revenueDailyPrimaryKeyColumns     = []string{"time"}
	revenueDailyGeneratedColumns      = []string{}
)

type (
	// RevenueDailySlice is an alias for a slice of pointers to RevenueDaily.
	// This should almost always be used instead of []RevenueDaily.
	RevenueDailySlice []*RevenueDaily
	// RevenueDailyHook is the signature for custom RevenueDaily hook methods
	RevenueDailyHook func(context.Context, boil.ContextExecutor, *RevenueDaily) error

	revenueDailyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	revenueDailyType                 = reflect.TypeOf(&RevenueDaily{})
	revenueDailyMapping              = queries.MakeStructMapping(revenueDailyType)
	revenueDailyPrimaryKeyMapping, _ = queries.BindMapping(revenueDailyType, revenueDailyMapping, revenueDailyPrimaryKeyColumns)
	revenueDailyInsertCacheMut       sync.RWMutex
	revenueDailyInsertCache          = make(map[string]insertCache)
	revenueDailyUpdateCacheMut       sync.RWMutex
	revenueDailyUpdateCache          = make(map[string]updateCache)
	revenueDailyUpsertCacheMut       sync.RWMutex
	revenueDailyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var revenueDailyAfterSelectHooks []RevenueDailyHook

var revenueDailyBeforeInsertHooks []RevenueDailyHook
var revenueDailyAfterInsertHooks []RevenueDailyHook

var revenueDailyBeforeUpdateHooks []RevenueDailyHook
var revenueDailyAfterUpdateHooks []RevenueDailyHook

var revenueDailyBeforeDeleteHooks []RevenueDailyHook
var revenueDailyAfterDeleteHooks []RevenueDailyHook

var revenueDailyBeforeUpsertHooks []RevenueDailyHook
var revenueDailyAfterUpsertHooks []RevenueDailyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RevenueDaily) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RevenueDaily) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RevenueDaily) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RevenueDaily) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RevenueDaily) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RevenueDaily) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RevenueDaily) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RevenueDaily) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RevenueDaily) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range revenueDailyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRevenueDailyHook registers your hook function for all future operations.
func AddRevenueDailyHook(hookPoint boil.HookPoint, revenueDailyHook RevenueDailyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		revenueDailyAfterSelectHooks = append(revenueDailyAfterSelectHooks, revenueDailyHook)
	case boil.BeforeInsertHook:
		revenueDailyBeforeInsertHooks = append(revenueDailyBeforeInsertHooks, revenueDailyHook)
	case boil.AfterInsertHook:
		revenueDailyAfterInsertHooks = append(revenueDailyAfterInsertHooks, revenueDailyHook)
	case boil.BeforeUpdateHook:
		revenueDailyBeforeUpdateHooks = append(revenueDailyBeforeUpdateHooks, revenueDailyHook)
	case boil.AfterUpdateHook:
		revenueDailyAfterUpdateHooks = append(revenueDailyAfterUpdateHooks, revenueDailyHook)
	case boil.BeforeDeleteHook:
		revenueDailyBeforeDeleteHooks = append(revenueDailyBeforeDeleteHooks, revenueDailyHook)
	case boil.AfterDeleteHook:
		revenueDailyAfterDeleteHooks = append(revenueDailyAfterDeleteHooks, revenueDailyHook)
	case boil.BeforeUpsertHook:
		revenueDailyBeforeUpsertHooks = append(revenueDailyBeforeUpsertHooks, revenueDailyHook)
	case boil.AfterUpsertHook:
		revenueDailyAfterUpsertHooks = append(revenueDailyAfterUpsertHooks, revenueDailyHook)
	}
}

// One returns a single revenueDaily record from the query.
func (q revenueDailyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RevenueDaily, error) {
	o := &RevenueDaily{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for revenue_daily")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RevenueDaily records from the query.
func (q revenueDailyQuery) All(ctx context.Context, exec boil.ContextExecutor) (RevenueDailySlice, error) {
	var o []*RevenueDaily

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RevenueDaily slice")
	}

	if len(revenueDailyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RevenueDaily records in the query.
func (q revenueDailyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count revenue_daily rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q revenueDailyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if revenue_daily exists")
	}

	return count > 0, nil
}

// RevenueDailies retrieves all the records using an executor.
func RevenueDailies(mods ...qm.QueryMod) revenueDailyQuery {
	mods = append(mods, qm.From("\"revenue_daily\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"revenue_daily\".*"})
	}

	return revenueDailyQuery{q}
}

// FindRevenueDaily retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRevenueDaily(ctx context.Context, exec boil.ContextExecutor, time time.Time, selectCols ...string) (*RevenueDaily, error) {
	revenueDailyObj := &RevenueDaily{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"revenue_daily\" where \"time\"=$1", sel,
	)

	q := queries.Raw(query, time)

	err := q.Bind(ctx, exec, revenueDailyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from revenue_daily")
	}

	if err = revenueDailyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return revenueDailyObj, err
	}

	return revenueDailyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RevenueDaily) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no revenue_daily provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(revenueDailyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	revenueDailyInsertCacheMut.RLock()
	cache, cached := revenueDailyInsertCache[key]
	revenueDailyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			revenueDailyAllColumns,
			revenueDailyColumnsWithDefault,
			revenueDailyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(revenueDailyType, revenueDailyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(revenueDailyType, revenueDailyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"revenue_daily\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"revenue_daily\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into revenue_daily")
	}

	if !cached {
		revenueDailyInsertCacheMut.Lock()
		revenueDailyInsertCache[key] = cache
		revenueDailyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RevenueDaily.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RevenueDaily) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	revenueDailyUpdateCacheMut.RLock()
	cache, cached := revenueDailyUpdateCache[key]
	revenueDailyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			revenueDailyAllColumns,
			revenueDailyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update revenue_daily, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"revenue_daily\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, revenueDailyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(revenueDailyType, revenueDailyMapping, append(wl, revenueDailyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update revenue_daily row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for revenue_daily")
	}

	if !cached {
		revenueDailyUpdateCacheMut.Lock()
		revenueDailyUpdateCache[key] = cache
		revenueDailyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q revenueDailyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for revenue_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for revenue_daily")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RevenueDailySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revenueDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"revenue_daily\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, revenueDailyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in revenueDaily slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all revenueDaily")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RevenueDaily) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no revenue_daily provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(revenueDailyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	revenueDailyUpsertCacheMut.RLock()
	cache, cached := revenueDailyUpsertCache[key]
	revenueDailyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			revenueDailyAllColumns,
			revenueDailyColumnsWithDefault,
			revenueDailyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			revenueDailyAllColumns,
			revenueDailyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert revenue_daily, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(revenueDailyPrimaryKeyColumns))
			copy(conflict, revenueDailyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"revenue_daily\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(revenueDailyType, revenueDailyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(revenueDailyType, revenueDailyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert revenue_daily")
	}

	if !cached {
		revenueDailyUpsertCacheMut.Lock()
		revenueDailyUpsertCache[key] = cache
		revenueDailyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RevenueDaily record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RevenueDaily) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RevenueDaily provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), revenueDailyPrimaryKeyMapping)
	sql := "DELETE FROM \"revenue_daily\" WHERE \"time\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from revenue_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for revenue_daily")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q revenueDailyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no revenueDailyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from revenue_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for revenue_daily")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RevenueDailySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(revenueDailyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revenueDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"revenue_daily\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, revenueDailyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from revenueDaily slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for revenue_daily")
	}

	if len(revenueDailyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RevenueDaily) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRevenueDaily(ctx, exec, o.Time)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RevenueDailySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RevenueDailySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), revenueDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"revenue_daily\".* FROM \"revenue_daily\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, revenueDailyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RevenueDailySlice")
	}

	*o = slice

	return nil
}

// RevenueDailyExists checks if the RevenueDaily row exists.
func RevenueDailyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"revenue_daily\" where \"time\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time)
	}
	row := exec.QueryRowContext(ctx, sql, time)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if revenue_daily exists")
	}

	return exists, nil
}

// Exists checks if the RevenueDaily row exists.
func (o *RevenueDaily) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RevenueDailyExists(ctx, exec, o.Time)
}
