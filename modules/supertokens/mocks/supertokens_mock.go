// Code generated by http://github.com/gojuno/minimock (v3.3.6). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/m6yf/bcwork/modules/supertokens.TokenManagementSystem -o supertokens_mock.go -n TokenManagementSystemMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TokenManagementSystemMock implements supertokens.TokenManagementSystem
type TokenManagementSystemMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateUser          func(ctx context.Context, email string, password string) (s1 string, err error)
	inspectFuncCreateUser   func(ctx context.Context, email string, password string)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mTokenManagementSystemMockCreateUser

	funcRevokeAllSessionsForUser          func(userID string) (err error)
	inspectFuncRevokeAllSessionsForUser   func(userID string)
	afterRevokeAllSessionsForUserCounter  uint64
	beforeRevokeAllSessionsForUserCounter uint64
	RevokeAllSessionsForUserMock          mTokenManagementSystemMockRevokeAllSessionsForUser
}

// NewTokenManagementSystemMock returns a mock for supertokens.TokenManagementSystem
func NewTokenManagementSystemMock(t minimock.Tester) *TokenManagementSystemMock {
	m := &TokenManagementSystemMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mTokenManagementSystemMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*TokenManagementSystemMockCreateUserParams{}

	m.RevokeAllSessionsForUserMock = mTokenManagementSystemMockRevokeAllSessionsForUser{mock: m}
	m.RevokeAllSessionsForUserMock.callArgs = []*TokenManagementSystemMockRevokeAllSessionsForUserParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTokenManagementSystemMockCreateUser struct {
	mock               *TokenManagementSystemMock
	defaultExpectation *TokenManagementSystemMockCreateUserExpectation
	expectations       []*TokenManagementSystemMockCreateUserExpectation

	callArgs []*TokenManagementSystemMockCreateUserParams
	mutex    sync.RWMutex
}

// TokenManagementSystemMockCreateUserExpectation specifies expectation struct of the TokenManagementSystem.CreateUser
type TokenManagementSystemMockCreateUserExpectation struct {
	mock    *TokenManagementSystemMock
	params  *TokenManagementSystemMockCreateUserParams
	results *TokenManagementSystemMockCreateUserResults
	Counter uint64
}

// TokenManagementSystemMockCreateUserParams contains parameters of the TokenManagementSystem.CreateUser
type TokenManagementSystemMockCreateUserParams struct {
	ctx      context.Context
	email    string
	password string
}

// TokenManagementSystemMockCreateUserResults contains results of the TokenManagementSystem.CreateUser
type TokenManagementSystemMockCreateUserResults struct {
	s1  string
	err error
}

// Expect sets up expected params for TokenManagementSystem.CreateUser
func (mmCreateUser *mTokenManagementSystemMockCreateUser) Expect(ctx context.Context, email string, password string) *mTokenManagementSystemMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("TokenManagementSystemMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &TokenManagementSystemMockCreateUserExpectation{}
	}

	mmCreateUser.defaultExpectation.params = &TokenManagementSystemMockCreateUserParams{ctx, email, password}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the TokenManagementSystem.CreateUser
func (mmCreateUser *mTokenManagementSystemMockCreateUser) Inspect(f func(ctx context.Context, email string, password string)) *mTokenManagementSystemMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for TokenManagementSystemMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by TokenManagementSystem.CreateUser
func (mmCreateUser *mTokenManagementSystemMockCreateUser) Return(s1 string, err error) *TokenManagementSystemMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("TokenManagementSystemMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &TokenManagementSystemMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &TokenManagementSystemMockCreateUserResults{s1, err}
	return mmCreateUser.mock
}

// Set uses given function f to mock the TokenManagementSystem.CreateUser method
func (mmCreateUser *mTokenManagementSystemMockCreateUser) Set(f func(ctx context.Context, email string, password string) (s1 string, err error)) *TokenManagementSystemMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the TokenManagementSystem.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the TokenManagementSystem.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the TokenManagementSystem.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mTokenManagementSystemMockCreateUser) When(ctx context.Context, email string, password string) *TokenManagementSystemMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("TokenManagementSystemMock.CreateUser mock is already set by Set")
	}

	expectation := &TokenManagementSystemMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &TokenManagementSystemMockCreateUserParams{ctx, email, password},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up TokenManagementSystem.CreateUser return parameters for the expectation previously defined by the When method
func (e *TokenManagementSystemMockCreateUserExpectation) Then(s1 string, err error) *TokenManagementSystemMock {
	e.results = &TokenManagementSystemMockCreateUserResults{s1, err}
	return e.mock
}

// CreateUser implements supertokens.TokenManagementSystem
func (mmCreateUser *TokenManagementSystemMock) CreateUser(ctx context.Context, email string, password string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, email, password)
	}

	mm_params := TokenManagementSystemMockCreateUserParams{ctx, email, password}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, &mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_got := TokenManagementSystemMockCreateUserParams{ctx, email, password}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("TokenManagementSystemMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the TokenManagementSystemMock.CreateUser")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, email, password)
	}
	mmCreateUser.t.Fatalf("Unexpected call to TokenManagementSystemMock.CreateUser. %v %v %v", ctx, email, password)
	return
}

// CreateUserAfterCounter returns a count of finished TokenManagementSystemMock.CreateUser invocations
func (mmCreateUser *TokenManagementSystemMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of TokenManagementSystemMock.CreateUser invocations
func (mmCreateUser *TokenManagementSystemMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to TokenManagementSystemMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mTokenManagementSystemMockCreateUser) Calls() []*TokenManagementSystemMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*TokenManagementSystemMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *TokenManagementSystemMock) MinimockCreateUserDone() bool {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *TokenManagementSystemMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenManagementSystemMock.CreateUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TokenManagementSystemMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to TokenManagementSystemMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && mm_atomic.LoadUint64(&m.afterCreateUserCounter) < 1 {
		m.t.Error("Expected call to TokenManagementSystemMock.CreateUser")
	}
}

type mTokenManagementSystemMockRevokeAllSessionsForUser struct {
	mock               *TokenManagementSystemMock
	defaultExpectation *TokenManagementSystemMockRevokeAllSessionsForUserExpectation
	expectations       []*TokenManagementSystemMockRevokeAllSessionsForUserExpectation

	callArgs []*TokenManagementSystemMockRevokeAllSessionsForUserParams
	mutex    sync.RWMutex
}

// TokenManagementSystemMockRevokeAllSessionsForUserExpectation specifies expectation struct of the TokenManagementSystem.RevokeAllSessionsForUser
type TokenManagementSystemMockRevokeAllSessionsForUserExpectation struct {
	mock    *TokenManagementSystemMock
	params  *TokenManagementSystemMockRevokeAllSessionsForUserParams
	results *TokenManagementSystemMockRevokeAllSessionsForUserResults
	Counter uint64
}

// TokenManagementSystemMockRevokeAllSessionsForUserParams contains parameters of the TokenManagementSystem.RevokeAllSessionsForUser
type TokenManagementSystemMockRevokeAllSessionsForUserParams struct {
	userID string
}

// TokenManagementSystemMockRevokeAllSessionsForUserResults contains results of the TokenManagementSystem.RevokeAllSessionsForUser
type TokenManagementSystemMockRevokeAllSessionsForUserResults struct {
	err error
}

// Expect sets up expected params for TokenManagementSystem.RevokeAllSessionsForUser
func (mmRevokeAllSessionsForUser *mTokenManagementSystemMockRevokeAllSessionsForUser) Expect(userID string) *mTokenManagementSystemMockRevokeAllSessionsForUser {
	if mmRevokeAllSessionsForUser.mock.funcRevokeAllSessionsForUser != nil {
		mmRevokeAllSessionsForUser.mock.t.Fatalf("TokenManagementSystemMock.RevokeAllSessionsForUser mock is already set by Set")
	}

	if mmRevokeAllSessionsForUser.defaultExpectation == nil {
		mmRevokeAllSessionsForUser.defaultExpectation = &TokenManagementSystemMockRevokeAllSessionsForUserExpectation{}
	}

	mmRevokeAllSessionsForUser.defaultExpectation.params = &TokenManagementSystemMockRevokeAllSessionsForUserParams{userID}
	for _, e := range mmRevokeAllSessionsForUser.expectations {
		if minimock.Equal(e.params, mmRevokeAllSessionsForUser.defaultExpectation.params) {
			mmRevokeAllSessionsForUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRevokeAllSessionsForUser.defaultExpectation.params)
		}
	}

	return mmRevokeAllSessionsForUser
}

// Inspect accepts an inspector function that has same arguments as the TokenManagementSystem.RevokeAllSessionsForUser
func (mmRevokeAllSessionsForUser *mTokenManagementSystemMockRevokeAllSessionsForUser) Inspect(f func(userID string)) *mTokenManagementSystemMockRevokeAllSessionsForUser {
	if mmRevokeAllSessionsForUser.mock.inspectFuncRevokeAllSessionsForUser != nil {
		mmRevokeAllSessionsForUser.mock.t.Fatalf("Inspect function is already set for TokenManagementSystemMock.RevokeAllSessionsForUser")
	}

	mmRevokeAllSessionsForUser.mock.inspectFuncRevokeAllSessionsForUser = f

	return mmRevokeAllSessionsForUser
}

// Return sets up results that will be returned by TokenManagementSystem.RevokeAllSessionsForUser
func (mmRevokeAllSessionsForUser *mTokenManagementSystemMockRevokeAllSessionsForUser) Return(err error) *TokenManagementSystemMock {
	if mmRevokeAllSessionsForUser.mock.funcRevokeAllSessionsForUser != nil {
		mmRevokeAllSessionsForUser.mock.t.Fatalf("TokenManagementSystemMock.RevokeAllSessionsForUser mock is already set by Set")
	}

	if mmRevokeAllSessionsForUser.defaultExpectation == nil {
		mmRevokeAllSessionsForUser.defaultExpectation = &TokenManagementSystemMockRevokeAllSessionsForUserExpectation{mock: mmRevokeAllSessionsForUser.mock}
	}
	mmRevokeAllSessionsForUser.defaultExpectation.results = &TokenManagementSystemMockRevokeAllSessionsForUserResults{err}
	return mmRevokeAllSessionsForUser.mock
}

// Set uses given function f to mock the TokenManagementSystem.RevokeAllSessionsForUser method
func (mmRevokeAllSessionsForUser *mTokenManagementSystemMockRevokeAllSessionsForUser) Set(f func(userID string) (err error)) *TokenManagementSystemMock {
	if mmRevokeAllSessionsForUser.defaultExpectation != nil {
		mmRevokeAllSessionsForUser.mock.t.Fatalf("Default expectation is already set for the TokenManagementSystem.RevokeAllSessionsForUser method")
	}

	if len(mmRevokeAllSessionsForUser.expectations) > 0 {
		mmRevokeAllSessionsForUser.mock.t.Fatalf("Some expectations are already set for the TokenManagementSystem.RevokeAllSessionsForUser method")
	}

	mmRevokeAllSessionsForUser.mock.funcRevokeAllSessionsForUser = f
	return mmRevokeAllSessionsForUser.mock
}

// When sets expectation for the TokenManagementSystem.RevokeAllSessionsForUser which will trigger the result defined by the following
// Then helper
func (mmRevokeAllSessionsForUser *mTokenManagementSystemMockRevokeAllSessionsForUser) When(userID string) *TokenManagementSystemMockRevokeAllSessionsForUserExpectation {
	if mmRevokeAllSessionsForUser.mock.funcRevokeAllSessionsForUser != nil {
		mmRevokeAllSessionsForUser.mock.t.Fatalf("TokenManagementSystemMock.RevokeAllSessionsForUser mock is already set by Set")
	}

	expectation := &TokenManagementSystemMockRevokeAllSessionsForUserExpectation{
		mock:   mmRevokeAllSessionsForUser.mock,
		params: &TokenManagementSystemMockRevokeAllSessionsForUserParams{userID},
	}
	mmRevokeAllSessionsForUser.expectations = append(mmRevokeAllSessionsForUser.expectations, expectation)
	return expectation
}

// Then sets up TokenManagementSystem.RevokeAllSessionsForUser return parameters for the expectation previously defined by the When method
func (e *TokenManagementSystemMockRevokeAllSessionsForUserExpectation) Then(err error) *TokenManagementSystemMock {
	e.results = &TokenManagementSystemMockRevokeAllSessionsForUserResults{err}
	return e.mock
}

// RevokeAllSessionsForUser implements supertokens.TokenManagementSystem
func (mmRevokeAllSessionsForUser *TokenManagementSystemMock) RevokeAllSessionsForUser(userID string) (err error) {
	mm_atomic.AddUint64(&mmRevokeAllSessionsForUser.beforeRevokeAllSessionsForUserCounter, 1)
	defer mm_atomic.AddUint64(&mmRevokeAllSessionsForUser.afterRevokeAllSessionsForUserCounter, 1)

	if mmRevokeAllSessionsForUser.inspectFuncRevokeAllSessionsForUser != nil {
		mmRevokeAllSessionsForUser.inspectFuncRevokeAllSessionsForUser(userID)
	}

	mm_params := TokenManagementSystemMockRevokeAllSessionsForUserParams{userID}

	// Record call args
	mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.mutex.Lock()
	mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.callArgs = append(mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.callArgs, &mm_params)
	mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.mutex.Unlock()

	for _, e := range mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.defaultExpectation.Counter, 1)
		mm_want := mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.defaultExpectation.params
		mm_got := TokenManagementSystemMockRevokeAllSessionsForUserParams{userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRevokeAllSessionsForUser.t.Errorf("TokenManagementSystemMock.RevokeAllSessionsForUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRevokeAllSessionsForUser.RevokeAllSessionsForUserMock.defaultExpectation.results
		if mm_results == nil {
			mmRevokeAllSessionsForUser.t.Fatal("No results are set for the TokenManagementSystemMock.RevokeAllSessionsForUser")
		}
		return (*mm_results).err
	}
	if mmRevokeAllSessionsForUser.funcRevokeAllSessionsForUser != nil {
		return mmRevokeAllSessionsForUser.funcRevokeAllSessionsForUser(userID)
	}
	mmRevokeAllSessionsForUser.t.Fatalf("Unexpected call to TokenManagementSystemMock.RevokeAllSessionsForUser. %v", userID)
	return
}

// RevokeAllSessionsForUserAfterCounter returns a count of finished TokenManagementSystemMock.RevokeAllSessionsForUser invocations
func (mmRevokeAllSessionsForUser *TokenManagementSystemMock) RevokeAllSessionsForUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRevokeAllSessionsForUser.afterRevokeAllSessionsForUserCounter)
}

// RevokeAllSessionsForUserBeforeCounter returns a count of TokenManagementSystemMock.RevokeAllSessionsForUser invocations
func (mmRevokeAllSessionsForUser *TokenManagementSystemMock) RevokeAllSessionsForUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRevokeAllSessionsForUser.beforeRevokeAllSessionsForUserCounter)
}

// Calls returns a list of arguments used in each call to TokenManagementSystemMock.RevokeAllSessionsForUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRevokeAllSessionsForUser *mTokenManagementSystemMockRevokeAllSessionsForUser) Calls() []*TokenManagementSystemMockRevokeAllSessionsForUserParams {
	mmRevokeAllSessionsForUser.mutex.RLock()

	argCopy := make([]*TokenManagementSystemMockRevokeAllSessionsForUserParams, len(mmRevokeAllSessionsForUser.callArgs))
	copy(argCopy, mmRevokeAllSessionsForUser.callArgs)

	mmRevokeAllSessionsForUser.mutex.RUnlock()

	return argCopy
}

// MinimockRevokeAllSessionsForUserDone returns true if the count of the RevokeAllSessionsForUser invocations corresponds
// the number of defined expectations
func (m *TokenManagementSystemMock) MinimockRevokeAllSessionsForUserDone() bool {
	for _, e := range m.RevokeAllSessionsForUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RevokeAllSessionsForUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRevokeAllSessionsForUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRevokeAllSessionsForUser != nil && mm_atomic.LoadUint64(&m.afterRevokeAllSessionsForUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockRevokeAllSessionsForUserInspect logs each unmet expectation
func (m *TokenManagementSystemMock) MinimockRevokeAllSessionsForUserInspect() {
	for _, e := range m.RevokeAllSessionsForUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenManagementSystemMock.RevokeAllSessionsForUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RevokeAllSessionsForUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRevokeAllSessionsForUserCounter) < 1 {
		if m.RevokeAllSessionsForUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TokenManagementSystemMock.RevokeAllSessionsForUser")
		} else {
			m.t.Errorf("Expected call to TokenManagementSystemMock.RevokeAllSessionsForUser with params: %#v", *m.RevokeAllSessionsForUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRevokeAllSessionsForUser != nil && mm_atomic.LoadUint64(&m.afterRevokeAllSessionsForUserCounter) < 1 {
		m.t.Error("Expected call to TokenManagementSystemMock.RevokeAllSessionsForUser")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TokenManagementSystemMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateUserInspect()

			m.MinimockRevokeAllSessionsForUserInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TokenManagementSystemMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TokenManagementSystemMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone() &&
		m.MinimockRevokeAllSessionsForUserDone()
}
