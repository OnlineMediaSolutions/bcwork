// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellersJSONHistories(t *testing.T) {
	t.Parallel()

	query := SellersJSONHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellersJSONHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellersJSONHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SellersJSONHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellersJSONHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellersJSONHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellersJSONHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellersJSONHistoryExists(ctx, tx, o.CompetitorName)
	if err != nil {
		t.Errorf("Unable to check if SellersJSONHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellersJSONHistoryExists to return true, but got false.")
	}
}

func testSellersJSONHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellersJSONHistoryFound, err := FindSellersJSONHistory(ctx, tx, o.CompetitorName)
	if err != nil {
		t.Error(err)
	}

	if sellersJSONHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellersJSONHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SellersJSONHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellersJSONHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SellersJSONHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellersJSONHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellersJSONHistoryOne := &SellersJSONHistory{}
	sellersJSONHistoryTwo := &SellersJSONHistory{}
	if err = randomize.Struct(seed, sellersJSONHistoryOne, sellersJSONHistoryDBTypes, false, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, sellersJSONHistoryTwo, sellersJSONHistoryDBTypes, false, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellersJSONHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellersJSONHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellersJSONHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellersJSONHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellersJSONHistoryOne := &SellersJSONHistory{}
	sellersJSONHistoryTwo := &SellersJSONHistory{}
	if err = randomize.Struct(seed, sellersJSONHistoryOne, sellersJSONHistoryDBTypes, false, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, sellersJSONHistoryTwo, sellersJSONHistoryDBTypes, false, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellersJSONHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellersJSONHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellersJSONHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func sellersJSONHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func sellersJSONHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func sellersJSONHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func sellersJSONHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func sellersJSONHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func sellersJSONHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func sellersJSONHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func sellersJSONHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellersJSONHistory) error {
	*o = SellersJSONHistory{}
	return nil
}

func testSellersJSONHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SellersJSONHistory{}
	o := &SellersJSONHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory object: %s", err)
	}

	AddSellersJSONHistoryHook(boil.BeforeInsertHook, sellersJSONHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryBeforeInsertHooks = []SellersJSONHistoryHook{}

	AddSellersJSONHistoryHook(boil.AfterInsertHook, sellersJSONHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryAfterInsertHooks = []SellersJSONHistoryHook{}

	AddSellersJSONHistoryHook(boil.AfterSelectHook, sellersJSONHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryAfterSelectHooks = []SellersJSONHistoryHook{}

	AddSellersJSONHistoryHook(boil.BeforeUpdateHook, sellersJSONHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryBeforeUpdateHooks = []SellersJSONHistoryHook{}

	AddSellersJSONHistoryHook(boil.AfterUpdateHook, sellersJSONHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryAfterUpdateHooks = []SellersJSONHistoryHook{}

	AddSellersJSONHistoryHook(boil.BeforeDeleteHook, sellersJSONHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryBeforeDeleteHooks = []SellersJSONHistoryHook{}

	AddSellersJSONHistoryHook(boil.AfterDeleteHook, sellersJSONHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryAfterDeleteHooks = []SellersJSONHistoryHook{}

	AddSellersJSONHistoryHook(boil.BeforeUpsertHook, sellersJSONHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryBeforeUpsertHooks = []SellersJSONHistoryHook{}

	AddSellersJSONHistoryHook(boil.AfterUpsertHook, sellersJSONHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellersJSONHistoryAfterUpsertHooks = []SellersJSONHistoryHook{}
}

func testSellersJSONHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellersJSONHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellersJSONHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellersJSONHistoryToOneCompetitorUsingCompetitorNameCompetitor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellersJSONHistory
	var foreign Competitor

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellersJSONHistoryDBTypes, false, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, competitorDBTypes, false, competitorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Competitor struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CompetitorName = foreign.Name
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CompetitorNameCompetitor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Name != foreign.Name {
		t.Errorf("want: %v, got %v", foreign.Name, check.Name)
	}

	ranAfterSelectHook := false
	AddCompetitorHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Competitor) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SellersJSONHistorySlice{&local}
	if err = local.L.LoadCompetitorNameCompetitor(ctx, tx, false, (*[]*SellersJSONHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CompetitorNameCompetitor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CompetitorNameCompetitor = nil
	if err = local.L.LoadCompetitorNameCompetitor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CompetitorNameCompetitor == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSellersJSONHistoryToOneSetOpCompetitorUsingCompetitorNameCompetitor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellersJSONHistory
	var b, c Competitor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellersJSONHistoryDBTypes, false, strmangle.SetComplement(sellersJSONHistoryPrimaryKeyColumns, sellersJSONHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, competitorDBTypes, false, strmangle.SetComplement(competitorPrimaryKeyColumns, competitorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, competitorDBTypes, false, strmangle.SetComplement(competitorPrimaryKeyColumns, competitorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Competitor{&b, &c} {
		err = a.SetCompetitorNameCompetitor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CompetitorNameCompetitor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CompetitorNameSellersJSONHistory != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompetitorName != x.Name {
			t.Error("foreign key was wrong value", a.CompetitorName)
		}

		if exists, err := SellersJSONHistoryExists(ctx, tx, a.CompetitorName); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testSellersJSONHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellersJSONHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellersJSONHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellersJSONHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellersJSONHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellersJSONHistoryDBTypes = map[string]string{`CompetitorName`: `character varying`, `AddedDomains`: `text`, `AddedPublishers`: `text`, `BackupToday`: `jsonb`, `BackupYesterday`: `jsonb`, `BackupBeforeYesterday`: `jsonb`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedDomains`: `text`, `DeletedPublishers`: `text`}
	_                         = bytes.MinRead
)

func testSellersJSONHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellersJSONHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellersJSONHistoryAllColumns) == len(sellersJSONHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellersJSONHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellersJSONHistoryAllColumns) == len(sellersJSONHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellersJSONHistory{}
	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellersJSONHistoryDBTypes, true, sellersJSONHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellersJSONHistoryAllColumns, sellersJSONHistoryPrimaryKeyColumns) {
		fields = sellersJSONHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellersJSONHistoryAllColumns,
			sellersJSONHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellersJSONHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellersJSONHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(sellersJSONHistoryAllColumns) == len(sellersJSONHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SellersJSONHistory{}
	if err = randomize.Struct(seed, &o, sellersJSONHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellersJSONHistory: %s", err)
	}

	count, err := SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellersJSONHistoryDBTypes, false, sellersJSONHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellersJSONHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellersJSONHistory: %s", err)
	}

	count, err = SellersJSONHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
