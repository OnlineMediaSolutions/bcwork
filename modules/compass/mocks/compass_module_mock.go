// Code generated by http://github.com/gojuno/minimock (v3.3.6). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/m6yf/bcwork/modules/compass.CompassModule -o compass_module_mock.go -n CompassModuleMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CompassModuleMock implements CompassModule
type CompassModuleMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcRequest          func(url string, method string, body []byte, isReportingRequest bool) (ba1 []byte, err error)
	inspectFuncRequest   func(url string, method string, body []byte, isReportingRequest bool)
	afterRequestCounter  uint64
	beforeRequestCounter uint64
	RequestMock          mCompassModuleMockRequest
}

// NewCompassModuleMock returns a mock for CompassModule
func NewCompassModuleMock(t minimock.Tester) *CompassModuleMock {
	m := &CompassModuleMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RequestMock = mCompassModuleMockRequest{mock: m}
	m.RequestMock.callArgs = []*CompassModuleMockRequestParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCompassModuleMockRequest struct {
	mock               *CompassModuleMock
	defaultExpectation *CompassModuleMockRequestExpectation
	expectations       []*CompassModuleMockRequestExpectation

	callArgs []*CompassModuleMockRequestParams
	mutex    sync.RWMutex
}

// CompassModuleMockRequestExpectation specifies expectation struct of the CompassModule.Request
type CompassModuleMockRequestExpectation struct {
	mock    *CompassModuleMock
	params  *CompassModuleMockRequestParams
	results *CompassModuleMockRequestResults
	Counter uint64
}

// CompassModuleMockRequestParams contains parameters of the CompassModule.Request
type CompassModuleMockRequestParams struct {
	url                string
	method             string
	body               []byte
	isReportingRequest bool
}

// CompassModuleMockRequestResults contains results of the CompassModule.Request
type CompassModuleMockRequestResults struct {
	ba1 []byte
	err error
}

// Expect sets up expected params for CompassModule.Request
func (mmRequest *mCompassModuleMockRequest) Expect(url string, method string, body []byte, isReportingRequest bool) *mCompassModuleMockRequest {
	if mmRequest.mock.funcRequest != nil {
		mmRequest.mock.t.Fatalf("CompassModuleMock.Request mock is already set by Set")
	}

	if mmRequest.defaultExpectation == nil {
		mmRequest.defaultExpectation = &CompassModuleMockRequestExpectation{}
	}

	mmRequest.defaultExpectation.params = &CompassModuleMockRequestParams{url, method, body, isReportingRequest}
	for _, e := range mmRequest.expectations {
		if minimock.Equal(e.params, mmRequest.defaultExpectation.params) {
			mmRequest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRequest.defaultExpectation.params)
		}
	}

	return mmRequest
}

// Inspect accepts an inspector function that has same arguments as the CompassModule.Request
func (mmRequest *mCompassModuleMockRequest) Inspect(f func(url string, method string, body []byte, isReportingRequest bool)) *mCompassModuleMockRequest {
	if mmRequest.mock.inspectFuncRequest != nil {
		mmRequest.mock.t.Fatalf("Inspect function is already set for CompassModuleMock.Request")
	}

	mmRequest.mock.inspectFuncRequest = f

	return mmRequest
}

// Return sets up results that will be returned by CompassModule.Request
func (mmRequest *mCompassModuleMockRequest) Return(ba1 []byte, err error) *CompassModuleMock {
	if mmRequest.mock.funcRequest != nil {
		mmRequest.mock.t.Fatalf("CompassModuleMock.Request mock is already set by Set")
	}

	if mmRequest.defaultExpectation == nil {
		mmRequest.defaultExpectation = &CompassModuleMockRequestExpectation{mock: mmRequest.mock}
	}
	mmRequest.defaultExpectation.results = &CompassModuleMockRequestResults{ba1, err}
	return mmRequest.mock
}

// Set uses given function f to mock the CompassModule.Request method
func (mmRequest *mCompassModuleMockRequest) Set(f func(url string, method string, body []byte, isReportingRequest bool) (ba1 []byte, err error)) *CompassModuleMock {
	if mmRequest.defaultExpectation != nil {
		mmRequest.mock.t.Fatalf("Default expectation is already set for the CompassModule.Request method")
	}

	if len(mmRequest.expectations) > 0 {
		mmRequest.mock.t.Fatalf("Some expectations are already set for the CompassModule.Request method")
	}

	mmRequest.mock.funcRequest = f
	return mmRequest.mock
}

// When sets expectation for the CompassModule.Request which will trigger the result defined by the following
// Then helper
func (mmRequest *mCompassModuleMockRequest) When(url string, method string, body []byte, isReportingRequest bool) *CompassModuleMockRequestExpectation {
	if mmRequest.mock.funcRequest != nil {
		mmRequest.mock.t.Fatalf("CompassModuleMock.Request mock is already set by Set")
	}

	expectation := &CompassModuleMockRequestExpectation{
		mock:   mmRequest.mock,
		params: &CompassModuleMockRequestParams{url, method, body, isReportingRequest},
	}
	mmRequest.expectations = append(mmRequest.expectations, expectation)
	return expectation
}

// Then sets up CompassModule.Request return parameters for the expectation previously defined by the When method
func (e *CompassModuleMockRequestExpectation) Then(ba1 []byte, err error) *CompassModuleMock {
	e.results = &CompassModuleMockRequestResults{ba1, err}
	return e.mock
}

// Request implements CompassModule
func (mmRequest *CompassModuleMock) Request(url string, method string, body []byte, isReportingRequest bool) (ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmRequest.beforeRequestCounter, 1)
	defer mm_atomic.AddUint64(&mmRequest.afterRequestCounter, 1)

	if mmRequest.inspectFuncRequest != nil {
		mmRequest.inspectFuncRequest(url, method, body, isReportingRequest)
	}

	mm_params := CompassModuleMockRequestParams{url, method, body, isReportingRequest}

	// Record call args
	mmRequest.RequestMock.mutex.Lock()
	mmRequest.RequestMock.callArgs = append(mmRequest.RequestMock.callArgs, &mm_params)
	mmRequest.RequestMock.mutex.Unlock()

	for _, e := range mmRequest.RequestMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1, e.results.err
		}
	}

	if mmRequest.RequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequest.RequestMock.defaultExpectation.Counter, 1)
		mm_want := mmRequest.RequestMock.defaultExpectation.params
		mm_got := CompassModuleMockRequestParams{url, method, body, isReportingRequest}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRequest.t.Errorf("CompassModuleMock.Request got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRequest.RequestMock.defaultExpectation.results
		if mm_results == nil {
			mmRequest.t.Fatal("No results are set for the CompassModuleMock.Request")
		}
		return (*mm_results).ba1, (*mm_results).err
	}
	if mmRequest.funcRequest != nil {
		return mmRequest.funcRequest(url, method, body, isReportingRequest)
	}
	mmRequest.t.Fatalf("Unexpected call to CompassModuleMock.Request. %v %v %v %v", url, method, body, isReportingRequest)
	return
}

// RequestAfterCounter returns a count of finished CompassModuleMock.Request invocations
func (mmRequest *CompassModuleMock) RequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequest.afterRequestCounter)
}

// RequestBeforeCounter returns a count of CompassModuleMock.Request invocations
func (mmRequest *CompassModuleMock) RequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequest.beforeRequestCounter)
}

// Calls returns a list of arguments used in each call to CompassModuleMock.Request.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRequest *mCompassModuleMockRequest) Calls() []*CompassModuleMockRequestParams {
	mmRequest.mutex.RLock()

	argCopy := make([]*CompassModuleMockRequestParams, len(mmRequest.callArgs))
	copy(argCopy, mmRequest.callArgs)

	mmRequest.mutex.RUnlock()

	return argCopy
}

// MinimockRequestDone returns true if the count of the Request invocations corresponds
// the number of defined expectations
func (m *CompassModuleMock) MinimockRequestDone() bool {
	for _, e := range m.RequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequest != nil && mm_atomic.LoadUint64(&m.afterRequestCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestInspect logs each unmet expectation
func (m *CompassModuleMock) MinimockRequestInspect() {
	for _, e := range m.RequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CompassModuleMock.Request with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestCounter) < 1 {
		if m.RequestMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CompassModuleMock.Request")
		} else {
			m.t.Errorf("Expected call to CompassModuleMock.Request with params: %#v", *m.RequestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequest != nil && mm_atomic.LoadUint64(&m.afterRequestCounter) < 1 {
		m.t.Error("Expected call to CompassModuleMock.Request")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CompassModuleMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockRequestInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CompassModuleMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CompassModuleMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRequestDone()
}
