// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRealTimeReports(t *testing.T) {
	t.Parallel()

	query := RealTimeReports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRealTimeReportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRealTimeReportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RealTimeReports().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRealTimeReportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RealTimeReportSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRealTimeReportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RealTimeReportExists(ctx, tx, o.PublisherID, o.Time, o.Domain, o.Device, o.Country)
	if err != nil {
		t.Errorf("Unable to check if RealTimeReport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RealTimeReportExists to return true, but got false.")
	}
}

func testRealTimeReportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	realTimeReportFound, err := FindRealTimeReport(ctx, tx, o.PublisherID, o.Time, o.Domain, o.Device, o.Country)
	if err != nil {
		t.Error(err)
	}

	if realTimeReportFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRealTimeReportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RealTimeReports().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRealTimeReportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RealTimeReports().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRealTimeReportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	realTimeReportOne := &RealTimeReport{}
	realTimeReportTwo := &RealTimeReport{}
	if err = randomize.Struct(seed, realTimeReportOne, realTimeReportDBTypes, false, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}
	if err = randomize.Struct(seed, realTimeReportTwo, realTimeReportDBTypes, false, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = realTimeReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = realTimeReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RealTimeReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRealTimeReportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	realTimeReportOne := &RealTimeReport{}
	realTimeReportTwo := &RealTimeReport{}
	if err = randomize.Struct(seed, realTimeReportOne, realTimeReportDBTypes, false, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}
	if err = randomize.Struct(seed, realTimeReportTwo, realTimeReportDBTypes, false, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = realTimeReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = realTimeReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func realTimeReportBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func realTimeReportAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func realTimeReportAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func realTimeReportBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func realTimeReportAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func realTimeReportBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func realTimeReportAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func realTimeReportBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func realTimeReportAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RealTimeReport) error {
	*o = RealTimeReport{}
	return nil
}

func testRealTimeReportsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RealTimeReport{}
	o := &RealTimeReport{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RealTimeReport object: %s", err)
	}

	AddRealTimeReportHook(boil.BeforeInsertHook, realTimeReportBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	realTimeReportBeforeInsertHooks = []RealTimeReportHook{}

	AddRealTimeReportHook(boil.AfterInsertHook, realTimeReportAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	realTimeReportAfterInsertHooks = []RealTimeReportHook{}

	AddRealTimeReportHook(boil.AfterSelectHook, realTimeReportAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	realTimeReportAfterSelectHooks = []RealTimeReportHook{}

	AddRealTimeReportHook(boil.BeforeUpdateHook, realTimeReportBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	realTimeReportBeforeUpdateHooks = []RealTimeReportHook{}

	AddRealTimeReportHook(boil.AfterUpdateHook, realTimeReportAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	realTimeReportAfterUpdateHooks = []RealTimeReportHook{}

	AddRealTimeReportHook(boil.BeforeDeleteHook, realTimeReportBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	realTimeReportBeforeDeleteHooks = []RealTimeReportHook{}

	AddRealTimeReportHook(boil.AfterDeleteHook, realTimeReportAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	realTimeReportAfterDeleteHooks = []RealTimeReportHook{}

	AddRealTimeReportHook(boil.BeforeUpsertHook, realTimeReportBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	realTimeReportBeforeUpsertHooks = []RealTimeReportHook{}

	AddRealTimeReportHook(boil.AfterUpsertHook, realTimeReportAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	realTimeReportAfterUpsertHooks = []RealTimeReportHook{}
}

func testRealTimeReportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRealTimeReportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(realTimeReportColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRealTimeReportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRealTimeReportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RealTimeReportSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRealTimeReportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RealTimeReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	realTimeReportDBTypes = map[string]string{`Time`: `character varying`, `Publisher`: `character varying`, `PublisherID`: `character varying`, `Domain`: `character varying`, `BidRequests`: `double precision`, `Device`: `character varying`, `Country`: `character varying`, `Revenue`: `double precision`, `Cost`: `double precision`, `SoldImpressions`: `double precision`, `PublisherImpressions`: `double precision`, `PubFillRate`: `double precision`, `CPM`: `double precision`, `RPM`: `double precision`, `DPRPM`: `double precision`, `GP`: `double precision`, `GPP`: `double precision`, `ConsultantFee`: `double precision`, `TamFee`: `double precision`, `TechFee`: `double precision`, `DemandPartnerFee`: `double precision`, `DataFee`: `double precision`, `BidResponses`: `double precision`}
	_                     = bytes.MinRead
)

func testRealTimeReportsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(realTimeReportPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(realTimeReportAllColumns) == len(realTimeReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRealTimeReportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(realTimeReportAllColumns) == len(realTimeReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RealTimeReport{}
	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, realTimeReportDBTypes, true, realTimeReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(realTimeReportAllColumns, realTimeReportPrimaryKeyColumns) {
		fields = realTimeReportAllColumns
	} else {
		fields = strmangle.SetComplement(
			realTimeReportAllColumns,
			realTimeReportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RealTimeReportSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRealTimeReportsUpsert(t *testing.T) {
	t.Parallel()

	if len(realTimeReportAllColumns) == len(realTimeReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RealTimeReport{}
	if err = randomize.Struct(seed, &o, realTimeReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RealTimeReport: %s", err)
	}

	count, err := RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, realTimeReportDBTypes, false, realTimeReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RealTimeReport struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RealTimeReport: %s", err)
	}

	count, err = RealTimeReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
