// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserPlatformRole is an object representing the database table.
type UserPlatformRole struct {
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RoleID    string    `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userPlatformRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userPlatformRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserPlatformRoleColumns = struct {
	UserID    string
	RoleID    string
	CreatedAt string
}{
	UserID:    "user_id",
	RoleID:    "role_id",
	CreatedAt: "created_at",
}

var UserPlatformRoleTableColumns = struct {
	UserID    string
	RoleID    string
	CreatedAt string
}{
	UserID:    "user_platform_role.user_id",
	RoleID:    "user_platform_role.role_id",
	CreatedAt: "user_platform_role.created_at",
}

// Generated where

var UserPlatformRoleWhere = struct {
	UserID    whereHelperstring
	RoleID    whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	UserID:    whereHelperstring{field: "\"user_platform_role\".\"user_id\""},
	RoleID:    whereHelperstring{field: "\"user_platform_role\".\"role_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"user_platform_role\".\"created_at\""},
}

// UserPlatformRoleRels is where relationship names are stored.
var UserPlatformRoleRels = struct {
	User string
}{
	User: "User",
}

// userPlatformRoleR is where relationships are stored.
type userPlatformRoleR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userPlatformRoleR) NewStruct() *userPlatformRoleR {
	return &userPlatformRoleR{}
}

func (r *userPlatformRoleR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userPlatformRoleL is where Load methods for each relationship are stored.
type userPlatformRoleL struct{}

var (
	userPlatformRoleAllColumns            = []string{"user_id", "role_id", "created_at"}
	userPlatformRoleColumnsWithoutDefault = []string{"user_id", "role_id", "created_at"}
	userPlatformRoleColumnsWithDefault    = []string{}
	userPlatformRolePrimaryKeyColumns     = []string{"user_id", "role_id"}
	userPlatformRoleGeneratedColumns      = []string{}
)

type (
	// UserPlatformRoleSlice is an alias for a slice of pointers to UserPlatformRole.
	// This should almost always be used instead of []UserPlatformRole.
	UserPlatformRoleSlice []*UserPlatformRole
	// UserPlatformRoleHook is the signature for custom UserPlatformRole hook methods
	UserPlatformRoleHook func(context.Context, boil.ContextExecutor, *UserPlatformRole) error

	userPlatformRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userPlatformRoleType                 = reflect.TypeOf(&UserPlatformRole{})
	userPlatformRoleMapping              = queries.MakeStructMapping(userPlatformRoleType)
	userPlatformRolePrimaryKeyMapping, _ = queries.BindMapping(userPlatformRoleType, userPlatformRoleMapping, userPlatformRolePrimaryKeyColumns)
	userPlatformRoleInsertCacheMut       sync.RWMutex
	userPlatformRoleInsertCache          = make(map[string]insertCache)
	userPlatformRoleUpdateCacheMut       sync.RWMutex
	userPlatformRoleUpdateCache          = make(map[string]updateCache)
	userPlatformRoleUpsertCacheMut       sync.RWMutex
	userPlatformRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userPlatformRoleAfterSelectMu sync.Mutex
var userPlatformRoleAfterSelectHooks []UserPlatformRoleHook

var userPlatformRoleBeforeInsertMu sync.Mutex
var userPlatformRoleBeforeInsertHooks []UserPlatformRoleHook
var userPlatformRoleAfterInsertMu sync.Mutex
var userPlatformRoleAfterInsertHooks []UserPlatformRoleHook

var userPlatformRoleBeforeUpdateMu sync.Mutex
var userPlatformRoleBeforeUpdateHooks []UserPlatformRoleHook
var userPlatformRoleAfterUpdateMu sync.Mutex
var userPlatformRoleAfterUpdateHooks []UserPlatformRoleHook

var userPlatformRoleBeforeDeleteMu sync.Mutex
var userPlatformRoleBeforeDeleteHooks []UserPlatformRoleHook
var userPlatformRoleAfterDeleteMu sync.Mutex
var userPlatformRoleAfterDeleteHooks []UserPlatformRoleHook

var userPlatformRoleBeforeUpsertMu sync.Mutex
var userPlatformRoleBeforeUpsertHooks []UserPlatformRoleHook
var userPlatformRoleAfterUpsertMu sync.Mutex
var userPlatformRoleAfterUpsertHooks []UserPlatformRoleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserPlatformRole) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserPlatformRole) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserPlatformRole) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserPlatformRole) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserPlatformRole) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserPlatformRole) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserPlatformRole) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserPlatformRole) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserPlatformRole) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPlatformRoleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserPlatformRoleHook registers your hook function for all future operations.
func AddUserPlatformRoleHook(hookPoint boil.HookPoint, userPlatformRoleHook UserPlatformRoleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userPlatformRoleAfterSelectMu.Lock()
		userPlatformRoleAfterSelectHooks = append(userPlatformRoleAfterSelectHooks, userPlatformRoleHook)
		userPlatformRoleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userPlatformRoleBeforeInsertMu.Lock()
		userPlatformRoleBeforeInsertHooks = append(userPlatformRoleBeforeInsertHooks, userPlatformRoleHook)
		userPlatformRoleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userPlatformRoleAfterInsertMu.Lock()
		userPlatformRoleAfterInsertHooks = append(userPlatformRoleAfterInsertHooks, userPlatformRoleHook)
		userPlatformRoleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userPlatformRoleBeforeUpdateMu.Lock()
		userPlatformRoleBeforeUpdateHooks = append(userPlatformRoleBeforeUpdateHooks, userPlatformRoleHook)
		userPlatformRoleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userPlatformRoleAfterUpdateMu.Lock()
		userPlatformRoleAfterUpdateHooks = append(userPlatformRoleAfterUpdateHooks, userPlatformRoleHook)
		userPlatformRoleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userPlatformRoleBeforeDeleteMu.Lock()
		userPlatformRoleBeforeDeleteHooks = append(userPlatformRoleBeforeDeleteHooks, userPlatformRoleHook)
		userPlatformRoleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userPlatformRoleAfterDeleteMu.Lock()
		userPlatformRoleAfterDeleteHooks = append(userPlatformRoleAfterDeleteHooks, userPlatformRoleHook)
		userPlatformRoleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userPlatformRoleBeforeUpsertMu.Lock()
		userPlatformRoleBeforeUpsertHooks = append(userPlatformRoleBeforeUpsertHooks, userPlatformRoleHook)
		userPlatformRoleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userPlatformRoleAfterUpsertMu.Lock()
		userPlatformRoleAfterUpsertHooks = append(userPlatformRoleAfterUpsertHooks, userPlatformRoleHook)
		userPlatformRoleAfterUpsertMu.Unlock()
	}
}

// One returns a single userPlatformRole record from the query.
func (q userPlatformRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserPlatformRole, error) {
	o := &UserPlatformRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_platform_role")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserPlatformRole records from the query.
func (q userPlatformRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserPlatformRoleSlice, error) {
	var o []*UserPlatformRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserPlatformRole slice")
	}

	if len(userPlatformRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserPlatformRole records in the query.
func (q userPlatformRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_platform_role rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userPlatformRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_platform_role exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserPlatformRole) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPlatformRoleL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPlatformRole interface{}, mods queries.Applicator) error {
	var slice []*UserPlatformRole
	var object *UserPlatformRole

	if singular {
		var ok bool
		object, ok = maybeUserPlatformRole.(*UserPlatformRole)
		if !ok {
			object = new(UserPlatformRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserPlatformRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserPlatformRole))
			}
		}
	} else {
		s, ok := maybeUserPlatformRole.(*[]*UserPlatformRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserPlatformRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserPlatformRole))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userPlatformRoleR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPlatformRoleR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserPlatformRoles = append(foreign.R.UserPlatformRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserPlatformRoles = append(foreign.R.UserPlatformRoles, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the userPlatformRole to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserPlatformRoles.
func (o *UserPlatformRole) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_platform_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPlatformRolePrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.UserID, o.RoleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &userPlatformRoleR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserPlatformRoles: UserPlatformRoleSlice{o},
		}
	} else {
		related.R.UserPlatformRoles = append(related.R.UserPlatformRoles, o)
	}

	return nil
}

// UserPlatformRoles retrieves all the records using an executor.
func UserPlatformRoles(mods ...qm.QueryMod) userPlatformRoleQuery {
	mods = append(mods, qm.From("\"user_platform_role\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_platform_role\".*"})
	}

	return userPlatformRoleQuery{q}
}

// FindUserPlatformRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserPlatformRole(ctx context.Context, exec boil.ContextExecutor, userID string, roleID string, selectCols ...string) (*UserPlatformRole, error) {
	userPlatformRoleObj := &UserPlatformRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_platform_role\" where \"user_id\"=$1 AND \"role_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, roleID)

	err := q.Bind(ctx, exec, userPlatformRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_platform_role")
	}

	if err = userPlatformRoleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userPlatformRoleObj, err
	}

	return userPlatformRoleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserPlatformRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_platform_role provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPlatformRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userPlatformRoleInsertCacheMut.RLock()
	cache, cached := userPlatformRoleInsertCache[key]
	userPlatformRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userPlatformRoleAllColumns,
			userPlatformRoleColumnsWithDefault,
			userPlatformRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userPlatformRoleType, userPlatformRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userPlatformRoleType, userPlatformRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_platform_role\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_platform_role\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_platform_role")
	}

	if !cached {
		userPlatformRoleInsertCacheMut.Lock()
		userPlatformRoleInsertCache[key] = cache
		userPlatformRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserPlatformRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserPlatformRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userPlatformRoleUpdateCacheMut.RLock()
	cache, cached := userPlatformRoleUpdateCache[key]
	userPlatformRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userPlatformRoleAllColumns,
			userPlatformRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_platform_role, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_platform_role\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPlatformRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userPlatformRoleType, userPlatformRoleMapping, append(wl, userPlatformRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_platform_role row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_platform_role")
	}

	if !cached {
		userPlatformRoleUpdateCacheMut.Lock()
		userPlatformRoleUpdateCache[key] = cache
		userPlatformRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userPlatformRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_platform_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_platform_role")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserPlatformRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPlatformRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_platform_role\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPlatformRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userPlatformRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userPlatformRole")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserPlatformRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_platform_role provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPlatformRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userPlatformRoleUpsertCacheMut.RLock()
	cache, cached := userPlatformRoleUpsertCache[key]
	userPlatformRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userPlatformRoleAllColumns,
			userPlatformRoleColumnsWithDefault,
			userPlatformRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userPlatformRoleAllColumns,
			userPlatformRolePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_platform_role, could not build update column list")
		}

		ret := strmangle.SetComplement(userPlatformRoleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userPlatformRolePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_platform_role, could not build conflict column list")
			}

			conflict = make([]string, len(userPlatformRolePrimaryKeyColumns))
			copy(conflict, userPlatformRolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_platform_role\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userPlatformRoleType, userPlatformRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userPlatformRoleType, userPlatformRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_platform_role")
	}

	if !cached {
		userPlatformRoleUpsertCacheMut.Lock()
		userPlatformRoleUpsertCache[key] = cache
		userPlatformRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserPlatformRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserPlatformRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPlatformRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPlatformRolePrimaryKeyMapping)
	sql := "DELETE FROM \"user_platform_role\" WHERE \"user_id\"=$1 AND \"role_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_platform_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_platform_role")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userPlatformRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userPlatformRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_platform_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_platform_role")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserPlatformRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userPlatformRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPlatformRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_platform_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPlatformRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userPlatformRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_platform_role")
	}

	if len(userPlatformRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserPlatformRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserPlatformRole(ctx, exec, o.UserID, o.RoleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPlatformRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserPlatformRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPlatformRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_platform_role\".* FROM \"user_platform_role\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPlatformRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserPlatformRoleSlice")
	}

	*o = slice

	return nil
}

// UserPlatformRoleExists checks if the UserPlatformRole row exists.
func UserPlatformRoleExists(ctx context.Context, exec boil.ContextExecutor, userID string, roleID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_platform_role\" where \"user_id\"=$1 AND \"role_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, roleID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, roleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_platform_role exists")
	}

	return exists, nil
}

// Exists checks if the UserPlatformRole row exists.
func (o *UserPlatformRole) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserPlatformRoleExists(ctx, exec, o.UserID, o.RoleID)
}
