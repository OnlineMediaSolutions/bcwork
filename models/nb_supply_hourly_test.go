// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNBSupplyHourlies(t *testing.T) {
	t.Parallel()

	query := NBSupplyHourlies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNBSupplyHourliesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNBSupplyHourliesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NBSupplyHourlies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNBSupplyHourliesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NBSupplyHourlySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNBSupplyHourliesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NBSupplyHourlyExists(ctx, tx, o.Time, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType, o.PlacementType, o.Size, o.RequestType, o.PaymentType, o.Datacenter)
	if err != nil {
		t.Errorf("Unable to check if NBSupplyHourly exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NBSupplyHourlyExists to return true, but got false.")
	}
}

func testNBSupplyHourliesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	nbSupplyHourlyFound, err := FindNBSupplyHourly(ctx, tx, o.Time, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType, o.PlacementType, o.Size, o.RequestType, o.PaymentType, o.Datacenter)
	if err != nil {
		t.Error(err)
	}

	if nbSupplyHourlyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNBSupplyHourliesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NBSupplyHourlies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNBSupplyHourliesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NBSupplyHourlies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNBSupplyHourliesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nbSupplyHourlyOne := &NBSupplyHourly{}
	nbSupplyHourlyTwo := &NBSupplyHourly{}
	if err = randomize.Struct(seed, nbSupplyHourlyOne, nbSupplyHourlyDBTypes, false, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}
	if err = randomize.Struct(seed, nbSupplyHourlyTwo, nbSupplyHourlyDBTypes, false, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nbSupplyHourlyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nbSupplyHourlyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NBSupplyHourlies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNBSupplyHourliesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nbSupplyHourlyOne := &NBSupplyHourly{}
	nbSupplyHourlyTwo := &NBSupplyHourly{}
	if err = randomize.Struct(seed, nbSupplyHourlyOne, nbSupplyHourlyDBTypes, false, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}
	if err = randomize.Struct(seed, nbSupplyHourlyTwo, nbSupplyHourlyDBTypes, false, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = nbSupplyHourlyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = nbSupplyHourlyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func nbSupplyHourlyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func nbSupplyHourlyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func nbSupplyHourlyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func nbSupplyHourlyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func nbSupplyHourlyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func nbSupplyHourlyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func nbSupplyHourlyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func nbSupplyHourlyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func nbSupplyHourlyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NBSupplyHourly) error {
	*o = NBSupplyHourly{}
	return nil
}

func testNBSupplyHourliesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NBSupplyHourly{}
	o := &NBSupplyHourly{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly object: %s", err)
	}

	AddNBSupplyHourlyHook(boil.BeforeInsertHook, nbSupplyHourlyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyBeforeInsertHooks = []NBSupplyHourlyHook{}

	AddNBSupplyHourlyHook(boil.AfterInsertHook, nbSupplyHourlyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyAfterInsertHooks = []NBSupplyHourlyHook{}

	AddNBSupplyHourlyHook(boil.AfterSelectHook, nbSupplyHourlyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyAfterSelectHooks = []NBSupplyHourlyHook{}

	AddNBSupplyHourlyHook(boil.BeforeUpdateHook, nbSupplyHourlyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyBeforeUpdateHooks = []NBSupplyHourlyHook{}

	AddNBSupplyHourlyHook(boil.AfterUpdateHook, nbSupplyHourlyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyAfterUpdateHooks = []NBSupplyHourlyHook{}

	AddNBSupplyHourlyHook(boil.BeforeDeleteHook, nbSupplyHourlyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyBeforeDeleteHooks = []NBSupplyHourlyHook{}

	AddNBSupplyHourlyHook(boil.AfterDeleteHook, nbSupplyHourlyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyAfterDeleteHooks = []NBSupplyHourlyHook{}

	AddNBSupplyHourlyHook(boil.BeforeUpsertHook, nbSupplyHourlyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyBeforeUpsertHooks = []NBSupplyHourlyHook{}

	AddNBSupplyHourlyHook(boil.AfterUpsertHook, nbSupplyHourlyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nbSupplyHourlyAfterUpsertHooks = []NBSupplyHourlyHook{}
}

func testNBSupplyHourliesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNBSupplyHourliesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(nbSupplyHourlyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNBSupplyHourliesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNBSupplyHourliesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NBSupplyHourlySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNBSupplyHourliesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NBSupplyHourlies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nbSupplyHourlyDBTypes = map[string]string{`Time`: `timestamp without time zone`, `PublisherID`: `character varying`, `Domain`: `character varying`, `Os`: `character varying`, `Country`: `character varying`, `DeviceType`: `character varying`, `PlacementType`: `character varying`, `Size`: `character varying`, `RequestType`: `character varying`, `PaymentType`: `character varying`, `Datacenter`: `character varying`, `BidRequests`: `bigint`, `BidResponses`: `bigint`, `SoldImpressions`: `bigint`, `PublisherImpressions`: `bigint`, `Cost`: `double precision`, `Revenue`: `double precision`, `AvgBidPrice`: `double precision`, `MissedOpportunities`: `bigint`, `DemandPartnerFee`: `double precision`, `DataImpressions`: `bigint`, `DataFee`: `double precision`}
	_                     = bytes.MinRead
)

func testNBSupplyHourliesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(nbSupplyHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(nbSupplyHourlyAllColumns) == len(nbSupplyHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNBSupplyHourliesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nbSupplyHourlyAllColumns) == len(nbSupplyHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NBSupplyHourly{}
	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, nbSupplyHourlyDBTypes, true, nbSupplyHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nbSupplyHourlyAllColumns, nbSupplyHourlyPrimaryKeyColumns) {
		fields = nbSupplyHourlyAllColumns
	} else {
		fields = strmangle.SetComplement(
			nbSupplyHourlyAllColumns,
			nbSupplyHourlyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NBSupplyHourlySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNBSupplyHourliesUpsert(t *testing.T) {
	t.Parallel()

	if len(nbSupplyHourlyAllColumns) == len(nbSupplyHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NBSupplyHourly{}
	if err = randomize.Struct(seed, &o, nbSupplyHourlyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NBSupplyHourly: %s", err)
	}

	count, err := NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, nbSupplyHourlyDBTypes, false, nbSupplyHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NBSupplyHourly struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NBSupplyHourly: %s", err)
	}

	count, err = NBSupplyHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
