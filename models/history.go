// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// History is an object representing the database table.
type History struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID          int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Subject         string      `boil:"subject" json:"subject" toml:"subject" yaml:"subject"`
	Item            string      `boil:"item" json:"item" toml:"item" yaml:"item"`
	PublisherID     null.String `boil:"publisher_id" json:"publisher_id,omitempty" toml:"publisher_id" yaml:"publisher_id,omitempty"`
	Domain          null.String `boil:"domain" json:"domain,omitempty" toml:"domain" yaml:"domain,omitempty"`
	EntityID        null.String `boil:"entity_id" json:"entity_id,omitempty" toml:"entity_id" yaml:"entity_id,omitempty"`
	Action          string      `boil:"action" json:"action" toml:"action" yaml:"action"`
	OldValue        null.JSON   `boil:"old_value" json:"old_value,omitempty" toml:"old_value" yaml:"old_value,omitempty"`
	NewValue        null.JSON   `boil:"new_value" json:"new_value,omitempty" toml:"new_value" yaml:"new_value,omitempty"`
	Changes         null.JSON   `boil:"changes" json:"changes,omitempty" toml:"changes" yaml:"changes,omitempty"`
	Date            time.Time   `boil:"date" json:"date" toml:"date" yaml:"date"`
	DemandPartnerID null.String `boil:"demand_partner_id" json:"demand_partner_id,omitempty" toml:"demand_partner_id" yaml:"demand_partner_id,omitempty"`

	R *historyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L historyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HistoryColumns = struct {
	ID              string
	UserID          string
	Subject         string
	Item            string
	PublisherID     string
	Domain          string
	EntityID        string
	Action          string
	OldValue        string
	NewValue        string
	Changes         string
	Date            string
	DemandPartnerID string
}{
	ID:              "id",
	UserID:          "user_id",
	Subject:         "subject",
	Item:            "item",
	PublisherID:     "publisher_id",
	Domain:          "domain",
	EntityID:        "entity_id",
	Action:          "action",
	OldValue:        "old_value",
	NewValue:        "new_value",
	Changes:         "changes",
	Date:            "date",
	DemandPartnerID: "demand_partner_id",
}

var HistoryTableColumns = struct {
	ID              string
	UserID          string
	Subject         string
	Item            string
	PublisherID     string
	Domain          string
	EntityID        string
	Action          string
	OldValue        string
	NewValue        string
	Changes         string
	Date            string
	DemandPartnerID string
}{
	ID:              "history.id",
	UserID:          "history.user_id",
	Subject:         "history.subject",
	Item:            "history.item",
	PublisherID:     "history.publisher_id",
	Domain:          "history.domain",
	EntityID:        "history.entity_id",
	Action:          "history.action",
	OldValue:        "history.old_value",
	NewValue:        "history.new_value",
	Changes:         "history.changes",
	Date:            "history.date",
	DemandPartnerID: "history.demand_partner_id",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var HistoryWhere = struct {
	ID              whereHelperint
	UserID          whereHelperint
	Subject         whereHelperstring
	Item            whereHelperstring
	PublisherID     whereHelpernull_String
	Domain          whereHelpernull_String
	EntityID        whereHelpernull_String
	Action          whereHelperstring
	OldValue        whereHelpernull_JSON
	NewValue        whereHelpernull_JSON
	Changes         whereHelpernull_JSON
	Date            whereHelpertime_Time
	DemandPartnerID whereHelpernull_String
}{
	ID:              whereHelperint{field: "\"history\".\"id\""},
	UserID:          whereHelperint{field: "\"history\".\"user_id\""},
	Subject:         whereHelperstring{field: "\"history\".\"subject\""},
	Item:            whereHelperstring{field: "\"history\".\"item\""},
	PublisherID:     whereHelpernull_String{field: "\"history\".\"publisher_id\""},
	Domain:          whereHelpernull_String{field: "\"history\".\"domain\""},
	EntityID:        whereHelpernull_String{field: "\"history\".\"entity_id\""},
	Action:          whereHelperstring{field: "\"history\".\"action\""},
	OldValue:        whereHelpernull_JSON{field: "\"history\".\"old_value\""},
	NewValue:        whereHelpernull_JSON{field: "\"history\".\"new_value\""},
	Changes:         whereHelpernull_JSON{field: "\"history\".\"changes\""},
	Date:            whereHelpertime_Time{field: "\"history\".\"date\""},
	DemandPartnerID: whereHelpernull_String{field: "\"history\".\"demand_partner_id\""},
}

// HistoryRels is where relationship names are stored.
var HistoryRels = struct {
}{}

// historyR is where relationships are stored.
type historyR struct {
}

// NewStruct creates a new relationship struct
func (*historyR) NewStruct() *historyR {
	return &historyR{}
}

// historyL is where Load methods for each relationship are stored.
type historyL struct{}

var (
	historyAllColumns            = []string{"id", "user_id", "subject", "item", "publisher_id", "domain", "entity_id", "action", "old_value", "new_value", "changes", "date", "demand_partner_id"}
	historyColumnsWithoutDefault = []string{"user_id", "subject", "item", "action", "date"}
	historyColumnsWithDefault    = []string{"id", "publisher_id", "domain", "entity_id", "old_value", "new_value", "changes", "demand_partner_id"}
	historyPrimaryKeyColumns     = []string{"id"}
	historyGeneratedColumns      = []string{}
)

type (
	// HistorySlice is an alias for a slice of pointers to History.
	// This should almost always be used instead of []History.
	HistorySlice []*History
	// HistoryHook is the signature for custom History hook methods
	HistoryHook func(context.Context, boil.ContextExecutor, *History) error

	historyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	historyType                 = reflect.TypeOf(&History{})
	historyMapping              = queries.MakeStructMapping(historyType)
	historyPrimaryKeyMapping, _ = queries.BindMapping(historyType, historyMapping, historyPrimaryKeyColumns)
	historyInsertCacheMut       sync.RWMutex
	historyInsertCache          = make(map[string]insertCache)
	historyUpdateCacheMut       sync.RWMutex
	historyUpdateCache          = make(map[string]updateCache)
	historyUpsertCacheMut       sync.RWMutex
	historyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var historyAfterSelectMu sync.Mutex
var historyAfterSelectHooks []HistoryHook

var historyBeforeInsertMu sync.Mutex
var historyBeforeInsertHooks []HistoryHook
var historyAfterInsertMu sync.Mutex
var historyAfterInsertHooks []HistoryHook

var historyBeforeUpdateMu sync.Mutex
var historyBeforeUpdateHooks []HistoryHook
var historyAfterUpdateMu sync.Mutex
var historyAfterUpdateHooks []HistoryHook

var historyBeforeDeleteMu sync.Mutex
var historyBeforeDeleteHooks []HistoryHook
var historyAfterDeleteMu sync.Mutex
var historyAfterDeleteHooks []HistoryHook

var historyBeforeUpsertMu sync.Mutex
var historyBeforeUpsertHooks []HistoryHook
var historyAfterUpsertMu sync.Mutex
var historyAfterUpsertHooks []HistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *History) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *History) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *History) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *History) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *History) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *History) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *History) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *History) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *History) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range historyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHistoryHook registers your hook function for all future operations.
func AddHistoryHook(hookPoint boil.HookPoint, historyHook HistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		historyAfterSelectMu.Lock()
		historyAfterSelectHooks = append(historyAfterSelectHooks, historyHook)
		historyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		historyBeforeInsertMu.Lock()
		historyBeforeInsertHooks = append(historyBeforeInsertHooks, historyHook)
		historyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		historyAfterInsertMu.Lock()
		historyAfterInsertHooks = append(historyAfterInsertHooks, historyHook)
		historyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		historyBeforeUpdateMu.Lock()
		historyBeforeUpdateHooks = append(historyBeforeUpdateHooks, historyHook)
		historyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		historyAfterUpdateMu.Lock()
		historyAfterUpdateHooks = append(historyAfterUpdateHooks, historyHook)
		historyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		historyBeforeDeleteMu.Lock()
		historyBeforeDeleteHooks = append(historyBeforeDeleteHooks, historyHook)
		historyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		historyAfterDeleteMu.Lock()
		historyAfterDeleteHooks = append(historyAfterDeleteHooks, historyHook)
		historyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		historyBeforeUpsertMu.Lock()
		historyBeforeUpsertHooks = append(historyBeforeUpsertHooks, historyHook)
		historyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		historyAfterUpsertMu.Lock()
		historyAfterUpsertHooks = append(historyAfterUpsertHooks, historyHook)
		historyAfterUpsertMu.Unlock()
	}
}

// One returns a single history record from the query.
func (q historyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*History, error) {
	o := &History{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all History records from the query.
func (q historyQuery) All(ctx context.Context, exec boil.ContextExecutor) (HistorySlice, error) {
	var o []*History

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to History slice")
	}

	if len(historyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all History records in the query.
func (q historyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q historyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if history exists")
	}

	return count > 0, nil
}

// Histories retrieves all the records using an executor.
func Histories(mods ...qm.QueryMod) historyQuery {
	mods = append(mods, qm.From("\"history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"history\".*"})
	}

	return historyQuery{q}
}

// FindHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHistory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*History, error) {
	historyObj := &History{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, historyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from history")
	}

	if err = historyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return historyObj, err
	}

	return historyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *History) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(historyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	historyInsertCacheMut.RLock()
	cache, cached := historyInsertCache[key]
	historyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			historyAllColumns,
			historyColumnsWithDefault,
			historyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(historyType, historyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(historyType, historyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into history")
	}

	if !cached {
		historyInsertCacheMut.Lock()
		historyInsertCache[key] = cache
		historyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the History.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *History) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	historyUpdateCacheMut.RLock()
	cache, cached := historyUpdateCache[key]
	historyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			historyAllColumns,
			historyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, historyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(historyType, historyMapping, append(wl, historyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for history")
	}

	if !cached {
		historyUpdateCacheMut.Lock()
		historyUpdateCache[key] = cache
		historyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q historyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, historyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in history slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all history")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *History) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(historyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	historyUpsertCacheMut.RLock()
	cache, cached := historyUpsertCache[key]
	historyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			historyAllColumns,
			historyColumnsWithDefault,
			historyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			historyAllColumns,
			historyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert history, could not build update column list")
		}

		ret := strmangle.SetComplement(historyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(historyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert history, could not build conflict column list")
			}

			conflict = make([]string, len(historyPrimaryKeyColumns))
			copy(conflict, historyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"history\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(historyType, historyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(historyType, historyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert history")
	}

	if !cached {
		historyUpsertCacheMut.Lock()
		historyUpsertCache[key] = cache
		historyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single History record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *History) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no History provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), historyPrimaryKeyMapping)
	sql := "DELETE FROM \"history\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q historyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no historyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(historyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, historyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from history slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for history")
	}

	if len(historyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *History) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"history\".* FROM \"history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, historyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HistorySlice")
	}

	*o = slice

	return nil
}

// HistoryExists checks if the History row exists.
func HistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"history\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if history exists")
	}

	return exists, nil
}

// Exists checks if the History row exists.
func (o *History) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HistoryExists(ctx, exec, o.ID)
}
