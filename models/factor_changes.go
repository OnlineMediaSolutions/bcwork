// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FactorChange is an object representing the database table.
type FactorChange struct {
	Time           time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	EvalTime       time.Time `boil:"eval_time" json:"eval_time" toml:"eval_time" yaml:"eval_time"`
	Pubimps        int       `boil:"pubimps" json:"pubimps" toml:"pubimps" yaml:"pubimps"`
	Soldimps       int       `boil:"soldimps" json:"soldimps" toml:"soldimps" yaml:"soldimps"`
	Cost           float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Revenue        float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	GP             float64   `boil:"gp" json:"gp" toml:"gp" yaml:"gp"`
	GPP            float64   `boil:"gpp" json:"gpp" toml:"gpp" yaml:"gpp"`
	Publisher      string    `boil:"publisher" json:"publisher" toml:"publisher" yaml:"publisher"`
	Domain         string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Country        string    `boil:"country" json:"country" toml:"country" yaml:"country"`
	Device         string    `boil:"device" json:"device" toml:"device" yaml:"device"`
	OldFactor      float64   `boil:"old_factor" json:"old_factor" toml:"old_factor" yaml:"old_factor"`
	NewFactor      float64   `boil:"new_factor" json:"new_factor" toml:"new_factor" yaml:"new_factor"`
	ResponseStatus int       `boil:"response_status" json:"response_status" toml:"response_status" yaml:"response_status"`
	Increase       float64   `boil:"increase" json:"increase" toml:"increase" yaml:"increase"`

	R *factorChangeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L factorChangeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactorChangeColumns = struct {
	Time           string
	EvalTime       string
	Pubimps        string
	Soldimps       string
	Cost           string
	Revenue        string
	GP             string
	GPP            string
	Publisher      string
	Domain         string
	Country        string
	Device         string
	OldFactor      string
	NewFactor      string
	ResponseStatus string
	Increase       string
}{
	Time:           "time",
	EvalTime:       "eval_time",
	Pubimps:        "pubimps",
	Soldimps:       "soldimps",
	Cost:           "cost",
	Revenue:        "revenue",
	GP:             "gp",
	GPP:            "gpp",
	Publisher:      "publisher",
	Domain:         "domain",
	Country:        "country",
	Device:         "device",
	OldFactor:      "old_factor",
	NewFactor:      "new_factor",
	ResponseStatus: "response_status",
	Increase:       "increase",
}

var FactorChangeTableColumns = struct {
	Time           string
	EvalTime       string
	Pubimps        string
	Soldimps       string
	Cost           string
	Revenue        string
	GP             string
	GPP            string
	Publisher      string
	Domain         string
	Country        string
	Device         string
	OldFactor      string
	NewFactor      string
	ResponseStatus string
	Increase       string
}{
	Time:           "factor_changes.time",
	EvalTime:       "factor_changes.eval_time",
	Pubimps:        "factor_changes.pubimps",
	Soldimps:       "factor_changes.soldimps",
	Cost:           "factor_changes.cost",
	Revenue:        "factor_changes.revenue",
	GP:             "factor_changes.gp",
	GPP:            "factor_changes.gpp",
	Publisher:      "factor_changes.publisher",
	Domain:         "factor_changes.domain",
	Country:        "factor_changes.country",
	Device:         "factor_changes.device",
	OldFactor:      "factor_changes.old_factor",
	NewFactor:      "factor_changes.new_factor",
	ResponseStatus: "factor_changes.response_status",
	Increase:       "factor_changes.increase",
}

// Generated where

var FactorChangeWhere = struct {
	Time           whereHelpertime_Time
	EvalTime       whereHelpertime_Time
	Pubimps        whereHelperint
	Soldimps       whereHelperint
	Cost           whereHelperfloat64
	Revenue        whereHelperfloat64
	GP             whereHelperfloat64
	GPP            whereHelperfloat64
	Publisher      whereHelperstring
	Domain         whereHelperstring
	Country        whereHelperstring
	Device         whereHelperstring
	OldFactor      whereHelperfloat64
	NewFactor      whereHelperfloat64
	ResponseStatus whereHelperint
	Increase       whereHelperfloat64
}{
	Time:           whereHelpertime_Time{field: "\"factor_changes\".\"time\""},
	EvalTime:       whereHelpertime_Time{field: "\"factor_changes\".\"eval_time\""},
	Pubimps:        whereHelperint{field: "\"factor_changes\".\"pubimps\""},
	Soldimps:       whereHelperint{field: "\"factor_changes\".\"soldimps\""},
	Cost:           whereHelperfloat64{field: "\"factor_changes\".\"cost\""},
	Revenue:        whereHelperfloat64{field: "\"factor_changes\".\"revenue\""},
	GP:             whereHelperfloat64{field: "\"factor_changes\".\"gp\""},
	GPP:            whereHelperfloat64{field: "\"factor_changes\".\"gpp\""},
	Publisher:      whereHelperstring{field: "\"factor_changes\".\"publisher\""},
	Domain:         whereHelperstring{field: "\"factor_changes\".\"domain\""},
	Country:        whereHelperstring{field: "\"factor_changes\".\"country\""},
	Device:         whereHelperstring{field: "\"factor_changes\".\"device\""},
	OldFactor:      whereHelperfloat64{field: "\"factor_changes\".\"old_factor\""},
	NewFactor:      whereHelperfloat64{field: "\"factor_changes\".\"new_factor\""},
	ResponseStatus: whereHelperint{field: "\"factor_changes\".\"response_status\""},
	Increase:       whereHelperfloat64{field: "\"factor_changes\".\"increase\""},
}

// FactorChangeRels is where relationship names are stored.
var FactorChangeRels = struct {
}{}

// factorChangeR is where relationships are stored.
type factorChangeR struct {
}

// NewStruct creates a new relationship struct
func (*factorChangeR) NewStruct() *factorChangeR {
	return &factorChangeR{}
}

// factorChangeL is where Load methods for each relationship are stored.
type factorChangeL struct{}

var (
	factorChangeAllColumns            = []string{"time", "eval_time", "pubimps", "soldimps", "cost", "revenue", "gp", "gpp", "publisher", "domain", "country", "device", "old_factor", "new_factor", "response_status", "increase"}
	factorChangeColumnsWithoutDefault = []string{"time", "eval_time", "pubimps", "soldimps", "cost", "revenue", "gp", "gpp", "publisher", "domain", "country", "device", "old_factor", "new_factor", "response_status", "increase"}
	factorChangeColumnsWithDefault    = []string{}
	factorChangePrimaryKeyColumns     = []string{"publisher", "domain", "country", "device", "time"}
	factorChangeGeneratedColumns      = []string{}
)

type (
	// FactorChangeSlice is an alias for a slice of pointers to FactorChange.
	// This should almost always be used instead of []FactorChange.
	FactorChangeSlice []*FactorChange
	// FactorChangeHook is the signature for custom FactorChange hook methods
	FactorChangeHook func(context.Context, boil.ContextExecutor, *FactorChange) error

	factorChangeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factorChangeType                 = reflect.TypeOf(&FactorChange{})
	factorChangeMapping              = queries.MakeStructMapping(factorChangeType)
	factorChangePrimaryKeyMapping, _ = queries.BindMapping(factorChangeType, factorChangeMapping, factorChangePrimaryKeyColumns)
	factorChangeInsertCacheMut       sync.RWMutex
	factorChangeInsertCache          = make(map[string]insertCache)
	factorChangeUpdateCacheMut       sync.RWMutex
	factorChangeUpdateCache          = make(map[string]updateCache)
	factorChangeUpsertCacheMut       sync.RWMutex
	factorChangeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var factorChangeAfterSelectMu sync.Mutex
var factorChangeAfterSelectHooks []FactorChangeHook

var factorChangeBeforeInsertMu sync.Mutex
var factorChangeBeforeInsertHooks []FactorChangeHook
var factorChangeAfterInsertMu sync.Mutex
var factorChangeAfterInsertHooks []FactorChangeHook

var factorChangeBeforeUpdateMu sync.Mutex
var factorChangeBeforeUpdateHooks []FactorChangeHook
var factorChangeAfterUpdateMu sync.Mutex
var factorChangeAfterUpdateHooks []FactorChangeHook

var factorChangeBeforeDeleteMu sync.Mutex
var factorChangeBeforeDeleteHooks []FactorChangeHook
var factorChangeAfterDeleteMu sync.Mutex
var factorChangeAfterDeleteHooks []FactorChangeHook

var factorChangeBeforeUpsertMu sync.Mutex
var factorChangeBeforeUpsertHooks []FactorChangeHook
var factorChangeAfterUpsertMu sync.Mutex
var factorChangeAfterUpsertHooks []FactorChangeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FactorChange) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FactorChange) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FactorChange) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FactorChange) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FactorChange) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FactorChange) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FactorChange) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FactorChange) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FactorChange) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range factorChangeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactorChangeHook registers your hook function for all future operations.
func AddFactorChangeHook(hookPoint boil.HookPoint, factorChangeHook FactorChangeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		factorChangeAfterSelectMu.Lock()
		factorChangeAfterSelectHooks = append(factorChangeAfterSelectHooks, factorChangeHook)
		factorChangeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		factorChangeBeforeInsertMu.Lock()
		factorChangeBeforeInsertHooks = append(factorChangeBeforeInsertHooks, factorChangeHook)
		factorChangeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		factorChangeAfterInsertMu.Lock()
		factorChangeAfterInsertHooks = append(factorChangeAfterInsertHooks, factorChangeHook)
		factorChangeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		factorChangeBeforeUpdateMu.Lock()
		factorChangeBeforeUpdateHooks = append(factorChangeBeforeUpdateHooks, factorChangeHook)
		factorChangeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		factorChangeAfterUpdateMu.Lock()
		factorChangeAfterUpdateHooks = append(factorChangeAfterUpdateHooks, factorChangeHook)
		factorChangeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		factorChangeBeforeDeleteMu.Lock()
		factorChangeBeforeDeleteHooks = append(factorChangeBeforeDeleteHooks, factorChangeHook)
		factorChangeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		factorChangeAfterDeleteMu.Lock()
		factorChangeAfterDeleteHooks = append(factorChangeAfterDeleteHooks, factorChangeHook)
		factorChangeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		factorChangeBeforeUpsertMu.Lock()
		factorChangeBeforeUpsertHooks = append(factorChangeBeforeUpsertHooks, factorChangeHook)
		factorChangeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		factorChangeAfterUpsertMu.Lock()
		factorChangeAfterUpsertHooks = append(factorChangeAfterUpsertHooks, factorChangeHook)
		factorChangeAfterUpsertMu.Unlock()
	}
}

// One returns a single factorChange record from the query.
func (q factorChangeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FactorChange, error) {
	o := &FactorChange{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for factor_changes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FactorChange records from the query.
func (q factorChangeQuery) All(ctx context.Context, exec boil.ContextExecutor) (FactorChangeSlice, error) {
	var o []*FactorChange

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FactorChange slice")
	}

	if len(factorChangeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FactorChange records in the query.
func (q factorChangeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count factor_changes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q factorChangeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if factor_changes exists")
	}

	return count > 0, nil
}

// FactorChanges retrieves all the records using an executor.
func FactorChanges(mods ...qm.QueryMod) factorChangeQuery {
	mods = append(mods, qm.From("\"factor_changes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"factor_changes\".*"})
	}

	return factorChangeQuery{q}
}

// FindFactorChange retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFactorChange(ctx context.Context, exec boil.ContextExecutor, publisher string, domain string, country string, device string, time time.Time, selectCols ...string) (*FactorChange, error) {
	factorChangeObj := &FactorChange{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"factor_changes\" where \"publisher\"=$1 AND \"domain\"=$2 AND \"country\"=$3 AND \"device\"=$4 AND \"time\"=$5", sel,
	)

	q := queries.Raw(query, publisher, domain, country, device, time)

	err := q.Bind(ctx, exec, factorChangeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from factor_changes")
	}

	if err = factorChangeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return factorChangeObj, err
	}

	return factorChangeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FactorChange) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no factor_changes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factorChangeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factorChangeInsertCacheMut.RLock()
	cache, cached := factorChangeInsertCache[key]
	factorChangeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factorChangeAllColumns,
			factorChangeColumnsWithDefault,
			factorChangeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factorChangeType, factorChangeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factorChangeType, factorChangeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"factor_changes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"factor_changes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into factor_changes")
	}

	if !cached {
		factorChangeInsertCacheMut.Lock()
		factorChangeInsertCache[key] = cache
		factorChangeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FactorChange.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FactorChange) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factorChangeUpdateCacheMut.RLock()
	cache, cached := factorChangeUpdateCache[key]
	factorChangeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factorChangeAllColumns,
			factorChangePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update factor_changes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"factor_changes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, factorChangePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factorChangeType, factorChangeMapping, append(wl, factorChangePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update factor_changes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for factor_changes")
	}

	if !cached {
		factorChangeUpdateCacheMut.Lock()
		factorChangeUpdateCache[key] = cache
		factorChangeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q factorChangeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for factor_changes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for factor_changes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactorChangeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"factor_changes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, factorChangePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in factorChange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all factorChange")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FactorChange) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no factor_changes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factorChangeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factorChangeUpsertCacheMut.RLock()
	cache, cached := factorChangeUpsertCache[key]
	factorChangeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			factorChangeAllColumns,
			factorChangeColumnsWithDefault,
			factorChangeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			factorChangeAllColumns,
			factorChangePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert factor_changes, could not build update column list")
		}

		ret := strmangle.SetComplement(factorChangeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(factorChangePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert factor_changes, could not build conflict column list")
			}

			conflict = make([]string, len(factorChangePrimaryKeyColumns))
			copy(conflict, factorChangePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"factor_changes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(factorChangeType, factorChangeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factorChangeType, factorChangeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert factor_changes")
	}

	if !cached {
		factorChangeUpsertCacheMut.Lock()
		factorChangeUpsertCache[key] = cache
		factorChangeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FactorChange record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FactorChange) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FactorChange provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factorChangePrimaryKeyMapping)
	sql := "DELETE FROM \"factor_changes\" WHERE \"publisher\"=$1 AND \"domain\"=$2 AND \"country\"=$3 AND \"device\"=$4 AND \"time\"=$5"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from factor_changes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for factor_changes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q factorChangeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no factorChangeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from factor_changes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for factor_changes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactorChangeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(factorChangeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"factor_changes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factorChangePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from factorChange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for factor_changes")
	}

	if len(factorChangeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FactorChange) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFactorChange(ctx, exec, o.Publisher, o.Domain, o.Country, o.Device, o.Time)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactorChangeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactorChangeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factorChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"factor_changes\".* FROM \"factor_changes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factorChangePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FactorChangeSlice")
	}

	*o = slice

	return nil
}

// FactorChangeExists checks if the FactorChange row exists.
func FactorChangeExists(ctx context.Context, exec boil.ContextExecutor, publisher string, domain string, country string, device string, time time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"factor_changes\" where \"publisher\"=$1 AND \"domain\"=$2 AND \"country\"=$3 AND \"device\"=$4 AND \"time\"=$5 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, publisher, domain, country, device, time)
	}
	row := exec.QueryRowContext(ctx, sql, publisher, domain, country, device, time)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if factor_changes exists")
	}

	return exists, nil
}

// Exists checks if the FactorChange row exists.
func (o *FactorChange) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FactorChangeExists(ctx, exec, o.Publisher, o.Domain, o.Country, o.Device, o.Time)
}
