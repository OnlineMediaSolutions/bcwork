// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RealTimeReport is an object representing the database table.
type RealTimeReport struct {
	Time                 string  `boil:"time" json:"time" toml:"time" yaml:"time"`
	Publisher            string  `boil:"publisher" json:"publisher" toml:"publisher" yaml:"publisher"`
	PublisherID          string  `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain               string  `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	BidRequests          float64 `boil:"bid_requests" json:"bid_requests" toml:"bid_requests" yaml:"bid_requests"`
	Device               string  `boil:"device" json:"device" toml:"device" yaml:"device"`
	Country              string  `boil:"country" json:"country" toml:"country" yaml:"country"`
	Revenue              float64 `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	Cost                 float64 `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	SoldImpressions      float64 `boil:"sold_impressions" json:"sold_impressions" toml:"sold_impressions" yaml:"sold_impressions"`
	PublisherImpressions float64 `boil:"publisher_impressions" json:"publisher_impressions" toml:"publisher_impressions" yaml:"publisher_impressions"`
	PubFillRate          float64 `boil:"pub_fill_rate" json:"pub_fill_rate" toml:"pub_fill_rate" yaml:"pub_fill_rate"`
	CPM                  float64 `boil:"cpm" json:"cpm" toml:"cpm" yaml:"cpm"`
	RPM                  float64 `boil:"rpm" json:"rpm" toml:"rpm" yaml:"rpm"`
	DPRPM                float64 `boil:"dp_rpm" json:"dp_rpm" toml:"dp_rpm" yaml:"dp_rpm"`
	GP                   float64 `boil:"gp" json:"gp" toml:"gp" yaml:"gp"`
	GPP                  float64 `boil:"gpp" json:"gpp" toml:"gpp" yaml:"gpp"`
	ConsultantFee        float64 `boil:"consultant_fee" json:"consultant_fee" toml:"consultant_fee" yaml:"consultant_fee"`
	TamFee               float64 `boil:"tam_fee" json:"tam_fee" toml:"tam_fee" yaml:"tam_fee"`
	TechFee              float64 `boil:"tech_fee" json:"tech_fee" toml:"tech_fee" yaml:"tech_fee"`
	DemandPartnerFee     float64 `boil:"demand_partner_fee" json:"demand_partner_fee" toml:"demand_partner_fee" yaml:"demand_partner_fee"`
	DataFee              float64 `boil:"data_fee" json:"data_fee" toml:"data_fee" yaml:"data_fee"`
	BidResponses         float64 `boil:"bid_responses" json:"bid_responses" toml:"bid_responses" yaml:"bid_responses"`

	R *realTimeReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L realTimeReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RealTimeReportColumns = struct {
	Time                 string
	Publisher            string
	PublisherID          string
	Domain               string
	BidRequests          string
	Device               string
	Country              string
	Revenue              string
	Cost                 string
	SoldImpressions      string
	PublisherImpressions string
	PubFillRate          string
	CPM                  string
	RPM                  string
	DPRPM                string
	GP                   string
	GPP                  string
	ConsultantFee        string
	TamFee               string
	TechFee              string
	DemandPartnerFee     string
	DataFee              string
	BidResponses         string
}{
	Time:                 "time",
	Publisher:            "publisher",
	PublisherID:          "publisher_id",
	Domain:               "domain",
	BidRequests:          "bid_requests",
	Device:               "device",
	Country:              "country",
	Revenue:              "revenue",
	Cost:                 "cost",
	SoldImpressions:      "sold_impressions",
	PublisherImpressions: "publisher_impressions",
	PubFillRate:          "pub_fill_rate",
	CPM:                  "cpm",
	RPM:                  "rpm",
	DPRPM:                "dp_rpm",
	GP:                   "gp",
	GPP:                  "gpp",
	ConsultantFee:        "consultant_fee",
	TamFee:               "tam_fee",
	TechFee:              "tech_fee",
	DemandPartnerFee:     "demand_partner_fee",
	DataFee:              "data_fee",
	BidResponses:         "bid_responses",
}

var RealTimeReportTableColumns = struct {
	Time                 string
	Publisher            string
	PublisherID          string
	Domain               string
	BidRequests          string
	Device               string
	Country              string
	Revenue              string
	Cost                 string
	SoldImpressions      string
	PublisherImpressions string
	PubFillRate          string
	CPM                  string
	RPM                  string
	DPRPM                string
	GP                   string
	GPP                  string
	ConsultantFee        string
	TamFee               string
	TechFee              string
	DemandPartnerFee     string
	DataFee              string
	BidResponses         string
}{
	Time:                 "real_time_report.time",
	Publisher:            "real_time_report.publisher",
	PublisherID:          "real_time_report.publisher_id",
	Domain:               "real_time_report.domain",
	BidRequests:          "real_time_report.bid_requests",
	Device:               "real_time_report.device",
	Country:              "real_time_report.country",
	Revenue:              "real_time_report.revenue",
	Cost:                 "real_time_report.cost",
	SoldImpressions:      "real_time_report.sold_impressions",
	PublisherImpressions: "real_time_report.publisher_impressions",
	PubFillRate:          "real_time_report.pub_fill_rate",
	CPM:                  "real_time_report.cpm",
	RPM:                  "real_time_report.rpm",
	DPRPM:                "real_time_report.dp_rpm",
	GP:                   "real_time_report.gp",
	GPP:                  "real_time_report.gpp",
	ConsultantFee:        "real_time_report.consultant_fee",
	TamFee:               "real_time_report.tam_fee",
	TechFee:              "real_time_report.tech_fee",
	DemandPartnerFee:     "real_time_report.demand_partner_fee",
	DataFee:              "real_time_report.data_fee",
	BidResponses:         "real_time_report.bid_responses",
}

// Generated where

var RealTimeReportWhere = struct {
	Time                 whereHelperstring
	Publisher            whereHelperstring
	PublisherID          whereHelperstring
	Domain               whereHelperstring
	BidRequests          whereHelperfloat64
	Device               whereHelperstring
	Country              whereHelperstring
	Revenue              whereHelperfloat64
	Cost                 whereHelperfloat64
	SoldImpressions      whereHelperfloat64
	PublisherImpressions whereHelperfloat64
	PubFillRate          whereHelperfloat64
	CPM                  whereHelperfloat64
	RPM                  whereHelperfloat64
	DPRPM                whereHelperfloat64
	GP                   whereHelperfloat64
	GPP                  whereHelperfloat64
	ConsultantFee        whereHelperfloat64
	TamFee               whereHelperfloat64
	TechFee              whereHelperfloat64
	DemandPartnerFee     whereHelperfloat64
	DataFee              whereHelperfloat64
	BidResponses         whereHelperfloat64
}{
	Time:                 whereHelperstring{field: "\"real_time_report\".\"time\""},
	Publisher:            whereHelperstring{field: "\"real_time_report\".\"publisher\""},
	PublisherID:          whereHelperstring{field: "\"real_time_report\".\"publisher_id\""},
	Domain:               whereHelperstring{field: "\"real_time_report\".\"domain\""},
	BidRequests:          whereHelperfloat64{field: "\"real_time_report\".\"bid_requests\""},
	Device:               whereHelperstring{field: "\"real_time_report\".\"device\""},
	Country:              whereHelperstring{field: "\"real_time_report\".\"country\""},
	Revenue:              whereHelperfloat64{field: "\"real_time_report\".\"revenue\""},
	Cost:                 whereHelperfloat64{field: "\"real_time_report\".\"cost\""},
	SoldImpressions:      whereHelperfloat64{field: "\"real_time_report\".\"sold_impressions\""},
	PublisherImpressions: whereHelperfloat64{field: "\"real_time_report\".\"publisher_impressions\""},
	PubFillRate:          whereHelperfloat64{field: "\"real_time_report\".\"pub_fill_rate\""},
	CPM:                  whereHelperfloat64{field: "\"real_time_report\".\"cpm\""},
	RPM:                  whereHelperfloat64{field: "\"real_time_report\".\"rpm\""},
	DPRPM:                whereHelperfloat64{field: "\"real_time_report\".\"dp_rpm\""},
	GP:                   whereHelperfloat64{field: "\"real_time_report\".\"gp\""},
	GPP:                  whereHelperfloat64{field: "\"real_time_report\".\"gpp\""},
	ConsultantFee:        whereHelperfloat64{field: "\"real_time_report\".\"consultant_fee\""},
	TamFee:               whereHelperfloat64{field: "\"real_time_report\".\"tam_fee\""},
	TechFee:              whereHelperfloat64{field: "\"real_time_report\".\"tech_fee\""},
	DemandPartnerFee:     whereHelperfloat64{field: "\"real_time_report\".\"demand_partner_fee\""},
	DataFee:              whereHelperfloat64{field: "\"real_time_report\".\"data_fee\""},
	BidResponses:         whereHelperfloat64{field: "\"real_time_report\".\"bid_responses\""},
}

// RealTimeReportRels is where relationship names are stored.
var RealTimeReportRels = struct {
}{}

// realTimeReportR is where relationships are stored.
type realTimeReportR struct {
}

// NewStruct creates a new relationship struct
func (*realTimeReportR) NewStruct() *realTimeReportR {
	return &realTimeReportR{}
}

// realTimeReportL is where Load methods for each relationship are stored.
type realTimeReportL struct{}

var (
	realTimeReportAllColumns            = []string{"time", "publisher", "publisher_id", "domain", "bid_requests", "device", "country", "revenue", "cost", "sold_impressions", "publisher_impressions", "pub_fill_rate", "cpm", "rpm", "dp_rpm", "gp", "gpp", "consultant_fee", "tam_fee", "tech_fee", "demand_partner_fee", "data_fee", "bid_responses"}
	realTimeReportColumnsWithoutDefault = []string{"time", "publisher", "publisher_id", "domain", "bid_requests", "device", "country", "revenue", "cost", "sold_impressions", "publisher_impressions", "pub_fill_rate", "cpm", "rpm", "dp_rpm", "gp", "gpp", "consultant_fee", "tam_fee", "tech_fee", "demand_partner_fee", "data_fee"}
	realTimeReportColumnsWithDefault    = []string{"bid_responses"}
	realTimeReportPrimaryKeyColumns     = []string{"publisher_id", "time", "domain", "device", "country"}
	realTimeReportGeneratedColumns      = []string{}
)

type (
	// RealTimeReportSlice is an alias for a slice of pointers to RealTimeReport.
	// This should almost always be used instead of []RealTimeReport.
	RealTimeReportSlice []*RealTimeReport
	// RealTimeReportHook is the signature for custom RealTimeReport hook methods
	RealTimeReportHook func(context.Context, boil.ContextExecutor, *RealTimeReport) error

	realTimeReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	realTimeReportType                 = reflect.TypeOf(&RealTimeReport{})
	realTimeReportMapping              = queries.MakeStructMapping(realTimeReportType)
	realTimeReportPrimaryKeyMapping, _ = queries.BindMapping(realTimeReportType, realTimeReportMapping, realTimeReportPrimaryKeyColumns)
	realTimeReportInsertCacheMut       sync.RWMutex
	realTimeReportInsertCache          = make(map[string]insertCache)
	realTimeReportUpdateCacheMut       sync.RWMutex
	realTimeReportUpdateCache          = make(map[string]updateCache)
	realTimeReportUpsertCacheMut       sync.RWMutex
	realTimeReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var realTimeReportAfterSelectMu sync.Mutex
var realTimeReportAfterSelectHooks []RealTimeReportHook

var realTimeReportBeforeInsertMu sync.Mutex
var realTimeReportBeforeInsertHooks []RealTimeReportHook
var realTimeReportAfterInsertMu sync.Mutex
var realTimeReportAfterInsertHooks []RealTimeReportHook

var realTimeReportBeforeUpdateMu sync.Mutex
var realTimeReportBeforeUpdateHooks []RealTimeReportHook
var realTimeReportAfterUpdateMu sync.Mutex
var realTimeReportAfterUpdateHooks []RealTimeReportHook

var realTimeReportBeforeDeleteMu sync.Mutex
var realTimeReportBeforeDeleteHooks []RealTimeReportHook
var realTimeReportAfterDeleteMu sync.Mutex
var realTimeReportAfterDeleteHooks []RealTimeReportHook

var realTimeReportBeforeUpsertMu sync.Mutex
var realTimeReportBeforeUpsertHooks []RealTimeReportHook
var realTimeReportAfterUpsertMu sync.Mutex
var realTimeReportAfterUpsertHooks []RealTimeReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RealTimeReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RealTimeReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RealTimeReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RealTimeReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RealTimeReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RealTimeReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RealTimeReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RealTimeReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RealTimeReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realTimeReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRealTimeReportHook registers your hook function for all future operations.
func AddRealTimeReportHook(hookPoint boil.HookPoint, realTimeReportHook RealTimeReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		realTimeReportAfterSelectMu.Lock()
		realTimeReportAfterSelectHooks = append(realTimeReportAfterSelectHooks, realTimeReportHook)
		realTimeReportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		realTimeReportBeforeInsertMu.Lock()
		realTimeReportBeforeInsertHooks = append(realTimeReportBeforeInsertHooks, realTimeReportHook)
		realTimeReportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		realTimeReportAfterInsertMu.Lock()
		realTimeReportAfterInsertHooks = append(realTimeReportAfterInsertHooks, realTimeReportHook)
		realTimeReportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		realTimeReportBeforeUpdateMu.Lock()
		realTimeReportBeforeUpdateHooks = append(realTimeReportBeforeUpdateHooks, realTimeReportHook)
		realTimeReportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		realTimeReportAfterUpdateMu.Lock()
		realTimeReportAfterUpdateHooks = append(realTimeReportAfterUpdateHooks, realTimeReportHook)
		realTimeReportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		realTimeReportBeforeDeleteMu.Lock()
		realTimeReportBeforeDeleteHooks = append(realTimeReportBeforeDeleteHooks, realTimeReportHook)
		realTimeReportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		realTimeReportAfterDeleteMu.Lock()
		realTimeReportAfterDeleteHooks = append(realTimeReportAfterDeleteHooks, realTimeReportHook)
		realTimeReportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		realTimeReportBeforeUpsertMu.Lock()
		realTimeReportBeforeUpsertHooks = append(realTimeReportBeforeUpsertHooks, realTimeReportHook)
		realTimeReportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		realTimeReportAfterUpsertMu.Lock()
		realTimeReportAfterUpsertHooks = append(realTimeReportAfterUpsertHooks, realTimeReportHook)
		realTimeReportAfterUpsertMu.Unlock()
	}
}

// One returns a single realTimeReport record from the query.
func (q realTimeReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RealTimeReport, error) {
	o := &RealTimeReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for real_time_report")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RealTimeReport records from the query.
func (q realTimeReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (RealTimeReportSlice, error) {
	var o []*RealTimeReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RealTimeReport slice")
	}

	if len(realTimeReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RealTimeReport records in the query.
func (q realTimeReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count real_time_report rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q realTimeReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if real_time_report exists")
	}

	return count > 0, nil
}

// RealTimeReports retrieves all the records using an executor.
func RealTimeReports(mods ...qm.QueryMod) realTimeReportQuery {
	mods = append(mods, qm.From("\"real_time_report\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"real_time_report\".*"})
	}

	return realTimeReportQuery{q}
}

// FindRealTimeReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRealTimeReport(ctx context.Context, exec boil.ContextExecutor, publisherID string, time string, domain string, device string, country string, selectCols ...string) (*RealTimeReport, error) {
	realTimeReportObj := &RealTimeReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"real_time_report\" where \"publisher_id\"=$1 AND \"time\"=$2 AND \"domain\"=$3 AND \"device\"=$4 AND \"country\"=$5", sel,
	)

	q := queries.Raw(query, publisherID, time, domain, device, country)

	err := q.Bind(ctx, exec, realTimeReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from real_time_report")
	}

	if err = realTimeReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return realTimeReportObj, err
	}

	return realTimeReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RealTimeReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no real_time_report provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(realTimeReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	realTimeReportInsertCacheMut.RLock()
	cache, cached := realTimeReportInsertCache[key]
	realTimeReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			realTimeReportAllColumns,
			realTimeReportColumnsWithDefault,
			realTimeReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(realTimeReportType, realTimeReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(realTimeReportType, realTimeReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"real_time_report\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"real_time_report\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into real_time_report")
	}

	if !cached {
		realTimeReportInsertCacheMut.Lock()
		realTimeReportInsertCache[key] = cache
		realTimeReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RealTimeReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RealTimeReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	realTimeReportUpdateCacheMut.RLock()
	cache, cached := realTimeReportUpdateCache[key]
	realTimeReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			realTimeReportAllColumns,
			realTimeReportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update real_time_report, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"real_time_report\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, realTimeReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(realTimeReportType, realTimeReportMapping, append(wl, realTimeReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update real_time_report row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for real_time_report")
	}

	if !cached {
		realTimeReportUpdateCacheMut.Lock()
		realTimeReportUpdateCache[key] = cache
		realTimeReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q realTimeReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for real_time_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for real_time_report")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RealTimeReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), realTimeReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"real_time_report\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, realTimeReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in realTimeReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all realTimeReport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RealTimeReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no real_time_report provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(realTimeReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	realTimeReportUpsertCacheMut.RLock()
	cache, cached := realTimeReportUpsertCache[key]
	realTimeReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			realTimeReportAllColumns,
			realTimeReportColumnsWithDefault,
			realTimeReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			realTimeReportAllColumns,
			realTimeReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert real_time_report, could not build update column list")
		}

		ret := strmangle.SetComplement(realTimeReportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(realTimeReportPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert real_time_report, could not build conflict column list")
			}

			conflict = make([]string, len(realTimeReportPrimaryKeyColumns))
			copy(conflict, realTimeReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"real_time_report\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(realTimeReportType, realTimeReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(realTimeReportType, realTimeReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert real_time_report")
	}

	if !cached {
		realTimeReportUpsertCacheMut.Lock()
		realTimeReportUpsertCache[key] = cache
		realTimeReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RealTimeReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RealTimeReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RealTimeReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), realTimeReportPrimaryKeyMapping)
	sql := "DELETE FROM \"real_time_report\" WHERE \"publisher_id\"=$1 AND \"time\"=$2 AND \"domain\"=$3 AND \"device\"=$4 AND \"country\"=$5"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from real_time_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for real_time_report")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q realTimeReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no realTimeReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from real_time_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for real_time_report")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RealTimeReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(realTimeReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), realTimeReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"real_time_report\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, realTimeReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from realTimeReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for real_time_report")
	}

	if len(realTimeReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RealTimeReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRealTimeReport(ctx, exec, o.PublisherID, o.Time, o.Domain, o.Device, o.Country)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RealTimeReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RealTimeReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), realTimeReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"real_time_report\".* FROM \"real_time_report\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, realTimeReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RealTimeReportSlice")
	}

	*o = slice

	return nil
}

// RealTimeReportExists checks if the RealTimeReport row exists.
func RealTimeReportExists(ctx context.Context, exec boil.ContextExecutor, publisherID string, time string, domain string, device string, country string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"real_time_report\" where \"publisher_id\"=$1 AND \"time\"=$2 AND \"domain\"=$3 AND \"device\"=$4 AND \"country\"=$5 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, publisherID, time, domain, device, country)
	}
	row := exec.QueryRowContext(ctx, sql, publisherID, time, domain, device, country)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if real_time_report exists")
	}

	return exists, nil
}

// Exists checks if the RealTimeReport row exists.
func (o *RealTimeReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RealTimeReportExists(ctx, exec, o.PublisherID, o.Time, o.Domain, o.Device, o.Country)
}
