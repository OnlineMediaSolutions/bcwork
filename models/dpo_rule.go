// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DpoRule is an object representing the database table.
type DpoRule struct {
	RuleID          string      `boil:"rule_id" json:"rule_id" toml:"rule_id" yaml:"rule_id"`
	DemandPartnerID string      `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	Publisher       null.String `boil:"publisher" json:"publisher,omitempty" toml:"publisher" yaml:"publisher,omitempty"`
	Domain          null.String `boil:"domain" json:"domain,omitempty" toml:"domain" yaml:"domain,omitempty"`
	Country         null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Browser         null.String `boil:"browser" json:"browser,omitempty" toml:"browser" yaml:"browser,omitempty"`
	Os              null.String `boil:"os" json:"os,omitempty" toml:"os" yaml:"os,omitempty"`
	DeviceType      null.String `boil:"device_type" json:"device_type,omitempty" toml:"device_type" yaml:"device_type,omitempty"`
	PlacementType   null.String `boil:"placement_type" json:"placement_type,omitempty" toml:"placement_type" yaml:"placement_type,omitempty"`
	Factor          float64     `boil:"factor" json:"factor" toml:"factor" yaml:"factor"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Active          bool        `boil:"active" json:"active" toml:"active" yaml:"active"`

	R *dpoRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dpoRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DpoRuleColumns = struct {
	RuleID          string
	DemandPartnerID string
	Publisher       string
	Domain          string
	Country         string
	Browser         string
	Os              string
	DeviceType      string
	PlacementType   string
	Factor          string
	CreatedAt       string
	UpdatedAt       string
	Active          string
}{
	RuleID:          "rule_id",
	DemandPartnerID: "demand_partner_id",
	Publisher:       "publisher",
	Domain:          "domain",
	Country:         "country",
	Browser:         "browser",
	Os:              "os",
	DeviceType:      "device_type",
	PlacementType:   "placement_type",
	Factor:          "factor",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	Active:          "active",
}

var DpoRuleTableColumns = struct {
	RuleID          string
	DemandPartnerID string
	Publisher       string
	Domain          string
	Country         string
	Browser         string
	Os              string
	DeviceType      string
	PlacementType   string
	Factor          string
	CreatedAt       string
	UpdatedAt       string
	Active          string
}{
	RuleID:          "dpo_rule.rule_id",
	DemandPartnerID: "dpo_rule.demand_partner_id",
	Publisher:       "dpo_rule.publisher",
	Domain:          "dpo_rule.domain",
	Country:         "dpo_rule.country",
	Browser:         "dpo_rule.browser",
	Os:              "dpo_rule.os",
	DeviceType:      "dpo_rule.device_type",
	PlacementType:   "dpo_rule.placement_type",
	Factor:          "dpo_rule.factor",
	CreatedAt:       "dpo_rule.created_at",
	UpdatedAt:       "dpo_rule.updated_at",
	Active:          "dpo_rule.active",
}

// Generated where

var DpoRuleWhere = struct {
	RuleID          whereHelperstring
	DemandPartnerID whereHelperstring
	Publisher       whereHelpernull_String
	Domain          whereHelpernull_String
	Country         whereHelpernull_String
	Browser         whereHelpernull_String
	Os              whereHelpernull_String
	DeviceType      whereHelpernull_String
	PlacementType   whereHelpernull_String
	Factor          whereHelperfloat64
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpernull_Time
	Active          whereHelperbool
}{
	RuleID:          whereHelperstring{field: "\"dpo_rule\".\"rule_id\""},
	DemandPartnerID: whereHelperstring{field: "\"dpo_rule\".\"demand_partner_id\""},
	Publisher:       whereHelpernull_String{field: "\"dpo_rule\".\"publisher\""},
	Domain:          whereHelpernull_String{field: "\"dpo_rule\".\"domain\""},
	Country:         whereHelpernull_String{field: "\"dpo_rule\".\"country\""},
	Browser:         whereHelpernull_String{field: "\"dpo_rule\".\"browser\""},
	Os:              whereHelpernull_String{field: "\"dpo_rule\".\"os\""},
	DeviceType:      whereHelpernull_String{field: "\"dpo_rule\".\"device_type\""},
	PlacementType:   whereHelpernull_String{field: "\"dpo_rule\".\"placement_type\""},
	Factor:          whereHelperfloat64{field: "\"dpo_rule\".\"factor\""},
	CreatedAt:       whereHelpertime_Time{field: "\"dpo_rule\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"dpo_rule\".\"updated_at\""},
	Active:          whereHelperbool{field: "\"dpo_rule\".\"active\""},
}

// DpoRuleRels is where relationship names are stored.
var DpoRuleRels = struct {
	DemandPartner string
}{
	DemandPartner: "DemandPartner",
}

// dpoRuleR is where relationships are stored.
type dpoRuleR struct {
	DemandPartner *Dpo `boil:"DemandPartner" json:"DemandPartner" toml:"DemandPartner" yaml:"DemandPartner"`
}

// NewStruct creates a new relationship struct
func (*dpoRuleR) NewStruct() *dpoRuleR {
	return &dpoRuleR{}
}

func (r *dpoRuleR) GetDemandPartner() *Dpo {
	if r == nil {
		return nil
	}
	return r.DemandPartner
}

// dpoRuleL is where Load methods for each relationship are stored.
type dpoRuleL struct{}

var (
	dpoRuleAllColumns            = []string{"rule_id", "demand_partner_id", "publisher", "domain", "country", "browser", "os", "device_type", "placement_type", "factor", "created_at", "updated_at", "active"}
	dpoRuleColumnsWithoutDefault = []string{"rule_id", "demand_partner_id", "created_at"}
	dpoRuleColumnsWithDefault    = []string{"publisher", "domain", "country", "browser", "os", "device_type", "placement_type", "factor", "updated_at", "active"}
	dpoRulePrimaryKeyColumns     = []string{"rule_id"}
	dpoRuleGeneratedColumns      = []string{}
)

type (
	// DpoRuleSlice is an alias for a slice of pointers to DpoRule.
	// This should almost always be used instead of []DpoRule.
	DpoRuleSlice []*DpoRule
	// DpoRuleHook is the signature for custom DpoRule hook methods
	DpoRuleHook func(context.Context, boil.ContextExecutor, *DpoRule) error

	dpoRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dpoRuleType                 = reflect.TypeOf(&DpoRule{})
	dpoRuleMapping              = queries.MakeStructMapping(dpoRuleType)
	dpoRulePrimaryKeyMapping, _ = queries.BindMapping(dpoRuleType, dpoRuleMapping, dpoRulePrimaryKeyColumns)
	dpoRuleInsertCacheMut       sync.RWMutex
	dpoRuleInsertCache          = make(map[string]insertCache)
	dpoRuleUpdateCacheMut       sync.RWMutex
	dpoRuleUpdateCache          = make(map[string]updateCache)
	dpoRuleUpsertCacheMut       sync.RWMutex
	dpoRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dpoRuleAfterSelectHooks []DpoRuleHook

var dpoRuleBeforeInsertHooks []DpoRuleHook
var dpoRuleAfterInsertHooks []DpoRuleHook

var dpoRuleBeforeUpdateHooks []DpoRuleHook
var dpoRuleAfterUpdateHooks []DpoRuleHook

var dpoRuleBeforeDeleteHooks []DpoRuleHook
var dpoRuleAfterDeleteHooks []DpoRuleHook

var dpoRuleBeforeUpsertHooks []DpoRuleHook
var dpoRuleAfterUpsertHooks []DpoRuleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DpoRule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DpoRule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DpoRule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DpoRule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DpoRule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DpoRule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DpoRule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DpoRule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DpoRule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoRuleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDpoRuleHook registers your hook function for all future operations.
func AddDpoRuleHook(hookPoint boil.HookPoint, dpoRuleHook DpoRuleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dpoRuleAfterSelectHooks = append(dpoRuleAfterSelectHooks, dpoRuleHook)
	case boil.BeforeInsertHook:
		dpoRuleBeforeInsertHooks = append(dpoRuleBeforeInsertHooks, dpoRuleHook)
	case boil.AfterInsertHook:
		dpoRuleAfterInsertHooks = append(dpoRuleAfterInsertHooks, dpoRuleHook)
	case boil.BeforeUpdateHook:
		dpoRuleBeforeUpdateHooks = append(dpoRuleBeforeUpdateHooks, dpoRuleHook)
	case boil.AfterUpdateHook:
		dpoRuleAfterUpdateHooks = append(dpoRuleAfterUpdateHooks, dpoRuleHook)
	case boil.BeforeDeleteHook:
		dpoRuleBeforeDeleteHooks = append(dpoRuleBeforeDeleteHooks, dpoRuleHook)
	case boil.AfterDeleteHook:
		dpoRuleAfterDeleteHooks = append(dpoRuleAfterDeleteHooks, dpoRuleHook)
	case boil.BeforeUpsertHook:
		dpoRuleBeforeUpsertHooks = append(dpoRuleBeforeUpsertHooks, dpoRuleHook)
	case boil.AfterUpsertHook:
		dpoRuleAfterUpsertHooks = append(dpoRuleAfterUpsertHooks, dpoRuleHook)
	}
}

// One returns a single dpoRule record from the query.
func (q dpoRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DpoRule, error) {
	o := &DpoRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dpo_rule")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DpoRule records from the query.
func (q dpoRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (DpoRuleSlice, error) {
	var o []*DpoRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DpoRule slice")
	}

	if len(dpoRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DpoRule records in the query.
func (q dpoRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dpo_rule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dpoRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dpo_rule exists")
	}

	return count > 0, nil
}

// DemandPartner pointed to by the foreign key.
func (o *DpoRule) DemandPartner(mods ...qm.QueryMod) dpoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"demand_partner_id\" = ?", o.DemandPartnerID),
	}

	queryMods = append(queryMods, mods...)

	return Dpos(queryMods...)
}

// LoadDemandPartner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dpoRuleL) LoadDemandPartner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDpoRule interface{}, mods queries.Applicator) error {
	var slice []*DpoRule
	var object *DpoRule

	if singular {
		var ok bool
		object, ok = maybeDpoRule.(*DpoRule)
		if !ok {
			object = new(DpoRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDpoRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDpoRule))
			}
		}
	} else {
		s, ok := maybeDpoRule.(*[]*DpoRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDpoRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDpoRule))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dpoRuleR{}
		}
		args = append(args, object.DemandPartnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dpoRuleR{}
			}

			for _, a := range args {
				if a == obj.DemandPartnerID {
					continue Outer
				}
			}

			args = append(args, obj.DemandPartnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dpo`),
		qm.WhereIn(`dpo.demand_partner_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dpo")
	}

	var resultSlice []*Dpo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dpo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dpo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dpo")
	}

	if len(dpoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DemandPartner = foreign
		if foreign.R == nil {
			foreign.R = &dpoR{}
		}
		foreign.R.DemandPartnerDpoRules = append(foreign.R.DemandPartnerDpoRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DemandPartnerID == foreign.DemandPartnerID {
				local.R.DemandPartner = foreign
				if foreign.R == nil {
					foreign.R = &dpoR{}
				}
				foreign.R.DemandPartnerDpoRules = append(foreign.R.DemandPartnerDpoRules, local)
				break
			}
		}
	}

	return nil
}

// SetDemandPartner of the dpoRule to the related item.
// Sets o.R.DemandPartner to related.
// Adds o to related.R.DemandPartnerDpoRules.
func (o *DpoRule) SetDemandPartner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dpo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dpo_rule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"demand_partner_id"}),
		strmangle.WhereClause("\"", "\"", 2, dpoRulePrimaryKeyColumns),
	)
	values := []interface{}{related.DemandPartnerID, o.RuleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DemandPartnerID = related.DemandPartnerID
	if o.R == nil {
		o.R = &dpoRuleR{
			DemandPartner: related,
		}
	} else {
		o.R.DemandPartner = related
	}

	if related.R == nil {
		related.R = &dpoR{
			DemandPartnerDpoRules: DpoRuleSlice{o},
		}
	} else {
		related.R.DemandPartnerDpoRules = append(related.R.DemandPartnerDpoRules, o)
	}

	return nil
}

// DpoRules retrieves all the records using an executor.
func DpoRules(mods ...qm.QueryMod) dpoRuleQuery {
	mods = append(mods, qm.From("\"dpo_rule\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dpo_rule\".*"})
	}

	return dpoRuleQuery{q}
}

// FindDpoRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDpoRule(ctx context.Context, exec boil.ContextExecutor, ruleID string, selectCols ...string) (*DpoRule, error) {
	dpoRuleObj := &DpoRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dpo_rule\" where \"rule_id\"=$1", sel,
	)

	q := queries.Raw(query, ruleID)

	err := q.Bind(ctx, exec, dpoRuleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dpo_rule")
	}

	if err = dpoRuleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dpoRuleObj, err
	}

	return dpoRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DpoRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dpo_rule provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dpoRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dpoRuleInsertCacheMut.RLock()
	cache, cached := dpoRuleInsertCache[key]
	dpoRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dpoRuleAllColumns,
			dpoRuleColumnsWithDefault,
			dpoRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dpoRuleType, dpoRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dpoRuleType, dpoRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dpo_rule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dpo_rule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dpo_rule")
	}

	if !cached {
		dpoRuleInsertCacheMut.Lock()
		dpoRuleInsertCache[key] = cache
		dpoRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DpoRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DpoRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dpoRuleUpdateCacheMut.RLock()
	cache, cached := dpoRuleUpdateCache[key]
	dpoRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dpoRuleAllColumns,
			dpoRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dpo_rule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dpo_rule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dpoRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dpoRuleType, dpoRuleMapping, append(wl, dpoRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dpo_rule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dpo_rule")
	}

	if !cached {
		dpoRuleUpdateCacheMut.Lock()
		dpoRuleUpdateCache[key] = cache
		dpoRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dpoRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dpo_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dpo_rule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DpoRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpoRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dpo_rule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dpoRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dpoRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dpoRule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DpoRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dpo_rule provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dpoRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dpoRuleUpsertCacheMut.RLock()
	cache, cached := dpoRuleUpsertCache[key]
	dpoRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dpoRuleAllColumns,
			dpoRuleColumnsWithDefault,
			dpoRuleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dpoRuleAllColumns,
			dpoRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dpo_rule, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dpoRulePrimaryKeyColumns))
			copy(conflict, dpoRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dpo_rule\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dpoRuleType, dpoRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dpoRuleType, dpoRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dpo_rule")
	}

	if !cached {
		dpoRuleUpsertCacheMut.Lock()
		dpoRuleUpsertCache[key] = cache
		dpoRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DpoRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DpoRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DpoRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dpoRulePrimaryKeyMapping)
	sql := "DELETE FROM \"dpo_rule\" WHERE \"rule_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dpo_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dpo_rule")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dpoRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dpoRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dpo_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dpo_rule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DpoRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dpoRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpoRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dpo_rule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dpoRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dpoRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dpo_rule")
	}

	if len(dpoRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DpoRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDpoRule(ctx, exec, o.RuleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DpoRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DpoRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpoRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dpo_rule\".* FROM \"dpo_rule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dpoRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DpoRuleSlice")
	}

	*o = slice

	return nil
}

// DpoRuleExists checks if the DpoRule row exists.
func DpoRuleExists(ctx context.Context, exec boil.ContextExecutor, ruleID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dpo_rule\" where \"rule_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ruleID)
	}
	row := exec.QueryRowContext(ctx, sql, ruleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dpo_rule exists")
	}

	return exists, nil
}

// Exists checks if the DpoRule row exists.
func (o *DpoRule) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DpoRuleExists(ctx, exec, o.RuleID)
}
