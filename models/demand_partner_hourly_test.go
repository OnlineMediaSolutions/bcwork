// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDemandPartnerHourlies(t *testing.T) {
	t.Parallel()

	query := DemandPartnerHourlies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDemandPartnerHourliesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandPartnerHourliesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DemandPartnerHourlies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandPartnerHourliesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DemandPartnerHourlySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandPartnerHourliesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DemandPartnerHourlyExists(ctx, tx, o.Time, o.DemandPartnerID, o.Domain)
	if err != nil {
		t.Errorf("Unable to check if DemandPartnerHourly exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DemandPartnerHourlyExists to return true, but got false.")
	}
}

func testDemandPartnerHourliesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	demandPartnerHourlyFound, err := FindDemandPartnerHourly(ctx, tx, o.Time, o.DemandPartnerID, o.Domain)
	if err != nil {
		t.Error(err)
	}

	if demandPartnerHourlyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDemandPartnerHourliesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DemandPartnerHourlies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDemandPartnerHourliesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DemandPartnerHourlies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDemandPartnerHourliesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	demandPartnerHourlyOne := &DemandPartnerHourly{}
	demandPartnerHourlyTwo := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, demandPartnerHourlyOne, demandPartnerHourlyDBTypes, false, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}
	if err = randomize.Struct(seed, demandPartnerHourlyTwo, demandPartnerHourlyDBTypes, false, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = demandPartnerHourlyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = demandPartnerHourlyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DemandPartnerHourlies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDemandPartnerHourliesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	demandPartnerHourlyOne := &DemandPartnerHourly{}
	demandPartnerHourlyTwo := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, demandPartnerHourlyOne, demandPartnerHourlyDBTypes, false, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}
	if err = randomize.Struct(seed, demandPartnerHourlyTwo, demandPartnerHourlyDBTypes, false, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = demandPartnerHourlyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = demandPartnerHourlyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func demandPartnerHourlyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func demandPartnerHourlyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func demandPartnerHourlyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func demandPartnerHourlyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func demandPartnerHourlyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func demandPartnerHourlyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func demandPartnerHourlyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func demandPartnerHourlyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func demandPartnerHourlyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerHourly) error {
	*o = DemandPartnerHourly{}
	return nil
}

func testDemandPartnerHourliesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DemandPartnerHourly{}
	o := &DemandPartnerHourly{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly object: %s", err)
	}

	AddDemandPartnerHourlyHook(boil.BeforeInsertHook, demandPartnerHourlyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyBeforeInsertHooks = []DemandPartnerHourlyHook{}

	AddDemandPartnerHourlyHook(boil.AfterInsertHook, demandPartnerHourlyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyAfterInsertHooks = []DemandPartnerHourlyHook{}

	AddDemandPartnerHourlyHook(boil.AfterSelectHook, demandPartnerHourlyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyAfterSelectHooks = []DemandPartnerHourlyHook{}

	AddDemandPartnerHourlyHook(boil.BeforeUpdateHook, demandPartnerHourlyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyBeforeUpdateHooks = []DemandPartnerHourlyHook{}

	AddDemandPartnerHourlyHook(boil.AfterUpdateHook, demandPartnerHourlyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyAfterUpdateHooks = []DemandPartnerHourlyHook{}

	AddDemandPartnerHourlyHook(boil.BeforeDeleteHook, demandPartnerHourlyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyBeforeDeleteHooks = []DemandPartnerHourlyHook{}

	AddDemandPartnerHourlyHook(boil.AfterDeleteHook, demandPartnerHourlyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyAfterDeleteHooks = []DemandPartnerHourlyHook{}

	AddDemandPartnerHourlyHook(boil.BeforeUpsertHook, demandPartnerHourlyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyBeforeUpsertHooks = []DemandPartnerHourlyHook{}

	AddDemandPartnerHourlyHook(boil.AfterUpsertHook, demandPartnerHourlyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	demandPartnerHourlyAfterUpsertHooks = []DemandPartnerHourlyHook{}
}

func testDemandPartnerHourliesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDemandPartnerHourliesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(demandPartnerHourlyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDemandPartnerHourliesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDemandPartnerHourliesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DemandPartnerHourlySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDemandPartnerHourliesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DemandPartnerHourlies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	demandPartnerHourlyDBTypes = map[string]string{`Time`: `timestamp without time zone`, `DemandPartnerID`: `character varying`, `Domain`: `character varying`, `Impression`: `bigint`, `Revenue`: `double precision`}
	_                          = bytes.MinRead
)

func testDemandPartnerHourliesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(demandPartnerHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(demandPartnerHourlyAllColumns) == len(demandPartnerHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDemandPartnerHourliesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(demandPartnerHourlyAllColumns) == len(demandPartnerHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerHourly{}
	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, demandPartnerHourlyDBTypes, true, demandPartnerHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(demandPartnerHourlyAllColumns, demandPartnerHourlyPrimaryKeyColumns) {
		fields = demandPartnerHourlyAllColumns
	} else {
		fields = strmangle.SetComplement(
			demandPartnerHourlyAllColumns,
			demandPartnerHourlyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DemandPartnerHourlySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDemandPartnerHourliesUpsert(t *testing.T) {
	t.Parallel()

	if len(demandPartnerHourlyAllColumns) == len(demandPartnerHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DemandPartnerHourly{}
	if err = randomize.Struct(seed, &o, demandPartnerHourlyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DemandPartnerHourly: %s", err)
	}

	count, err := DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, demandPartnerHourlyDBTypes, false, demandPartnerHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerHourly struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DemandPartnerHourly: %s", err)
	}

	count, err = DemandPartnerHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
