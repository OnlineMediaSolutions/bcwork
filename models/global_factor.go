// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GlobalFactor is an object representing the database table.
type GlobalFactor struct {
	Key         string       `boil:"key" json:"key" toml:"key" yaml:"key"`
	PublisherID string       `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Value       null.Float64 `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	CreatedByID null.String  `boil:"created_by_id" json:"created_by_id,omitempty" toml:"created_by_id" yaml:"created_by_id,omitempty"`
	UpdatedAt   null.Time    `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	CreatedAt   null.Time    `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *globalFactorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L globalFactorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GlobalFactorColumns = struct {
	Key         string
	PublisherID string
	Value       string
	CreatedByID string
	UpdatedAt   string
	CreatedAt   string
}{
	Key:         "key",
	PublisherID: "publisher_id",
	Value:       "value",
	CreatedByID: "created_by_id",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var GlobalFactorTableColumns = struct {
	Key         string
	PublisherID string
	Value       string
	CreatedByID string
	UpdatedAt   string
	CreatedAt   string
}{
	Key:         "global_factor.key",
	PublisherID: "global_factor.publisher_id",
	Value:       "global_factor.value",
	CreatedByID: "global_factor.created_by_id",
	UpdatedAt:   "global_factor.updated_at",
	CreatedAt:   "global_factor.created_at",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GlobalFactorWhere = struct {
	Key         whereHelperstring
	PublisherID whereHelperstring
	Value       whereHelpernull_Float64
	CreatedByID whereHelpernull_String
	UpdatedAt   whereHelpernull_Time
	CreatedAt   whereHelpernull_Time
}{
	Key:         whereHelperstring{field: "\"global_factor\".\"key\""},
	PublisherID: whereHelperstring{field: "\"global_factor\".\"publisher_id\""},
	Value:       whereHelpernull_Float64{field: "\"global_factor\".\"value\""},
	CreatedByID: whereHelpernull_String{field: "\"global_factor\".\"created_by_id\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"global_factor\".\"updated_at\""},
	CreatedAt:   whereHelpernull_Time{field: "\"global_factor\".\"created_at\""},
}

// GlobalFactorRels is where relationship names are stored.
var GlobalFactorRels = struct {
}{}

// globalFactorR is where relationships are stored.
type globalFactorR struct {
}

// NewStruct creates a new relationship struct
func (*globalFactorR) NewStruct() *globalFactorR {
	return &globalFactorR{}
}

// globalFactorL is where Load methods for each relationship are stored.
type globalFactorL struct{}

var (
	globalFactorAllColumns            = []string{"key", "publisher_id", "value", "created_by_id", "updated_at", "created_at"}
	globalFactorColumnsWithoutDefault = []string{"key", "publisher_id"}
	globalFactorColumnsWithDefault    = []string{"value", "created_by_id", "updated_at", "created_at"}
	globalFactorPrimaryKeyColumns     = []string{"key", "publisher_id"}
	globalFactorGeneratedColumns      = []string{}
)

type (
	// GlobalFactorSlice is an alias for a slice of pointers to GlobalFactor.
	// This should almost always be used instead of []GlobalFactor.
	GlobalFactorSlice []*GlobalFactor
	// GlobalFactorHook is the signature for custom GlobalFactor hook methods
	GlobalFactorHook func(context.Context, boil.ContextExecutor, *GlobalFactor) error

	globalFactorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	globalFactorType                 = reflect.TypeOf(&GlobalFactor{})
	globalFactorMapping              = queries.MakeStructMapping(globalFactorType)
	globalFactorPrimaryKeyMapping, _ = queries.BindMapping(globalFactorType, globalFactorMapping, globalFactorPrimaryKeyColumns)
	globalFactorInsertCacheMut       sync.RWMutex
	globalFactorInsertCache          = make(map[string]insertCache)
	globalFactorUpdateCacheMut       sync.RWMutex
	globalFactorUpdateCache          = make(map[string]updateCache)
	globalFactorUpsertCacheMut       sync.RWMutex
	globalFactorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var globalFactorAfterSelectHooks []GlobalFactorHook

var globalFactorBeforeInsertHooks []GlobalFactorHook
var globalFactorAfterInsertHooks []GlobalFactorHook

var globalFactorBeforeUpdateHooks []GlobalFactorHook
var globalFactorAfterUpdateHooks []GlobalFactorHook

var globalFactorBeforeDeleteHooks []GlobalFactorHook
var globalFactorAfterDeleteHooks []GlobalFactorHook

var globalFactorBeforeUpsertHooks []GlobalFactorHook
var globalFactorAfterUpsertHooks []GlobalFactorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GlobalFactor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GlobalFactor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GlobalFactor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GlobalFactor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GlobalFactor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GlobalFactor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GlobalFactor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GlobalFactor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GlobalFactor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalFactorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGlobalFactorHook registers your hook function for all future operations.
func AddGlobalFactorHook(hookPoint boil.HookPoint, globalFactorHook GlobalFactorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		globalFactorAfterSelectHooks = append(globalFactorAfterSelectHooks, globalFactorHook)
	case boil.BeforeInsertHook:
		globalFactorBeforeInsertHooks = append(globalFactorBeforeInsertHooks, globalFactorHook)
	case boil.AfterInsertHook:
		globalFactorAfterInsertHooks = append(globalFactorAfterInsertHooks, globalFactorHook)
	case boil.BeforeUpdateHook:
		globalFactorBeforeUpdateHooks = append(globalFactorBeforeUpdateHooks, globalFactorHook)
	case boil.AfterUpdateHook:
		globalFactorAfterUpdateHooks = append(globalFactorAfterUpdateHooks, globalFactorHook)
	case boil.BeforeDeleteHook:
		globalFactorBeforeDeleteHooks = append(globalFactorBeforeDeleteHooks, globalFactorHook)
	case boil.AfterDeleteHook:
		globalFactorAfterDeleteHooks = append(globalFactorAfterDeleteHooks, globalFactorHook)
	case boil.BeforeUpsertHook:
		globalFactorBeforeUpsertHooks = append(globalFactorBeforeUpsertHooks, globalFactorHook)
	case boil.AfterUpsertHook:
		globalFactorAfterUpsertHooks = append(globalFactorAfterUpsertHooks, globalFactorHook)
	}
}

// One returns a single globalFactor record from the query.
func (q globalFactorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GlobalFactor, error) {
	o := &GlobalFactor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for global_factor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GlobalFactor records from the query.
func (q globalFactorQuery) All(ctx context.Context, exec boil.ContextExecutor) (GlobalFactorSlice, error) {
	var o []*GlobalFactor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GlobalFactor slice")
	}

	if len(globalFactorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GlobalFactor records in the query.
func (q globalFactorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count global_factor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q globalFactorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if global_factor exists")
	}

	return count > 0, nil
}

// GlobalFactors retrieves all the records using an executor.
func GlobalFactors(mods ...qm.QueryMod) globalFactorQuery {
	mods = append(mods, qm.From("\"global_factor\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"global_factor\".*"})
	}

	return globalFactorQuery{q}
}

// FindGlobalFactor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGlobalFactor(ctx context.Context, exec boil.ContextExecutor, key string, publisherID string, selectCols ...string) (*GlobalFactor, error) {
	globalFactorObj := &GlobalFactor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"global_factor\" where \"key\"=$1 AND \"publisher_id\"=$2", sel,
	)

	q := queries.Raw(query, key, publisherID)

	err := q.Bind(ctx, exec, globalFactorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from global_factor")
	}

	if err = globalFactorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return globalFactorObj, err
	}

	return globalFactorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GlobalFactor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no global_factor provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(globalFactorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	globalFactorInsertCacheMut.RLock()
	cache, cached := globalFactorInsertCache[key]
	globalFactorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			globalFactorAllColumns,
			globalFactorColumnsWithDefault,
			globalFactorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(globalFactorType, globalFactorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(globalFactorType, globalFactorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"global_factor\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"global_factor\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into global_factor")
	}

	if !cached {
		globalFactorInsertCacheMut.Lock()
		globalFactorInsertCache[key] = cache
		globalFactorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GlobalFactor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GlobalFactor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	globalFactorUpdateCacheMut.RLock()
	cache, cached := globalFactorUpdateCache[key]
	globalFactorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			globalFactorAllColumns,
			globalFactorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update global_factor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"global_factor\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, globalFactorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(globalFactorType, globalFactorMapping, append(wl, globalFactorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update global_factor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for global_factor")
	}

	if !cached {
		globalFactorUpdateCacheMut.Lock()
		globalFactorUpdateCache[key] = cache
		globalFactorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q globalFactorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for global_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for global_factor")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GlobalFactorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), globalFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"global_factor\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, globalFactorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in globalFactor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all globalFactor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GlobalFactor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no global_factor provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(globalFactorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	globalFactorUpsertCacheMut.RLock()
	cache, cached := globalFactorUpsertCache[key]
	globalFactorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			globalFactorAllColumns,
			globalFactorColumnsWithDefault,
			globalFactorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			globalFactorAllColumns,
			globalFactorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert global_factor, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(globalFactorPrimaryKeyColumns))
			copy(conflict, globalFactorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"global_factor\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(globalFactorType, globalFactorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(globalFactorType, globalFactorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert global_factor")
	}

	if !cached {
		globalFactorUpsertCacheMut.Lock()
		globalFactorUpsertCache[key] = cache
		globalFactorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GlobalFactor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GlobalFactor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GlobalFactor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), globalFactorPrimaryKeyMapping)
	sql := "DELETE FROM \"global_factor\" WHERE \"key\"=$1 AND \"publisher_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from global_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for global_factor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q globalFactorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no globalFactorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from global_factor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for global_factor")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GlobalFactorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(globalFactorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), globalFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"global_factor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, globalFactorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from globalFactor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for global_factor")
	}

	if len(globalFactorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GlobalFactor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGlobalFactor(ctx, exec, o.Key, o.PublisherID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GlobalFactorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GlobalFactorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), globalFactorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"global_factor\".* FROM \"global_factor\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, globalFactorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GlobalFactorSlice")
	}

	*o = slice

	return nil
}

// GlobalFactorExists checks if the GlobalFactor row exists.
func GlobalFactorExists(ctx context.Context, exec boil.ContextExecutor, key string, publisherID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"global_factor\" where \"key\"=$1 AND \"publisher_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, key, publisherID)
	}
	row := exec.QueryRowContext(ctx, sql, key, publisherID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if global_factor exists")
	}

	return exists, nil
}

// Exists checks if the GlobalFactor row exists.
func (o *GlobalFactor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GlobalFactorExists(ctx, exec, o.Key, o.PublisherID)
}
