// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MetadataQueueTemp is an object representing the database table.
type MetadataQueueTemp struct {
	TransactionID     string      `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	Key               string      `boil:"key" json:"key" toml:"key" yaml:"key"`
	Version           null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	Value             types.JSON  `boil:"value" json:"value" toml:"value" yaml:"value"`
	CommitedInstances int64       `boil:"commited_instances" json:"commited_instances" toml:"commited_instances" yaml:"commited_instances"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *metadataQueueTempR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metadataQueueTempL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetadataQueueTempColumns = struct {
	TransactionID     string
	Key               string
	Version           string
	Value             string
	CommitedInstances string
	CreatedAt         string
	UpdatedAt         string
}{
	TransactionID:     "transaction_id",
	Key:               "key",
	Version:           "version",
	Value:             "value",
	CommitedInstances: "commited_instances",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var MetadataQueueTempTableColumns = struct {
	TransactionID     string
	Key               string
	Version           string
	Value             string
	CommitedInstances string
	CreatedAt         string
	UpdatedAt         string
}{
	TransactionID:     "metadata_queue_temp.transaction_id",
	Key:               "metadata_queue_temp.key",
	Version:           "metadata_queue_temp.version",
	Value:             "metadata_queue_temp.value",
	CommitedInstances: "metadata_queue_temp.commited_instances",
	CreatedAt:         "metadata_queue_temp.created_at",
	UpdatedAt:         "metadata_queue_temp.updated_at",
}

// Generated where

var MetadataQueueTempWhere = struct {
	TransactionID     whereHelperstring
	Key               whereHelperstring
	Version           whereHelpernull_String
	Value             whereHelpertypes_JSON
	CommitedInstances whereHelperint64
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpernull_Time
}{
	TransactionID:     whereHelperstring{field: "\"metadata_queue_temp\".\"transaction_id\""},
	Key:               whereHelperstring{field: "\"metadata_queue_temp\".\"key\""},
	Version:           whereHelpernull_String{field: "\"metadata_queue_temp\".\"version\""},
	Value:             whereHelpertypes_JSON{field: "\"metadata_queue_temp\".\"value\""},
	CommitedInstances: whereHelperint64{field: "\"metadata_queue_temp\".\"commited_instances\""},
	CreatedAt:         whereHelpertime_Time{field: "\"metadata_queue_temp\".\"created_at\""},
	UpdatedAt:         whereHelpernull_Time{field: "\"metadata_queue_temp\".\"updated_at\""},
}

// MetadataQueueTempRels is where relationship names are stored.
var MetadataQueueTempRels = struct {
}{}

// metadataQueueTempR is where relationships are stored.
type metadataQueueTempR struct {
}

// NewStruct creates a new relationship struct
func (*metadataQueueTempR) NewStruct() *metadataQueueTempR {
	return &metadataQueueTempR{}
}

// metadataQueueTempL is where Load methods for each relationship are stored.
type metadataQueueTempL struct{}

var (
	metadataQueueTempAllColumns            = []string{"transaction_id", "key", "version", "value", "commited_instances", "created_at", "updated_at"}
	metadataQueueTempColumnsWithoutDefault = []string{"transaction_id", "key", "value", "commited_instances", "created_at"}
	metadataQueueTempColumnsWithDefault    = []string{"version", "updated_at"}
	metadataQueueTempPrimaryKeyColumns     = []string{"transaction_id"}
	metadataQueueTempGeneratedColumns      = []string{}
)

type (
	// MetadataQueueTempSlice is an alias for a slice of pointers to MetadataQueueTemp.
	// This should almost always be used instead of []MetadataQueueTemp.
	MetadataQueueTempSlice []*MetadataQueueTemp
	// MetadataQueueTempHook is the signature for custom MetadataQueueTemp hook methods
	MetadataQueueTempHook func(context.Context, boil.ContextExecutor, *MetadataQueueTemp) error

	metadataQueueTempQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metadataQueueTempType                 = reflect.TypeOf(&MetadataQueueTemp{})
	metadataQueueTempMapping              = queries.MakeStructMapping(metadataQueueTempType)
	metadataQueueTempPrimaryKeyMapping, _ = queries.BindMapping(metadataQueueTempType, metadataQueueTempMapping, metadataQueueTempPrimaryKeyColumns)
	metadataQueueTempInsertCacheMut       sync.RWMutex
	metadataQueueTempInsertCache          = make(map[string]insertCache)
	metadataQueueTempUpdateCacheMut       sync.RWMutex
	metadataQueueTempUpdateCache          = make(map[string]updateCache)
	metadataQueueTempUpsertCacheMut       sync.RWMutex
	metadataQueueTempUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metadataQueueTempAfterSelectMu sync.Mutex
var metadataQueueTempAfterSelectHooks []MetadataQueueTempHook

var metadataQueueTempBeforeInsertMu sync.Mutex
var metadataQueueTempBeforeInsertHooks []MetadataQueueTempHook
var metadataQueueTempAfterInsertMu sync.Mutex
var metadataQueueTempAfterInsertHooks []MetadataQueueTempHook

var metadataQueueTempBeforeUpdateMu sync.Mutex
var metadataQueueTempBeforeUpdateHooks []MetadataQueueTempHook
var metadataQueueTempAfterUpdateMu sync.Mutex
var metadataQueueTempAfterUpdateHooks []MetadataQueueTempHook

var metadataQueueTempBeforeDeleteMu sync.Mutex
var metadataQueueTempBeforeDeleteHooks []MetadataQueueTempHook
var metadataQueueTempAfterDeleteMu sync.Mutex
var metadataQueueTempAfterDeleteHooks []MetadataQueueTempHook

var metadataQueueTempBeforeUpsertMu sync.Mutex
var metadataQueueTempBeforeUpsertHooks []MetadataQueueTempHook
var metadataQueueTempAfterUpsertMu sync.Mutex
var metadataQueueTempAfterUpsertHooks []MetadataQueueTempHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MetadataQueueTemp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MetadataQueueTemp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MetadataQueueTemp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MetadataQueueTemp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MetadataQueueTemp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MetadataQueueTemp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MetadataQueueTemp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MetadataQueueTemp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MetadataQueueTemp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueTempAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetadataQueueTempHook registers your hook function for all future operations.
func AddMetadataQueueTempHook(hookPoint boil.HookPoint, metadataQueueTempHook MetadataQueueTempHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metadataQueueTempAfterSelectMu.Lock()
		metadataQueueTempAfterSelectHooks = append(metadataQueueTempAfterSelectHooks, metadataQueueTempHook)
		metadataQueueTempAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		metadataQueueTempBeforeInsertMu.Lock()
		metadataQueueTempBeforeInsertHooks = append(metadataQueueTempBeforeInsertHooks, metadataQueueTempHook)
		metadataQueueTempBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		metadataQueueTempAfterInsertMu.Lock()
		metadataQueueTempAfterInsertHooks = append(metadataQueueTempAfterInsertHooks, metadataQueueTempHook)
		metadataQueueTempAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		metadataQueueTempBeforeUpdateMu.Lock()
		metadataQueueTempBeforeUpdateHooks = append(metadataQueueTempBeforeUpdateHooks, metadataQueueTempHook)
		metadataQueueTempBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		metadataQueueTempAfterUpdateMu.Lock()
		metadataQueueTempAfterUpdateHooks = append(metadataQueueTempAfterUpdateHooks, metadataQueueTempHook)
		metadataQueueTempAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		metadataQueueTempBeforeDeleteMu.Lock()
		metadataQueueTempBeforeDeleteHooks = append(metadataQueueTempBeforeDeleteHooks, metadataQueueTempHook)
		metadataQueueTempBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		metadataQueueTempAfterDeleteMu.Lock()
		metadataQueueTempAfterDeleteHooks = append(metadataQueueTempAfterDeleteHooks, metadataQueueTempHook)
		metadataQueueTempAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		metadataQueueTempBeforeUpsertMu.Lock()
		metadataQueueTempBeforeUpsertHooks = append(metadataQueueTempBeforeUpsertHooks, metadataQueueTempHook)
		metadataQueueTempBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		metadataQueueTempAfterUpsertMu.Lock()
		metadataQueueTempAfterUpsertHooks = append(metadataQueueTempAfterUpsertHooks, metadataQueueTempHook)
		metadataQueueTempAfterUpsertMu.Unlock()
	}
}

// One returns a single metadataQueueTemp record from the query.
func (q metadataQueueTempQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MetadataQueueTemp, error) {
	o := &MetadataQueueTemp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for metadata_queue_temp")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MetadataQueueTemp records from the query.
func (q metadataQueueTempQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetadataQueueTempSlice, error) {
	var o []*MetadataQueueTemp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MetadataQueueTemp slice")
	}

	if len(metadataQueueTempAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MetadataQueueTemp records in the query.
func (q metadataQueueTempQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count metadata_queue_temp rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metadataQueueTempQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if metadata_queue_temp exists")
	}

	return count > 0, nil
}

// MetadataQueueTemps retrieves all the records using an executor.
func MetadataQueueTemps(mods ...qm.QueryMod) metadataQueueTempQuery {
	mods = append(mods, qm.From("\"metadata_queue_temp\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"metadata_queue_temp\".*"})
	}

	return metadataQueueTempQuery{q}
}

// FindMetadataQueueTemp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetadataQueueTemp(ctx context.Context, exec boil.ContextExecutor, transactionID string, selectCols ...string) (*MetadataQueueTemp, error) {
	metadataQueueTempObj := &MetadataQueueTemp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"metadata_queue_temp\" where \"transaction_id\"=$1", sel,
	)

	q := queries.Raw(query, transactionID)

	err := q.Bind(ctx, exec, metadataQueueTempObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from metadata_queue_temp")
	}

	if err = metadataQueueTempObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metadataQueueTempObj, err
	}

	return metadataQueueTempObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MetadataQueueTemp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no metadata_queue_temp provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metadataQueueTempColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metadataQueueTempInsertCacheMut.RLock()
	cache, cached := metadataQueueTempInsertCache[key]
	metadataQueueTempInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metadataQueueTempAllColumns,
			metadataQueueTempColumnsWithDefault,
			metadataQueueTempColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(metadataQueueTempType, metadataQueueTempMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metadataQueueTempType, metadataQueueTempMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"metadata_queue_temp\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"metadata_queue_temp\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into metadata_queue_temp")
	}

	if !cached {
		metadataQueueTempInsertCacheMut.Lock()
		metadataQueueTempInsertCache[key] = cache
		metadataQueueTempInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MetadataQueueTemp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MetadataQueueTemp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metadataQueueTempUpdateCacheMut.RLock()
	cache, cached := metadataQueueTempUpdateCache[key]
	metadataQueueTempUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metadataQueueTempAllColumns,
			metadataQueueTempPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update metadata_queue_temp, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"metadata_queue_temp\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, metadataQueueTempPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metadataQueueTempType, metadataQueueTempMapping, append(wl, metadataQueueTempPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update metadata_queue_temp row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for metadata_queue_temp")
	}

	if !cached {
		metadataQueueTempUpdateCacheMut.Lock()
		metadataQueueTempUpdateCache[key] = cache
		metadataQueueTempUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metadataQueueTempQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for metadata_queue_temp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for metadata_queue_temp")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetadataQueueTempSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metadataQueueTempPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"metadata_queue_temp\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, metadataQueueTempPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in metadataQueueTemp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all metadataQueueTemp")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MetadataQueueTemp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no metadata_queue_temp provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metadataQueueTempColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metadataQueueTempUpsertCacheMut.RLock()
	cache, cached := metadataQueueTempUpsertCache[key]
	metadataQueueTempUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			metadataQueueTempAllColumns,
			metadataQueueTempColumnsWithDefault,
			metadataQueueTempColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			metadataQueueTempAllColumns,
			metadataQueueTempPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert metadata_queue_temp, could not build update column list")
		}

		ret := strmangle.SetComplement(metadataQueueTempAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(metadataQueueTempPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert metadata_queue_temp, could not build conflict column list")
			}

			conflict = make([]string, len(metadataQueueTempPrimaryKeyColumns))
			copy(conflict, metadataQueueTempPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"metadata_queue_temp\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(metadataQueueTempType, metadataQueueTempMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metadataQueueTempType, metadataQueueTempMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert metadata_queue_temp")
	}

	if !cached {
		metadataQueueTempUpsertCacheMut.Lock()
		metadataQueueTempUpsertCache[key] = cache
		metadataQueueTempUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MetadataQueueTemp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MetadataQueueTemp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MetadataQueueTemp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metadataQueueTempPrimaryKeyMapping)
	sql := "DELETE FROM \"metadata_queue_temp\" WHERE \"transaction_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from metadata_queue_temp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for metadata_queue_temp")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metadataQueueTempQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no metadataQueueTempQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metadata_queue_temp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for metadata_queue_temp")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetadataQueueTempSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metadataQueueTempBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metadataQueueTempPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"metadata_queue_temp\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metadataQueueTempPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metadataQueueTemp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for metadata_queue_temp")
	}

	if len(metadataQueueTempAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MetadataQueueTemp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetadataQueueTemp(ctx, exec, o.TransactionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetadataQueueTempSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetadataQueueTempSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metadataQueueTempPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"metadata_queue_temp\".* FROM \"metadata_queue_temp\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metadataQueueTempPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MetadataQueueTempSlice")
	}

	*o = slice

	return nil
}

// MetadataQueueTempExists checks if the MetadataQueueTemp row exists.
func MetadataQueueTempExists(ctx context.Context, exec boil.ContextExecutor, transactionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"metadata_queue_temp\" where \"transaction_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, transactionID)
	}
	row := exec.QueryRowContext(ctx, sql, transactionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if metadata_queue_temp exists")
	}

	return exists, nil
}

// Exists checks if the MetadataQueueTemp row exists.
func (o *MetadataQueueTemp) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MetadataQueueTempExists(ctx, exec, o.TransactionID)
}
