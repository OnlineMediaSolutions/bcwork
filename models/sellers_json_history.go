// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SellersJSONHistory is an object representing the database table.
type SellersJSONHistory struct {
	CompetitorName  string    `boil:"competitor_name" json:"competitor_name" toml:"competitor_name" yaml:"competitor_name"`
	AddedDomains    string    `boil:"added_domains" json:"added_domains" toml:"added_domains" yaml:"added_domains"`
	AddedPublishers string    `boil:"added_publishers" json:"added_publishers" toml:"added_publishers" yaml:"added_publishers"`
	BackupToday     null.JSON `boil:"backup_today" json:"backup_today,omitempty" toml:"backup_today" yaml:"backup_today,omitempty"`
	BackupYesterday null.JSON `boil:"backup_yesterday" json:"backup_yesterday,omitempty" toml:"backup_yesterday" yaml:"backup_yesterday,omitempty"`
	CreatedAt       null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *sellersJSONHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sellersJSONHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SellersJSONHistoryColumns = struct {
	CompetitorName  string
	AddedDomains    string
	AddedPublishers string
	BackupToday     string
	BackupYesterday string
	CreatedAt       string
	UpdatedAt       string
}{
	CompetitorName:  "competitor_name",
	AddedDomains:    "added_domains",
	AddedPublishers: "added_publishers",
	BackupToday:     "backup_today",
	BackupYesterday: "backup_yesterday",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var SellersJSONHistoryTableColumns = struct {
	CompetitorName  string
	AddedDomains    string
	AddedPublishers string
	BackupToday     string
	BackupYesterday string
	CreatedAt       string
	UpdatedAt       string
}{
	CompetitorName:  "sellers_json_history.competitor_name",
	AddedDomains:    "sellers_json_history.added_domains",
	AddedPublishers: "sellers_json_history.added_publishers",
	BackupToday:     "sellers_json_history.backup_today",
	BackupYesterday: "sellers_json_history.backup_yesterday",
	CreatedAt:       "sellers_json_history.created_at",
	UpdatedAt:       "sellers_json_history.updated_at",
}

// Generated where

var SellersJSONHistoryWhere = struct {
	CompetitorName  whereHelperstring
	AddedDomains    whereHelperstring
	AddedPublishers whereHelperstring
	BackupToday     whereHelpernull_JSON
	BackupYesterday whereHelpernull_JSON
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
}{
	CompetitorName:  whereHelperstring{field: "\"sellers_json_history\".\"competitor_name\""},
	AddedDomains:    whereHelperstring{field: "\"sellers_json_history\".\"added_domains\""},
	AddedPublishers: whereHelperstring{field: "\"sellers_json_history\".\"added_publishers\""},
	BackupToday:     whereHelpernull_JSON{field: "\"sellers_json_history\".\"backup_today\""},
	BackupYesterday: whereHelpernull_JSON{field: "\"sellers_json_history\".\"backup_yesterday\""},
	CreatedAt:       whereHelpernull_Time{field: "\"sellers_json_history\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"sellers_json_history\".\"updated_at\""},
}

// SellersJSONHistoryRels is where relationship names are stored.
var SellersJSONHistoryRels = struct {
	CompetitorNameCompetitor string
}{
	CompetitorNameCompetitor: "CompetitorNameCompetitor",
}

// sellersJSONHistoryR is where relationships are stored.
type sellersJSONHistoryR struct {
	CompetitorNameCompetitor *Competitor `boil:"CompetitorNameCompetitor" json:"CompetitorNameCompetitor" toml:"CompetitorNameCompetitor" yaml:"CompetitorNameCompetitor"`
}

// NewStruct creates a new relationship struct
func (*sellersJSONHistoryR) NewStruct() *sellersJSONHistoryR {
	return &sellersJSONHistoryR{}
}

func (r *sellersJSONHistoryR) GetCompetitorNameCompetitor() *Competitor {
	if r == nil {
		return nil
	}
	return r.CompetitorNameCompetitor
}

// sellersJSONHistoryL is where Load methods for each relationship are stored.
type sellersJSONHistoryL struct{}

var (
	sellersJSONHistoryAllColumns            = []string{"competitor_name", "added_domains", "added_publishers", "backup_today", "backup_yesterday", "created_at", "updated_at"}
	sellersJSONHistoryColumnsWithoutDefault = []string{"competitor_name", "added_domains", "added_publishers"}
	sellersJSONHistoryColumnsWithDefault    = []string{"backup_today", "backup_yesterday", "created_at", "updated_at"}
	sellersJSONHistoryPrimaryKeyColumns     = []string{"competitor_name"}
	sellersJSONHistoryGeneratedColumns      = []string{}
)

type (
	// SellersJSONHistorySlice is an alias for a slice of pointers to SellersJSONHistory.
	// This should almost always be used instead of []SellersJSONHistory.
	SellersJSONHistorySlice []*SellersJSONHistory
	// SellersJSONHistoryHook is the signature for custom SellersJSONHistory hook methods
	SellersJSONHistoryHook func(context.Context, boil.ContextExecutor, *SellersJSONHistory) error

	sellersJSONHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sellersJSONHistoryType                 = reflect.TypeOf(&SellersJSONHistory{})
	sellersJSONHistoryMapping              = queries.MakeStructMapping(sellersJSONHistoryType)
	sellersJSONHistoryPrimaryKeyMapping, _ = queries.BindMapping(sellersJSONHistoryType, sellersJSONHistoryMapping, sellersJSONHistoryPrimaryKeyColumns)
	sellersJSONHistoryInsertCacheMut       sync.RWMutex
	sellersJSONHistoryInsertCache          = make(map[string]insertCache)
	sellersJSONHistoryUpdateCacheMut       sync.RWMutex
	sellersJSONHistoryUpdateCache          = make(map[string]updateCache)
	sellersJSONHistoryUpsertCacheMut       sync.RWMutex
	sellersJSONHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sellersJSONHistoryAfterSelectMu sync.Mutex
var sellersJSONHistoryAfterSelectHooks []SellersJSONHistoryHook

var sellersJSONHistoryBeforeInsertMu sync.Mutex
var sellersJSONHistoryBeforeInsertHooks []SellersJSONHistoryHook
var sellersJSONHistoryAfterInsertMu sync.Mutex
var sellersJSONHistoryAfterInsertHooks []SellersJSONHistoryHook

var sellersJSONHistoryBeforeUpdateMu sync.Mutex
var sellersJSONHistoryBeforeUpdateHooks []SellersJSONHistoryHook
var sellersJSONHistoryAfterUpdateMu sync.Mutex
var sellersJSONHistoryAfterUpdateHooks []SellersJSONHistoryHook

var sellersJSONHistoryBeforeDeleteMu sync.Mutex
var sellersJSONHistoryBeforeDeleteHooks []SellersJSONHistoryHook
var sellersJSONHistoryAfterDeleteMu sync.Mutex
var sellersJSONHistoryAfterDeleteHooks []SellersJSONHistoryHook

var sellersJSONHistoryBeforeUpsertMu sync.Mutex
var sellersJSONHistoryBeforeUpsertHooks []SellersJSONHistoryHook
var sellersJSONHistoryAfterUpsertMu sync.Mutex
var sellersJSONHistoryAfterUpsertHooks []SellersJSONHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SellersJSONHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SellersJSONHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SellersJSONHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SellersJSONHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SellersJSONHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SellersJSONHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SellersJSONHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SellersJSONHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SellersJSONHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellersJSONHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSellersJSONHistoryHook registers your hook function for all future operations.
func AddSellersJSONHistoryHook(hookPoint boil.HookPoint, sellersJSONHistoryHook SellersJSONHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sellersJSONHistoryAfterSelectMu.Lock()
		sellersJSONHistoryAfterSelectHooks = append(sellersJSONHistoryAfterSelectHooks, sellersJSONHistoryHook)
		sellersJSONHistoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		sellersJSONHistoryBeforeInsertMu.Lock()
		sellersJSONHistoryBeforeInsertHooks = append(sellersJSONHistoryBeforeInsertHooks, sellersJSONHistoryHook)
		sellersJSONHistoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		sellersJSONHistoryAfterInsertMu.Lock()
		sellersJSONHistoryAfterInsertHooks = append(sellersJSONHistoryAfterInsertHooks, sellersJSONHistoryHook)
		sellersJSONHistoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		sellersJSONHistoryBeforeUpdateMu.Lock()
		sellersJSONHistoryBeforeUpdateHooks = append(sellersJSONHistoryBeforeUpdateHooks, sellersJSONHistoryHook)
		sellersJSONHistoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		sellersJSONHistoryAfterUpdateMu.Lock()
		sellersJSONHistoryAfterUpdateHooks = append(sellersJSONHistoryAfterUpdateHooks, sellersJSONHistoryHook)
		sellersJSONHistoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		sellersJSONHistoryBeforeDeleteMu.Lock()
		sellersJSONHistoryBeforeDeleteHooks = append(sellersJSONHistoryBeforeDeleteHooks, sellersJSONHistoryHook)
		sellersJSONHistoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		sellersJSONHistoryAfterDeleteMu.Lock()
		sellersJSONHistoryAfterDeleteHooks = append(sellersJSONHistoryAfterDeleteHooks, sellersJSONHistoryHook)
		sellersJSONHistoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		sellersJSONHistoryBeforeUpsertMu.Lock()
		sellersJSONHistoryBeforeUpsertHooks = append(sellersJSONHistoryBeforeUpsertHooks, sellersJSONHistoryHook)
		sellersJSONHistoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		sellersJSONHistoryAfterUpsertMu.Lock()
		sellersJSONHistoryAfterUpsertHooks = append(sellersJSONHistoryAfterUpsertHooks, sellersJSONHistoryHook)
		sellersJSONHistoryAfterUpsertMu.Unlock()
	}
}

// One returns a single sellersJSONHistory record from the query.
func (q sellersJSONHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SellersJSONHistory, error) {
	o := &SellersJSONHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sellers_json_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SellersJSONHistory records from the query.
func (q sellersJSONHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SellersJSONHistorySlice, error) {
	var o []*SellersJSONHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SellersJSONHistory slice")
	}

	if len(sellersJSONHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SellersJSONHistory records in the query.
func (q sellersJSONHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sellers_json_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sellersJSONHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sellers_json_history exists")
	}

	return count > 0, nil
}

// CompetitorNameCompetitor pointed to by the foreign key.
func (o *SellersJSONHistory) CompetitorNameCompetitor(mods ...qm.QueryMod) competitorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"name\" = ?", o.CompetitorName),
	}

	queryMods = append(queryMods, mods...)

	return Competitors(queryMods...)
}

// LoadCompetitorNameCompetitor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellersJSONHistoryL) LoadCompetitorNameCompetitor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellersJSONHistory interface{}, mods queries.Applicator) error {
	var slice []*SellersJSONHistory
	var object *SellersJSONHistory

	if singular {
		var ok bool
		object, ok = maybeSellersJSONHistory.(*SellersJSONHistory)
		if !ok {
			object = new(SellersJSONHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSellersJSONHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSellersJSONHistory))
			}
		}
	} else {
		s, ok := maybeSellersJSONHistory.(*[]*SellersJSONHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSellersJSONHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSellersJSONHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &sellersJSONHistoryR{}
		}
		args[object.CompetitorName] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellersJSONHistoryR{}
			}

			args[obj.CompetitorName] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`competitors`),
		qm.WhereIn(`competitors.name in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Competitor")
	}

	var resultSlice []*Competitor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Competitor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for competitors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for competitors")
	}

	if len(competitorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CompetitorNameCompetitor = foreign
		if foreign.R == nil {
			foreign.R = &competitorR{}
		}
		foreign.R.CompetitorNameSellersJSONHistory = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompetitorName == foreign.Name {
				local.R.CompetitorNameCompetitor = foreign
				if foreign.R == nil {
					foreign.R = &competitorR{}
				}
				foreign.R.CompetitorNameSellersJSONHistory = local
				break
			}
		}
	}

	return nil
}

// SetCompetitorNameCompetitor of the sellersJSONHistory to the related item.
// Sets o.R.CompetitorNameCompetitor to related.
// Adds o to related.R.CompetitorNameSellersJSONHistory.
func (o *SellersJSONHistory) SetCompetitorNameCompetitor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Competitor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sellers_json_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"competitor_name"}),
		strmangle.WhereClause("\"", "\"", 2, sellersJSONHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.Name, o.CompetitorName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompetitorName = related.Name
	if o.R == nil {
		o.R = &sellersJSONHistoryR{
			CompetitorNameCompetitor: related,
		}
	} else {
		o.R.CompetitorNameCompetitor = related
	}

	if related.R == nil {
		related.R = &competitorR{
			CompetitorNameSellersJSONHistory: o,
		}
	} else {
		related.R.CompetitorNameSellersJSONHistory = o
	}

	return nil
}

// SellersJSONHistories retrieves all the records using an executor.
func SellersJSONHistories(mods ...qm.QueryMod) sellersJSONHistoryQuery {
	mods = append(mods, qm.From("\"sellers_json_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sellers_json_history\".*"})
	}

	return sellersJSONHistoryQuery{q}
}

// FindSellersJSONHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSellersJSONHistory(ctx context.Context, exec boil.ContextExecutor, competitorName string, selectCols ...string) (*SellersJSONHistory, error) {
	sellersJSONHistoryObj := &SellersJSONHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sellers_json_history\" where \"competitor_name\"=$1", sel,
	)

	q := queries.Raw(query, competitorName)

	err := q.Bind(ctx, exec, sellersJSONHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sellers_json_history")
	}

	if err = sellersJSONHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sellersJSONHistoryObj, err
	}

	return sellersJSONHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SellersJSONHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sellers_json_history provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellersJSONHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sellersJSONHistoryInsertCacheMut.RLock()
	cache, cached := sellersJSONHistoryInsertCache[key]
	sellersJSONHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sellersJSONHistoryAllColumns,
			sellersJSONHistoryColumnsWithDefault,
			sellersJSONHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sellersJSONHistoryType, sellersJSONHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sellersJSONHistoryType, sellersJSONHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sellers_json_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sellers_json_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sellers_json_history")
	}

	if !cached {
		sellersJSONHistoryInsertCacheMut.Lock()
		sellersJSONHistoryInsertCache[key] = cache
		sellersJSONHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SellersJSONHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SellersJSONHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sellersJSONHistoryUpdateCacheMut.RLock()
	cache, cached := sellersJSONHistoryUpdateCache[key]
	sellersJSONHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sellersJSONHistoryAllColumns,
			sellersJSONHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sellers_json_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sellers_json_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sellersJSONHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sellersJSONHistoryType, sellersJSONHistoryMapping, append(wl, sellersJSONHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sellers_json_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sellers_json_history")
	}

	if !cached {
		sellersJSONHistoryUpdateCacheMut.Lock()
		sellersJSONHistoryUpdateCache[key] = cache
		sellersJSONHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sellersJSONHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sellers_json_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sellers_json_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SellersJSONHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellersJSONHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sellers_json_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sellersJSONHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sellersJSONHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sellersJSONHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SellersJSONHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no sellers_json_history provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellersJSONHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sellersJSONHistoryUpsertCacheMut.RLock()
	cache, cached := sellersJSONHistoryUpsertCache[key]
	sellersJSONHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			sellersJSONHistoryAllColumns,
			sellersJSONHistoryColumnsWithDefault,
			sellersJSONHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sellersJSONHistoryAllColumns,
			sellersJSONHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sellers_json_history, could not build update column list")
		}

		ret := strmangle.SetComplement(sellersJSONHistoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sellersJSONHistoryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert sellers_json_history, could not build conflict column list")
			}

			conflict = make([]string, len(sellersJSONHistoryPrimaryKeyColumns))
			copy(conflict, sellersJSONHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sellers_json_history\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(sellersJSONHistoryType, sellersJSONHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sellersJSONHistoryType, sellersJSONHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sellers_json_history")
	}

	if !cached {
		sellersJSONHistoryUpsertCacheMut.Lock()
		sellersJSONHistoryUpsertCache[key] = cache
		sellersJSONHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SellersJSONHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SellersJSONHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SellersJSONHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sellersJSONHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"sellers_json_history\" WHERE \"competitor_name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sellers_json_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sellers_json_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sellersJSONHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sellersJSONHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sellers_json_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sellers_json_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SellersJSONHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sellersJSONHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellersJSONHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sellers_json_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellersJSONHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sellersJSONHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sellers_json_history")
	}

	if len(sellersJSONHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SellersJSONHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSellersJSONHistory(ctx, exec, o.CompetitorName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SellersJSONHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SellersJSONHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellersJSONHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sellers_json_history\".* FROM \"sellers_json_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellersJSONHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SellersJSONHistorySlice")
	}

	*o = slice

	return nil
}

// SellersJSONHistoryExists checks if the SellersJSONHistory row exists.
func SellersJSONHistoryExists(ctx context.Context, exec boil.ContextExecutor, competitorName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sellers_json_history\" where \"competitor_name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, competitorName)
	}
	row := exec.QueryRowContext(ctx, sql, competitorName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sellers_json_history exists")
	}

	return exists, nil
}

// Exists checks if the SellersJSONHistory row exists.
func (o *SellersJSONHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SellersJSONHistoryExists(ctx, exec, o.CompetitorName)
}
