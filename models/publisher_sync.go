// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PublisherSync is an object representing the database table.
type PublisherSync struct {
	Key      string `boil:"key" json:"key" toml:"key" yaml:"key"`
	HadError bool   `boil:"had_error" json:"had_error" toml:"had_error" yaml:"had_error"`

	R *publisherSyncR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publisherSyncL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublisherSyncColumns = struct {
	Key      string
	HadError string
}{
	Key:      "key",
	HadError: "had_error",
}

var PublisherSyncTableColumns = struct {
	Key      string
	HadError string
}{
	Key:      "publisher_sync.key",
	HadError: "publisher_sync.had_error",
}

// Generated where

var PublisherSyncWhere = struct {
	Key      whereHelperstring
	HadError whereHelperbool
}{
	Key:      whereHelperstring{field: "\"publisher_sync\".\"key\""},
	HadError: whereHelperbool{field: "\"publisher_sync\".\"had_error\""},
}

// PublisherSyncRels is where relationship names are stored.
var PublisherSyncRels = struct {
}{}

// publisherSyncR is where relationships are stored.
type publisherSyncR struct {
}

// NewStruct creates a new relationship struct
func (*publisherSyncR) NewStruct() *publisherSyncR {
	return &publisherSyncR{}
}

// publisherSyncL is where Load methods for each relationship are stored.
type publisherSyncL struct{}

var (
	publisherSyncAllColumns            = []string{"key", "had_error"}
	publisherSyncColumnsWithoutDefault = []string{"key", "had_error"}
	publisherSyncColumnsWithDefault    = []string{}
	publisherSyncPrimaryKeyColumns     = []string{"key"}
	publisherSyncGeneratedColumns      = []string{}
)

type (
	// PublisherSyncSlice is an alias for a slice of pointers to PublisherSync.
	// This should almost always be used instead of []PublisherSync.
	PublisherSyncSlice []*PublisherSync
	// PublisherSyncHook is the signature for custom PublisherSync hook methods
	PublisherSyncHook func(context.Context, boil.ContextExecutor, *PublisherSync) error

	publisherSyncQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publisherSyncType                 = reflect.TypeOf(&PublisherSync{})
	publisherSyncMapping              = queries.MakeStructMapping(publisherSyncType)
	publisherSyncPrimaryKeyMapping, _ = queries.BindMapping(publisherSyncType, publisherSyncMapping, publisherSyncPrimaryKeyColumns)
	publisherSyncInsertCacheMut       sync.RWMutex
	publisherSyncInsertCache          = make(map[string]insertCache)
	publisherSyncUpdateCacheMut       sync.RWMutex
	publisherSyncUpdateCache          = make(map[string]updateCache)
	publisherSyncUpsertCacheMut       sync.RWMutex
	publisherSyncUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publisherSyncAfterSelectMu sync.Mutex
var publisherSyncAfterSelectHooks []PublisherSyncHook

var publisherSyncBeforeInsertMu sync.Mutex
var publisherSyncBeforeInsertHooks []PublisherSyncHook
var publisherSyncAfterInsertMu sync.Mutex
var publisherSyncAfterInsertHooks []PublisherSyncHook

var publisherSyncBeforeUpdateMu sync.Mutex
var publisherSyncBeforeUpdateHooks []PublisherSyncHook
var publisherSyncAfterUpdateMu sync.Mutex
var publisherSyncAfterUpdateHooks []PublisherSyncHook

var publisherSyncBeforeDeleteMu sync.Mutex
var publisherSyncBeforeDeleteHooks []PublisherSyncHook
var publisherSyncAfterDeleteMu sync.Mutex
var publisherSyncAfterDeleteHooks []PublisherSyncHook

var publisherSyncBeforeUpsertMu sync.Mutex
var publisherSyncBeforeUpsertHooks []PublisherSyncHook
var publisherSyncAfterUpsertMu sync.Mutex
var publisherSyncAfterUpsertHooks []PublisherSyncHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublisherSync) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublisherSync) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublisherSync) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublisherSync) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublisherSync) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublisherSync) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublisherSync) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublisherSync) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublisherSync) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherSyncAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublisherSyncHook registers your hook function for all future operations.
func AddPublisherSyncHook(hookPoint boil.HookPoint, publisherSyncHook PublisherSyncHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		publisherSyncAfterSelectMu.Lock()
		publisherSyncAfterSelectHooks = append(publisherSyncAfterSelectHooks, publisherSyncHook)
		publisherSyncAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		publisherSyncBeforeInsertMu.Lock()
		publisherSyncBeforeInsertHooks = append(publisherSyncBeforeInsertHooks, publisherSyncHook)
		publisherSyncBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		publisherSyncAfterInsertMu.Lock()
		publisherSyncAfterInsertHooks = append(publisherSyncAfterInsertHooks, publisherSyncHook)
		publisherSyncAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		publisherSyncBeforeUpdateMu.Lock()
		publisherSyncBeforeUpdateHooks = append(publisherSyncBeforeUpdateHooks, publisherSyncHook)
		publisherSyncBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		publisherSyncAfterUpdateMu.Lock()
		publisherSyncAfterUpdateHooks = append(publisherSyncAfterUpdateHooks, publisherSyncHook)
		publisherSyncAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		publisherSyncBeforeDeleteMu.Lock()
		publisherSyncBeforeDeleteHooks = append(publisherSyncBeforeDeleteHooks, publisherSyncHook)
		publisherSyncBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		publisherSyncAfterDeleteMu.Lock()
		publisherSyncAfterDeleteHooks = append(publisherSyncAfterDeleteHooks, publisherSyncHook)
		publisherSyncAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		publisherSyncBeforeUpsertMu.Lock()
		publisherSyncBeforeUpsertHooks = append(publisherSyncBeforeUpsertHooks, publisherSyncHook)
		publisherSyncBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		publisherSyncAfterUpsertMu.Lock()
		publisherSyncAfterUpsertHooks = append(publisherSyncAfterUpsertHooks, publisherSyncHook)
		publisherSyncAfterUpsertMu.Unlock()
	}
}

// One returns a single publisherSync record from the query.
func (q publisherSyncQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PublisherSync, error) {
	o := &PublisherSync{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for publisher_sync")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PublisherSync records from the query.
func (q publisherSyncQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublisherSyncSlice, error) {
	var o []*PublisherSync

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PublisherSync slice")
	}

	if len(publisherSyncAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PublisherSync records in the query.
func (q publisherSyncQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count publisher_sync rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publisherSyncQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if publisher_sync exists")
	}

	return count > 0, nil
}

// PublisherSyncs retrieves all the records using an executor.
func PublisherSyncs(mods ...qm.QueryMod) publisherSyncQuery {
	mods = append(mods, qm.From("\"publisher_sync\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"publisher_sync\".*"})
	}

	return publisherSyncQuery{q}
}

// FindPublisherSync retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublisherSync(ctx context.Context, exec boil.ContextExecutor, key string, selectCols ...string) (*PublisherSync, error) {
	publisherSyncObj := &PublisherSync{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"publisher_sync\" where \"key\"=$1", sel,
	)

	q := queries.Raw(query, key)

	err := q.Bind(ctx, exec, publisherSyncObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from publisher_sync")
	}

	if err = publisherSyncObj.doAfterSelectHooks(ctx, exec); err != nil {
		return publisherSyncObj, err
	}

	return publisherSyncObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublisherSync) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publisher_sync provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherSyncColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publisherSyncInsertCacheMut.RLock()
	cache, cached := publisherSyncInsertCache[key]
	publisherSyncInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publisherSyncAllColumns,
			publisherSyncColumnsWithDefault,
			publisherSyncColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publisherSyncType, publisherSyncMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publisherSyncType, publisherSyncMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"publisher_sync\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"publisher_sync\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into publisher_sync")
	}

	if !cached {
		publisherSyncInsertCacheMut.Lock()
		publisherSyncInsertCache[key] = cache
		publisherSyncInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PublisherSync.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublisherSync) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publisherSyncUpdateCacheMut.RLock()
	cache, cached := publisherSyncUpdateCache[key]
	publisherSyncUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publisherSyncAllColumns,
			publisherSyncPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update publisher_sync, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"publisher_sync\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publisherSyncPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publisherSyncType, publisherSyncMapping, append(wl, publisherSyncPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update publisher_sync row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for publisher_sync")
	}

	if !cached {
		publisherSyncUpdateCacheMut.Lock()
		publisherSyncUpdateCache[key] = cache
		publisherSyncUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publisherSyncQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for publisher_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for publisher_sync")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublisherSyncSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"publisher_sync\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publisherSyncPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in publisherSync slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all publisherSync")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublisherSync) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no publisher_sync provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherSyncColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publisherSyncUpsertCacheMut.RLock()
	cache, cached := publisherSyncUpsertCache[key]
	publisherSyncUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			publisherSyncAllColumns,
			publisherSyncColumnsWithDefault,
			publisherSyncColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			publisherSyncAllColumns,
			publisherSyncPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert publisher_sync, could not build update column list")
		}

		ret := strmangle.SetComplement(publisherSyncAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(publisherSyncPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert publisher_sync, could not build conflict column list")
			}

			conflict = make([]string, len(publisherSyncPrimaryKeyColumns))
			copy(conflict, publisherSyncPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"publisher_sync\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(publisherSyncType, publisherSyncMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publisherSyncType, publisherSyncMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert publisher_sync")
	}

	if !cached {
		publisherSyncUpsertCacheMut.Lock()
		publisherSyncUpsertCache[key] = cache
		publisherSyncUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PublisherSync record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublisherSync) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PublisherSync provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publisherSyncPrimaryKeyMapping)
	sql := "DELETE FROM \"publisher_sync\" WHERE \"key\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from publisher_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for publisher_sync")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publisherSyncQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no publisherSyncQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisher_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher_sync")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublisherSyncSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publisherSyncBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"publisher_sync\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publisherSyncPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisherSync slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher_sync")
	}

	if len(publisherSyncAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublisherSync) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublisherSync(ctx, exec, o.Key)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublisherSyncSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublisherSyncSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"publisher_sync\".* FROM \"publisher_sync\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publisherSyncPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PublisherSyncSlice")
	}

	*o = slice

	return nil
}

// PublisherSyncExists checks if the PublisherSync row exists.
func PublisherSyncExists(ctx context.Context, exec boil.ContextExecutor, key string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"publisher_sync\" where \"key\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, key)
	}
	row := exec.QueryRowContext(ctx, sql, key)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if publisher_sync exists")
	}

	return exists, nil
}

// Exists checks if the PublisherSync row exists.
func (o *PublisherSync) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PublisherSyncExists(ctx, exec, o.Key)
}
