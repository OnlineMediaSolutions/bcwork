// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NBSupplyHourly is an object representing the database table.
type NBSupplyHourly struct {
	Time                 time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	PublisherID          string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain               string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Os                   string    `boil:"os" json:"os" toml:"os" yaml:"os"`
	Country              string    `boil:"country" json:"country" toml:"country" yaml:"country"`
	DeviceType           string    `boil:"device_type" json:"device_type" toml:"device_type" yaml:"device_type"`
	PlacementType        string    `boil:"placement_type" json:"placement_type" toml:"placement_type" yaml:"placement_type"`
	Size                 string    `boil:"size" json:"size" toml:"size" yaml:"size"`
	RequestType          string    `boil:"request_type" json:"request_type" toml:"request_type" yaml:"request_type"`
	PaymentType          string    `boil:"payment_type" json:"payment_type" toml:"payment_type" yaml:"payment_type"`
	Datacenter           string    `boil:"datacenter" json:"datacenter" toml:"datacenter" yaml:"datacenter"`
	BidRequests          int64     `boil:"bid_requests" json:"bid_requests" toml:"bid_requests" yaml:"bid_requests"`
	BidResponses         int64     `boil:"bid_responses" json:"bid_responses" toml:"bid_responses" yaml:"bid_responses"`
	SoldImpressions      int64     `boil:"sold_impressions" json:"sold_impressions" toml:"sold_impressions" yaml:"sold_impressions"`
	PublisherImpressions int64     `boil:"publisher_impressions" json:"publisher_impressions" toml:"publisher_impressions" yaml:"publisher_impressions"`
	Cost                 float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Revenue              float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	AvgBidPrice          float64   `boil:"avg_bid_price" json:"avg_bid_price" toml:"avg_bid_price" yaml:"avg_bid_price"`
	MissedOpportunities  int64     `boil:"missed_opportunities" json:"missed_opportunities" toml:"missed_opportunities" yaml:"missed_opportunities"`
	DemandPartnerFee     float64   `boil:"demand_partner_fee" json:"demand_partner_fee" toml:"demand_partner_fee" yaml:"demand_partner_fee"`
	DataImpressions      int64     `boil:"data_impressions" json:"data_impressions" toml:"data_impressions" yaml:"data_impressions"`
	DataFee              float64   `boil:"data_fee" json:"data_fee" toml:"data_fee" yaml:"data_fee"`

	R *nbSupplyHourlyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nbSupplyHourlyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NBSupplyHourlyColumns = struct {
	Time                 string
	PublisherID          string
	Domain               string
	Os                   string
	Country              string
	DeviceType           string
	PlacementType        string
	Size                 string
	RequestType          string
	PaymentType          string
	Datacenter           string
	BidRequests          string
	BidResponses         string
	SoldImpressions      string
	PublisherImpressions string
	Cost                 string
	Revenue              string
	AvgBidPrice          string
	MissedOpportunities  string
	DemandPartnerFee     string
	DataImpressions      string
	DataFee              string
}{
	Time:                 "time",
	PublisherID:          "publisher_id",
	Domain:               "domain",
	Os:                   "os",
	Country:              "country",
	DeviceType:           "device_type",
	PlacementType:        "placement_type",
	Size:                 "size",
	RequestType:          "request_type",
	PaymentType:          "payment_type",
	Datacenter:           "datacenter",
	BidRequests:          "bid_requests",
	BidResponses:         "bid_responses",
	SoldImpressions:      "sold_impressions",
	PublisherImpressions: "publisher_impressions",
	Cost:                 "cost",
	Revenue:              "revenue",
	AvgBidPrice:          "avg_bid_price",
	MissedOpportunities:  "missed_opportunities",
	DemandPartnerFee:     "demand_partner_fee",
	DataImpressions:      "data_impressions",
	DataFee:              "data_fee",
}

var NBSupplyHourlyTableColumns = struct {
	Time                 string
	PublisherID          string
	Domain               string
	Os                   string
	Country              string
	DeviceType           string
	PlacementType        string
	Size                 string
	RequestType          string
	PaymentType          string
	Datacenter           string
	BidRequests          string
	BidResponses         string
	SoldImpressions      string
	PublisherImpressions string
	Cost                 string
	Revenue              string
	AvgBidPrice          string
	MissedOpportunities  string
	DemandPartnerFee     string
	DataImpressions      string
	DataFee              string
}{
	Time:                 "nb_supply_hourly.time",
	PublisherID:          "nb_supply_hourly.publisher_id",
	Domain:               "nb_supply_hourly.domain",
	Os:                   "nb_supply_hourly.os",
	Country:              "nb_supply_hourly.country",
	DeviceType:           "nb_supply_hourly.device_type",
	PlacementType:        "nb_supply_hourly.placement_type",
	Size:                 "nb_supply_hourly.size",
	RequestType:          "nb_supply_hourly.request_type",
	PaymentType:          "nb_supply_hourly.payment_type",
	Datacenter:           "nb_supply_hourly.datacenter",
	BidRequests:          "nb_supply_hourly.bid_requests",
	BidResponses:         "nb_supply_hourly.bid_responses",
	SoldImpressions:      "nb_supply_hourly.sold_impressions",
	PublisherImpressions: "nb_supply_hourly.publisher_impressions",
	Cost:                 "nb_supply_hourly.cost",
	Revenue:              "nb_supply_hourly.revenue",
	AvgBidPrice:          "nb_supply_hourly.avg_bid_price",
	MissedOpportunities:  "nb_supply_hourly.missed_opportunities",
	DemandPartnerFee:     "nb_supply_hourly.demand_partner_fee",
	DataImpressions:      "nb_supply_hourly.data_impressions",
	DataFee:              "nb_supply_hourly.data_fee",
}

// Generated where

var NBSupplyHourlyWhere = struct {
	Time                 whereHelpertime_Time
	PublisherID          whereHelperstring
	Domain               whereHelperstring
	Os                   whereHelperstring
	Country              whereHelperstring
	DeviceType           whereHelperstring
	PlacementType        whereHelperstring
	Size                 whereHelperstring
	RequestType          whereHelperstring
	PaymentType          whereHelperstring
	Datacenter           whereHelperstring
	BidRequests          whereHelperint64
	BidResponses         whereHelperint64
	SoldImpressions      whereHelperint64
	PublisherImpressions whereHelperint64
	Cost                 whereHelperfloat64
	Revenue              whereHelperfloat64
	AvgBidPrice          whereHelperfloat64
	MissedOpportunities  whereHelperint64
	DemandPartnerFee     whereHelperfloat64
	DataImpressions      whereHelperint64
	DataFee              whereHelperfloat64
}{
	Time:                 whereHelpertime_Time{field: "\"nb_supply_hourly\".\"time\""},
	PublisherID:          whereHelperstring{field: "\"nb_supply_hourly\".\"publisher_id\""},
	Domain:               whereHelperstring{field: "\"nb_supply_hourly\".\"domain\""},
	Os:                   whereHelperstring{field: "\"nb_supply_hourly\".\"os\""},
	Country:              whereHelperstring{field: "\"nb_supply_hourly\".\"country\""},
	DeviceType:           whereHelperstring{field: "\"nb_supply_hourly\".\"device_type\""},
	PlacementType:        whereHelperstring{field: "\"nb_supply_hourly\".\"placement_type\""},
	Size:                 whereHelperstring{field: "\"nb_supply_hourly\".\"size\""},
	RequestType:          whereHelperstring{field: "\"nb_supply_hourly\".\"request_type\""},
	PaymentType:          whereHelperstring{field: "\"nb_supply_hourly\".\"payment_type\""},
	Datacenter:           whereHelperstring{field: "\"nb_supply_hourly\".\"datacenter\""},
	BidRequests:          whereHelperint64{field: "\"nb_supply_hourly\".\"bid_requests\""},
	BidResponses:         whereHelperint64{field: "\"nb_supply_hourly\".\"bid_responses\""},
	SoldImpressions:      whereHelperint64{field: "\"nb_supply_hourly\".\"sold_impressions\""},
	PublisherImpressions: whereHelperint64{field: "\"nb_supply_hourly\".\"publisher_impressions\""},
	Cost:                 whereHelperfloat64{field: "\"nb_supply_hourly\".\"cost\""},
	Revenue:              whereHelperfloat64{field: "\"nb_supply_hourly\".\"revenue\""},
	AvgBidPrice:          whereHelperfloat64{field: "\"nb_supply_hourly\".\"avg_bid_price\""},
	MissedOpportunities:  whereHelperint64{field: "\"nb_supply_hourly\".\"missed_opportunities\""},
	DemandPartnerFee:     whereHelperfloat64{field: "\"nb_supply_hourly\".\"demand_partner_fee\""},
	DataImpressions:      whereHelperint64{field: "\"nb_supply_hourly\".\"data_impressions\""},
	DataFee:              whereHelperfloat64{field: "\"nb_supply_hourly\".\"data_fee\""},
}

// NBSupplyHourlyRels is where relationship names are stored.
var NBSupplyHourlyRels = struct {
}{}

// nbSupplyHourlyR is where relationships are stored.
type nbSupplyHourlyR struct {
}

// NewStruct creates a new relationship struct
func (*nbSupplyHourlyR) NewStruct() *nbSupplyHourlyR {
	return &nbSupplyHourlyR{}
}

// nbSupplyHourlyL is where Load methods for each relationship are stored.
type nbSupplyHourlyL struct{}

var (
	nbSupplyHourlyAllColumns            = []string{"time", "publisher_id", "domain", "os", "country", "device_type", "placement_type", "size", "request_type", "payment_type", "datacenter", "bid_requests", "bid_responses", "sold_impressions", "publisher_impressions", "cost", "revenue", "avg_bid_price", "missed_opportunities", "demand_partner_fee", "data_impressions", "data_fee"}
	nbSupplyHourlyColumnsWithoutDefault = []string{"time", "publisher_id"}
	nbSupplyHourlyColumnsWithDefault    = []string{"domain", "os", "country", "device_type", "placement_type", "size", "request_type", "payment_type", "datacenter", "bid_requests", "bid_responses", "sold_impressions", "publisher_impressions", "cost", "revenue", "avg_bid_price", "missed_opportunities", "demand_partner_fee", "data_impressions", "data_fee"}
	nbSupplyHourlyPrimaryKeyColumns     = []string{"time", "publisher_id", "domain", "os", "country", "device_type", "placement_type", "size", "request_type", "payment_type", "datacenter"}
	nbSupplyHourlyGeneratedColumns      = []string{}
)

type (
	// NBSupplyHourlySlice is an alias for a slice of pointers to NBSupplyHourly.
	// This should almost always be used instead of []NBSupplyHourly.
	NBSupplyHourlySlice []*NBSupplyHourly
	// NBSupplyHourlyHook is the signature for custom NBSupplyHourly hook methods
	NBSupplyHourlyHook func(context.Context, boil.ContextExecutor, *NBSupplyHourly) error

	nbSupplyHourlyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nbSupplyHourlyType                 = reflect.TypeOf(&NBSupplyHourly{})
	nbSupplyHourlyMapping              = queries.MakeStructMapping(nbSupplyHourlyType)
	nbSupplyHourlyPrimaryKeyMapping, _ = queries.BindMapping(nbSupplyHourlyType, nbSupplyHourlyMapping, nbSupplyHourlyPrimaryKeyColumns)
	nbSupplyHourlyInsertCacheMut       sync.RWMutex
	nbSupplyHourlyInsertCache          = make(map[string]insertCache)
	nbSupplyHourlyUpdateCacheMut       sync.RWMutex
	nbSupplyHourlyUpdateCache          = make(map[string]updateCache)
	nbSupplyHourlyUpsertCacheMut       sync.RWMutex
	nbSupplyHourlyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nbSupplyHourlyAfterSelectHooks []NBSupplyHourlyHook

var nbSupplyHourlyBeforeInsertHooks []NBSupplyHourlyHook
var nbSupplyHourlyAfterInsertHooks []NBSupplyHourlyHook

var nbSupplyHourlyBeforeUpdateHooks []NBSupplyHourlyHook
var nbSupplyHourlyAfterUpdateHooks []NBSupplyHourlyHook

var nbSupplyHourlyBeforeDeleteHooks []NBSupplyHourlyHook
var nbSupplyHourlyAfterDeleteHooks []NBSupplyHourlyHook

var nbSupplyHourlyBeforeUpsertHooks []NBSupplyHourlyHook
var nbSupplyHourlyAfterUpsertHooks []NBSupplyHourlyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NBSupplyHourly) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NBSupplyHourly) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NBSupplyHourly) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NBSupplyHourly) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NBSupplyHourly) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NBSupplyHourly) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NBSupplyHourly) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NBSupplyHourly) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NBSupplyHourly) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbSupplyHourlyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNBSupplyHourlyHook registers your hook function for all future operations.
func AddNBSupplyHourlyHook(hookPoint boil.HookPoint, nbSupplyHourlyHook NBSupplyHourlyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		nbSupplyHourlyAfterSelectHooks = append(nbSupplyHourlyAfterSelectHooks, nbSupplyHourlyHook)
	case boil.BeforeInsertHook:
		nbSupplyHourlyBeforeInsertHooks = append(nbSupplyHourlyBeforeInsertHooks, nbSupplyHourlyHook)
	case boil.AfterInsertHook:
		nbSupplyHourlyAfterInsertHooks = append(nbSupplyHourlyAfterInsertHooks, nbSupplyHourlyHook)
	case boil.BeforeUpdateHook:
		nbSupplyHourlyBeforeUpdateHooks = append(nbSupplyHourlyBeforeUpdateHooks, nbSupplyHourlyHook)
	case boil.AfterUpdateHook:
		nbSupplyHourlyAfterUpdateHooks = append(nbSupplyHourlyAfterUpdateHooks, nbSupplyHourlyHook)
	case boil.BeforeDeleteHook:
		nbSupplyHourlyBeforeDeleteHooks = append(nbSupplyHourlyBeforeDeleteHooks, nbSupplyHourlyHook)
	case boil.AfterDeleteHook:
		nbSupplyHourlyAfterDeleteHooks = append(nbSupplyHourlyAfterDeleteHooks, nbSupplyHourlyHook)
	case boil.BeforeUpsertHook:
		nbSupplyHourlyBeforeUpsertHooks = append(nbSupplyHourlyBeforeUpsertHooks, nbSupplyHourlyHook)
	case boil.AfterUpsertHook:
		nbSupplyHourlyAfterUpsertHooks = append(nbSupplyHourlyAfterUpsertHooks, nbSupplyHourlyHook)
	}
}

// One returns a single nbSupplyHourly record from the query.
func (q nbSupplyHourlyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NBSupplyHourly, error) {
	o := &NBSupplyHourly{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nb_supply_hourly")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NBSupplyHourly records from the query.
func (q nbSupplyHourlyQuery) All(ctx context.Context, exec boil.ContextExecutor) (NBSupplyHourlySlice, error) {
	var o []*NBSupplyHourly

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NBSupplyHourly slice")
	}

	if len(nbSupplyHourlyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NBSupplyHourly records in the query.
func (q nbSupplyHourlyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nb_supply_hourly rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nbSupplyHourlyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nb_supply_hourly exists")
	}

	return count > 0, nil
}

// NBSupplyHourlies retrieves all the records using an executor.
func NBSupplyHourlies(mods ...qm.QueryMod) nbSupplyHourlyQuery {
	mods = append(mods, qm.From("\"nb_supply_hourly\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"nb_supply_hourly\".*"})
	}

	return nbSupplyHourlyQuery{q}
}

// FindNBSupplyHourly retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNBSupplyHourly(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, domain string, os string, country string, deviceType string, placementType string, size string, requestType string, paymentType string, datacenter string, selectCols ...string) (*NBSupplyHourly, error) {
	nbSupplyHourlyObj := &NBSupplyHourly{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nb_supply_hourly\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"domain\"=$3 AND \"os\"=$4 AND \"country\"=$5 AND \"device_type\"=$6 AND \"placement_type\"=$7 AND \"size\"=$8 AND \"request_type\"=$9 AND \"payment_type\"=$10 AND \"datacenter\"=$11", sel,
	)

	q := queries.Raw(query, time, publisherID, domain, os, country, deviceType, placementType, size, requestType, paymentType, datacenter)

	err := q.Bind(ctx, exec, nbSupplyHourlyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nb_supply_hourly")
	}

	if err = nbSupplyHourlyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return nbSupplyHourlyObj, err
	}

	return nbSupplyHourlyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NBSupplyHourly) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nb_supply_hourly provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nbSupplyHourlyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nbSupplyHourlyInsertCacheMut.RLock()
	cache, cached := nbSupplyHourlyInsertCache[key]
	nbSupplyHourlyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nbSupplyHourlyAllColumns,
			nbSupplyHourlyColumnsWithDefault,
			nbSupplyHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nbSupplyHourlyType, nbSupplyHourlyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nbSupplyHourlyType, nbSupplyHourlyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nb_supply_hourly\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nb_supply_hourly\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nb_supply_hourly")
	}

	if !cached {
		nbSupplyHourlyInsertCacheMut.Lock()
		nbSupplyHourlyInsertCache[key] = cache
		nbSupplyHourlyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NBSupplyHourly.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NBSupplyHourly) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nbSupplyHourlyUpdateCacheMut.RLock()
	cache, cached := nbSupplyHourlyUpdateCache[key]
	nbSupplyHourlyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nbSupplyHourlyAllColumns,
			nbSupplyHourlyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nb_supply_hourly, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nb_supply_hourly\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nbSupplyHourlyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nbSupplyHourlyType, nbSupplyHourlyMapping, append(wl, nbSupplyHourlyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nb_supply_hourly row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nb_supply_hourly")
	}

	if !cached {
		nbSupplyHourlyUpdateCacheMut.Lock()
		nbSupplyHourlyUpdateCache[key] = cache
		nbSupplyHourlyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nbSupplyHourlyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nb_supply_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nb_supply_hourly")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NBSupplyHourlySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nbSupplyHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nb_supply_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nbSupplyHourlyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nbSupplyHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nbSupplyHourly")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NBSupplyHourly) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nb_supply_hourly provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nbSupplyHourlyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nbSupplyHourlyUpsertCacheMut.RLock()
	cache, cached := nbSupplyHourlyUpsertCache[key]
	nbSupplyHourlyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			nbSupplyHourlyAllColumns,
			nbSupplyHourlyColumnsWithDefault,
			nbSupplyHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			nbSupplyHourlyAllColumns,
			nbSupplyHourlyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert nb_supply_hourly, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(nbSupplyHourlyPrimaryKeyColumns))
			copy(conflict, nbSupplyHourlyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"nb_supply_hourly\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(nbSupplyHourlyType, nbSupplyHourlyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nbSupplyHourlyType, nbSupplyHourlyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert nb_supply_hourly")
	}

	if !cached {
		nbSupplyHourlyUpsertCacheMut.Lock()
		nbSupplyHourlyUpsertCache[key] = cache
		nbSupplyHourlyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NBSupplyHourly record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NBSupplyHourly) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NBSupplyHourly provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nbSupplyHourlyPrimaryKeyMapping)
	sql := "DELETE FROM \"nb_supply_hourly\" WHERE \"time\"=$1 AND \"publisher_id\"=$2 AND \"domain\"=$3 AND \"os\"=$4 AND \"country\"=$5 AND \"device_type\"=$6 AND \"placement_type\"=$7 AND \"size\"=$8 AND \"request_type\"=$9 AND \"payment_type\"=$10 AND \"datacenter\"=$11"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nb_supply_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nb_supply_hourly")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nbSupplyHourlyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nbSupplyHourlyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nb_supply_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nb_supply_hourly")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NBSupplyHourlySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nbSupplyHourlyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nbSupplyHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nb_supply_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nbSupplyHourlyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nbSupplyHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nb_supply_hourly")
	}

	if len(nbSupplyHourlyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NBSupplyHourly) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNBSupplyHourly(ctx, exec, o.Time, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType, o.PlacementType, o.Size, o.RequestType, o.PaymentType, o.Datacenter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NBSupplyHourlySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NBSupplyHourlySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nbSupplyHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nb_supply_hourly\".* FROM \"nb_supply_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nbSupplyHourlyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NBSupplyHourlySlice")
	}

	*o = slice

	return nil
}

// NBSupplyHourlyExists checks if the NBSupplyHourly row exists.
func NBSupplyHourlyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, domain string, os string, country string, deviceType string, placementType string, size string, requestType string, paymentType string, datacenter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nb_supply_hourly\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"domain\"=$3 AND \"os\"=$4 AND \"country\"=$5 AND \"device_type\"=$6 AND \"placement_type\"=$7 AND \"size\"=$8 AND \"request_type\"=$9 AND \"payment_type\"=$10 AND \"datacenter\"=$11 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, publisherID, domain, os, country, deviceType, placementType, size, requestType, paymentType, datacenter)
	}
	row := exec.QueryRowContext(ctx, sql, time, publisherID, domain, os, country, deviceType, placementType, size, requestType, paymentType, datacenter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nb_supply_hourly exists")
	}

	return exists, nil
}

// Exists checks if the NBSupplyHourly row exists.
func (o *NBSupplyHourly) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NBSupplyHourlyExists(ctx, exec, o.Time, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType, o.PlacementType, o.Size, o.RequestType, o.PaymentType, o.Datacenter)
}
