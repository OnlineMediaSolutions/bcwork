// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Configuration is an object representing the database table.
type Configuration struct {
	Key         string      `boil:"key" json:"key" toml:"key" yaml:"key"`
	Value       string      `boil:"value" json:"value" toml:"value" yaml:"value"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *configurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigurationColumns = struct {
	Key         string
	Value       string
	Description string
	UpdatedAt   string
	CreatedAt   string
}{
	Key:         "key",
	Value:       "value",
	Description: "description",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var ConfigurationTableColumns = struct {
	Key         string
	Value       string
	Description string
	UpdatedAt   string
	CreatedAt   string
}{
	Key:         "configuration.key",
	Value:       "configuration.value",
	Description: "configuration.description",
	UpdatedAt:   "configuration.updated_at",
	CreatedAt:   "configuration.created_at",
}

// Generated where

var ConfigurationWhere = struct {
	Key         whereHelperstring
	Value       whereHelperstring
	Description whereHelpernull_String
	UpdatedAt   whereHelpernull_Time
	CreatedAt   whereHelpernull_Time
}{
	Key:         whereHelperstring{field: "\"configuration\".\"key\""},
	Value:       whereHelperstring{field: "\"configuration\".\"value\""},
	Description: whereHelpernull_String{field: "\"configuration\".\"description\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"configuration\".\"updated_at\""},
	CreatedAt:   whereHelpernull_Time{field: "\"configuration\".\"created_at\""},
}

// ConfigurationRels is where relationship names are stored.
var ConfigurationRels = struct {
}{}

// configurationR is where relationships are stored.
type configurationR struct {
}

// NewStruct creates a new relationship struct
func (*configurationR) NewStruct() *configurationR {
	return &configurationR{}
}

// configurationL is where Load methods for each relationship are stored.
type configurationL struct{}

var (
	configurationAllColumns            = []string{"key", "value", "description", "updated_at", "created_at"}
	configurationColumnsWithoutDefault = []string{"key", "value"}
	configurationColumnsWithDefault    = []string{"description", "updated_at", "created_at"}
	configurationPrimaryKeyColumns     = []string{"key"}
	configurationGeneratedColumns      = []string{}
)

type (
	// ConfigurationSlice is an alias for a slice of pointers to Configuration.
	// This should almost always be used instead of []Configuration.
	ConfigurationSlice []*Configuration
	// ConfigurationHook is the signature for custom Configuration hook methods
	ConfigurationHook func(context.Context, boil.ContextExecutor, *Configuration) error

	configurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configurationType                 = reflect.TypeOf(&Configuration{})
	configurationMapping              = queries.MakeStructMapping(configurationType)
	configurationPrimaryKeyMapping, _ = queries.BindMapping(configurationType, configurationMapping, configurationPrimaryKeyColumns)
	configurationInsertCacheMut       sync.RWMutex
	configurationInsertCache          = make(map[string]insertCache)
	configurationUpdateCacheMut       sync.RWMutex
	configurationUpdateCache          = make(map[string]updateCache)
	configurationUpsertCacheMut       sync.RWMutex
	configurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configurationAfterSelectMu sync.Mutex
var configurationAfterSelectHooks []ConfigurationHook

var configurationBeforeInsertMu sync.Mutex
var configurationBeforeInsertHooks []ConfigurationHook
var configurationAfterInsertMu sync.Mutex
var configurationAfterInsertHooks []ConfigurationHook

var configurationBeforeUpdateMu sync.Mutex
var configurationBeforeUpdateHooks []ConfigurationHook
var configurationAfterUpdateMu sync.Mutex
var configurationAfterUpdateHooks []ConfigurationHook

var configurationBeforeDeleteMu sync.Mutex
var configurationBeforeDeleteHooks []ConfigurationHook
var configurationAfterDeleteMu sync.Mutex
var configurationAfterDeleteHooks []ConfigurationHook

var configurationBeforeUpsertMu sync.Mutex
var configurationBeforeUpsertHooks []ConfigurationHook
var configurationAfterUpsertMu sync.Mutex
var configurationAfterUpsertHooks []ConfigurationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Configuration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Configuration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Configuration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Configuration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Configuration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Configuration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Configuration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Configuration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Configuration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigurationHook registers your hook function for all future operations.
func AddConfigurationHook(hookPoint boil.HookPoint, configurationHook ConfigurationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		configurationAfterSelectMu.Lock()
		configurationAfterSelectHooks = append(configurationAfterSelectHooks, configurationHook)
		configurationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		configurationBeforeInsertMu.Lock()
		configurationBeforeInsertHooks = append(configurationBeforeInsertHooks, configurationHook)
		configurationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		configurationAfterInsertMu.Lock()
		configurationAfterInsertHooks = append(configurationAfterInsertHooks, configurationHook)
		configurationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		configurationBeforeUpdateMu.Lock()
		configurationBeforeUpdateHooks = append(configurationBeforeUpdateHooks, configurationHook)
		configurationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		configurationAfterUpdateMu.Lock()
		configurationAfterUpdateHooks = append(configurationAfterUpdateHooks, configurationHook)
		configurationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		configurationBeforeDeleteMu.Lock()
		configurationBeforeDeleteHooks = append(configurationBeforeDeleteHooks, configurationHook)
		configurationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		configurationAfterDeleteMu.Lock()
		configurationAfterDeleteHooks = append(configurationAfterDeleteHooks, configurationHook)
		configurationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		configurationBeforeUpsertMu.Lock()
		configurationBeforeUpsertHooks = append(configurationBeforeUpsertHooks, configurationHook)
		configurationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		configurationAfterUpsertMu.Lock()
		configurationAfterUpsertHooks = append(configurationAfterUpsertHooks, configurationHook)
		configurationAfterUpsertMu.Unlock()
	}
}

// One returns a single configuration record from the query.
func (q configurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Configuration, error) {
	o := &Configuration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for configuration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Configuration records from the query.
func (q configurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConfigurationSlice, error) {
	var o []*Configuration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Configuration slice")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Configuration records in the query.
func (q configurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count configuration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q configurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if configuration exists")
	}

	return count > 0, nil
}

// Configurations retrieves all the records using an executor.
func Configurations(mods ...qm.QueryMod) configurationQuery {
	mods = append(mods, qm.From("\"configuration\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"configuration\".*"})
	}

	return configurationQuery{q}
}

// FindConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfiguration(ctx context.Context, exec boil.ContextExecutor, key string, selectCols ...string) (*Configuration, error) {
	configurationObj := &Configuration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"configuration\" where \"key\"=$1", sel,
	)

	q := queries.Raw(query, key)

	err := q.Bind(ctx, exec, configurationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from configuration")
	}

	if err = configurationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return configurationObj, err
	}

	return configurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Configuration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no configuration provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configurationInsertCacheMut.RLock()
	cache, cached := configurationInsertCache[key]
	configurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configurationAllColumns,
			configurationColumnsWithDefault,
			configurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configurationType, configurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configurationType, configurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"configuration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"configuration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into configuration")
	}

	if !cached {
		configurationInsertCacheMut.Lock()
		configurationInsertCache[key] = cache
		configurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Configuration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Configuration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configurationUpdateCacheMut.RLock()
	cache, cached := configurationUpdateCache[key]
	configurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configurationAllColumns,
			configurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update configuration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configurationType, configurationMapping, append(wl, configurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update configuration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for configuration")
	}

	if !cached {
		configurationUpdateCacheMut.Lock()
		configurationUpdateCache[key] = cache
		configurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q configurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for configuration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configurationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in configuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all configuration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Configuration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no configuration provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configurationUpsertCacheMut.RLock()
	cache, cached := configurationUpsertCache[key]
	configurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			configurationAllColumns,
			configurationColumnsWithDefault,
			configurationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			configurationAllColumns,
			configurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert configuration, could not build update column list")
		}

		ret := strmangle.SetComplement(configurationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(configurationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert configuration, could not build conflict column list")
			}

			conflict = make([]string, len(configurationPrimaryKeyColumns))
			copy(conflict, configurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"configuration\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(configurationType, configurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configurationType, configurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert configuration")
	}

	if !cached {
		configurationUpsertCacheMut.Lock()
		configurationUpsertCache[key] = cache
		configurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Configuration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Configuration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Configuration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configurationPrimaryKeyMapping)
	sql := "DELETE FROM \"configuration\" WHERE \"key\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for configuration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q configurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no configurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for configuration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configurationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from configuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for configuration")
	}

	if len(configurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Configuration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConfiguration(ctx, exec, o.Key)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"configuration\".* FROM \"configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigurationSlice")
	}

	*o = slice

	return nil
}

// ConfigurationExists checks if the Configuration row exists.
func ConfigurationExists(ctx context.Context, exec boil.ContextExecutor, key string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"configuration\" where \"key\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, key)
	}
	row := exec.QueryRowContext(ctx, sql, key)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if configuration exists")
	}

	return exists, nil
}

// Exists checks if the Configuration row exists.
func (o *Configuration) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ConfigurationExists(ctx, exec, o.Key)
}
