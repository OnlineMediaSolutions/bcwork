// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GlobalSearchView is an object representing the database table.
type GlobalSearchView struct {
	PublisherID       null.String `boil:"publisher_id" json:"publisher_id,omitempty" toml:"publisher_id" yaml:"publisher_id,omitempty"`
	PublisherName     null.String `boil:"publisher_name" json:"publisher_name,omitempty" toml:"publisher_name" yaml:"publisher_name,omitempty"`
	Domain            null.String `boil:"domain" json:"domain,omitempty" toml:"domain" yaml:"domain,omitempty"`
	DemandPartnerName null.String `boil:"demand_partner_name" json:"demand_partner_name,omitempty" toml:"demand_partner_name" yaml:"demand_partner_name,omitempty"`
	HasFactor         null.Bool   `boil:"has_factor" json:"has_factor,omitempty" toml:"has_factor" yaml:"has_factor,omitempty"`
	HasFloor          null.Bool   `boil:"has_floor" json:"has_floor,omitempty" toml:"has_floor" yaml:"has_floor,omitempty"`
	HasTargeting      null.Bool   `boil:"has_targeting" json:"has_targeting,omitempty" toml:"has_targeting" yaml:"has_targeting,omitempty"`
}

var GlobalSearchViewColumns = struct {
	PublisherID       string
	PublisherName     string
	Domain            string
	DemandPartnerName string
	HasFactor         string
	HasFloor          string
	HasTargeting      string
}{
	PublisherID:       "publisher_id",
	PublisherName:     "publisher_name",
	Domain:            "domain",
	DemandPartnerName: "demand_partner_name",
	HasFactor:         "has_factor",
	HasFloor:          "has_floor",
	HasTargeting:      "has_targeting",
}

var GlobalSearchViewTableColumns = struct {
	PublisherID       string
	PublisherName     string
	Domain            string
	DemandPartnerName string
	HasFactor         string
	HasFloor          string
	HasTargeting      string
}{
	PublisherID:       "global_search_view.publisher_id",
	PublisherName:     "global_search_view.publisher_name",
	Domain:            "global_search_view.domain",
	DemandPartnerName: "global_search_view.demand_partner_name",
	HasFactor:         "global_search_view.has_factor",
	HasFloor:          "global_search_view.has_floor",
	HasTargeting:      "global_search_view.has_targeting",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GlobalSearchViewWhere = struct {
	PublisherID       whereHelpernull_String
	PublisherName     whereHelpernull_String
	Domain            whereHelpernull_String
	DemandPartnerName whereHelpernull_String
	HasFactor         whereHelpernull_Bool
	HasFloor          whereHelpernull_Bool
	HasTargeting      whereHelpernull_Bool
}{
	PublisherID:       whereHelpernull_String{field: "\"global_search_view\".\"publisher_id\""},
	PublisherName:     whereHelpernull_String{field: "\"global_search_view\".\"publisher_name\""},
	Domain:            whereHelpernull_String{field: "\"global_search_view\".\"domain\""},
	DemandPartnerName: whereHelpernull_String{field: "\"global_search_view\".\"demand_partner_name\""},
	HasFactor:         whereHelpernull_Bool{field: "\"global_search_view\".\"has_factor\""},
	HasFloor:          whereHelpernull_Bool{field: "\"global_search_view\".\"has_floor\""},
	HasTargeting:      whereHelpernull_Bool{field: "\"global_search_view\".\"has_targeting\""},
}

var (
	globalSearchViewAllColumns            = []string{"publisher_id", "publisher_name", "domain", "demand_partner_name", "has_factor", "has_floor", "has_targeting"}
	globalSearchViewColumnsWithoutDefault = []string{}
	globalSearchViewColumnsWithDefault    = []string{"publisher_id", "publisher_name", "domain", "demand_partner_name", "has_factor", "has_floor", "has_targeting"}
	globalSearchViewPrimaryKeyColumns     = []string{}
	globalSearchViewGeneratedColumns      = []string{}
)

type (
	// GlobalSearchViewSlice is an alias for a slice of pointers to GlobalSearchView.
	// This should almost always be used instead of []GlobalSearchView.
	GlobalSearchViewSlice []*GlobalSearchView
	// GlobalSearchViewHook is the signature for custom GlobalSearchView hook methods
	GlobalSearchViewHook func(context.Context, boil.ContextExecutor, *GlobalSearchView) error

	globalSearchViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	globalSearchViewType           = reflect.TypeOf(&GlobalSearchView{})
	globalSearchViewMapping        = queries.MakeStructMapping(globalSearchViewType)
	globalSearchViewInsertCacheMut sync.RWMutex
	globalSearchViewInsertCache    = make(map[string]insertCache)
	globalSearchViewUpdateCacheMut sync.RWMutex
	globalSearchViewUpdateCache    = make(map[string]updateCache)
	globalSearchViewUpsertCacheMut sync.RWMutex
	globalSearchViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var globalSearchViewAfterSelectMu sync.Mutex
var globalSearchViewAfterSelectHooks []GlobalSearchViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GlobalSearchView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range globalSearchViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGlobalSearchViewHook registers your hook function for all future operations.
func AddGlobalSearchViewHook(hookPoint boil.HookPoint, globalSearchViewHook GlobalSearchViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		globalSearchViewAfterSelectMu.Lock()
		globalSearchViewAfterSelectHooks = append(globalSearchViewAfterSelectHooks, globalSearchViewHook)
		globalSearchViewAfterSelectMu.Unlock()
	}
}

// One returns a single globalSearchView record from the query.
func (q globalSearchViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GlobalSearchView, error) {
	o := &GlobalSearchView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for global_search_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GlobalSearchView records from the query.
func (q globalSearchViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (GlobalSearchViewSlice, error) {
	var o []*GlobalSearchView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GlobalSearchView slice")
	}

	if len(globalSearchViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GlobalSearchView records in the query.
func (q globalSearchViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count global_search_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q globalSearchViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if global_search_view exists")
	}

	return count > 0, nil
}

// GlobalSearchViews retrieves all the records using an executor.
func GlobalSearchViews(mods ...qm.QueryMod) globalSearchViewQuery {
	mods = append(mods, qm.From("\"global_search_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"global_search_view\".*"})
	}

	return globalSearchViewQuery{q}
}
