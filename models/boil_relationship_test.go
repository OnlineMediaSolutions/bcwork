// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BidCachingToPublisherUsingBidCachingPublisher", testBidCachingToOnePublisherUsingBidCachingPublisher)
	t.Run("ConfiantToPublisherUsingPublisher", testConfiantToOnePublisherUsingPublisher)
	t.Run("DemandParnterPlacementToDemandPartnerUsingDemandPartner", testDemandParnterPlacementToOneDemandPartnerUsingDemandPartner)
	t.Run("DpoRuleToDpoUsingDemandPartner", testDpoRuleToOneDpoUsingDemandPartner)
	t.Run("DpoRuleToPublisherUsingDpoRulePublisher", testDpoRuleToOnePublisherUsingDpoRulePublisher)
	t.Run("FactorToPublisherUsingFactorPublisher", testFactorToOnePublisherUsingFactorPublisher)
	t.Run("FloorToPublisherUsingFloorPublisher", testFloorToOnePublisherUsingFloorPublisher)
	t.Run("LoopingRatioToPublisherUsingLoopingRatioPublisher", testLoopingRatioToOnePublisherUsingLoopingRatioPublisher)
	t.Run("PixalateToPublisherUsingPublisher", testPixalateToOnePublisherUsingPublisher)
	t.Run("PublisherDemandToDpoUsingDemandPartner", testPublisherDemandToOneDpoUsingDemandPartner)
	t.Run("PublisherDomainToPublisherUsingPublisher", testPublisherDomainToOnePublisherUsingPublisher)
	t.Run("SellersJSONHistoryToCompetitorUsingCompetitorNameCompetitor", testSellersJSONHistoryToOneCompetitorUsingCompetitorNameCompetitor)
	t.Run("TargetingToPublisherUsingPublisher", testTargetingToOnePublisherUsingPublisher)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("CompetitorToSellersJSONHistoryUsingCompetitorNameSellersJSONHistory", testCompetitorOneToOneSellersJSONHistoryUsingCompetitorNameSellersJSONHistory)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DemandPartnerToDemandParnterPlacements", testDemandPartnerToManyDemandParnterPlacements)
	t.Run("DpoToDemandPartnerDpoRules", testDpoToManyDemandPartnerDpoRules)
	t.Run("DpoToDemandPartnerPublisherDemands", testDpoToManyDemandPartnerPublisherDemands)
	t.Run("PublisherToBidCachings", testPublisherToManyBidCachings)
	t.Run("PublisherToConfiants", testPublisherToManyConfiants)
	t.Run("PublisherToDpoRules", testPublisherToManyDpoRules)
	t.Run("PublisherToFactors", testPublisherToManyFactors)
	t.Run("PublisherToFloors", testPublisherToManyFloors)
	t.Run("PublisherToLoopingRatios", testPublisherToManyLoopingRatios)
	t.Run("PublisherToPixalates", testPublisherToManyPixalates)
	t.Run("PublisherToPublisherDomains", testPublisherToManyPublisherDomains)
	t.Run("PublisherToTargetings", testPublisherToManyTargetings)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BidCachingToPublisherUsingBidCachings", testBidCachingToOneSetOpPublisherUsingBidCachingPublisher)
	t.Run("ConfiantToPublisherUsingConfiants", testConfiantToOneSetOpPublisherUsingPublisher)
	t.Run("DemandParnterPlacementToDemandPartnerUsingDemandParnterPlacements", testDemandParnterPlacementToOneSetOpDemandPartnerUsingDemandPartner)
	t.Run("DpoRuleToDpoUsingDemandPartnerDpoRules", testDpoRuleToOneSetOpDpoUsingDemandPartner)
	t.Run("DpoRuleToPublisherUsingDpoRules", testDpoRuleToOneSetOpPublisherUsingDpoRulePublisher)
	t.Run("FactorToPublisherUsingFactors", testFactorToOneSetOpPublisherUsingFactorPublisher)
	t.Run("FloorToPublisherUsingFloors", testFloorToOneSetOpPublisherUsingFloorPublisher)
	t.Run("LoopingRatioToPublisherUsingLoopingRatios", testLoopingRatioToOneSetOpPublisherUsingLoopingRatioPublisher)
	t.Run("PixalateToPublisherUsingPixalates", testPixalateToOneSetOpPublisherUsingPublisher)
	t.Run("PublisherDemandToDpoUsingDemandPartnerPublisherDemands", testPublisherDemandToOneSetOpDpoUsingDemandPartner)
	t.Run("PublisherDomainToPublisherUsingPublisherDomains", testPublisherDomainToOneSetOpPublisherUsingPublisher)
	t.Run("SellersJSONHistoryToCompetitorUsingCompetitorNameSellersJSONHistory", testSellersJSONHistoryToOneSetOpCompetitorUsingCompetitorNameCompetitor)
	t.Run("TargetingToPublisherUsingTargetings", testTargetingToOneSetOpPublisherUsingPublisher)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("DpoRuleToPublisherUsingDpoRules", testDpoRuleToOneRemoveOpPublisherUsingDpoRulePublisher)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("CompetitorToSellersJSONHistoryUsingCompetitorNameSellersJSONHistory", testCompetitorOneToOneSetOpSellersJSONHistoryUsingCompetitorNameSellersJSONHistory)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DemandPartnerToDemandParnterPlacements", testDemandPartnerToManyAddOpDemandParnterPlacements)
	t.Run("DpoToDemandPartnerDpoRules", testDpoToManyAddOpDemandPartnerDpoRules)
	t.Run("DpoToDemandPartnerPublisherDemands", testDpoToManyAddOpDemandPartnerPublisherDemands)
	t.Run("PublisherToBidCachings", testPublisherToManyAddOpBidCachings)
	t.Run("PublisherToConfiants", testPublisherToManyAddOpConfiants)
	t.Run("PublisherToDpoRules", testPublisherToManyAddOpDpoRules)
	t.Run("PublisherToFactors", testPublisherToManyAddOpFactors)
	t.Run("PublisherToFloors", testPublisherToManyAddOpFloors)
	t.Run("PublisherToLoopingRatios", testPublisherToManyAddOpLoopingRatios)
	t.Run("PublisherToPixalates", testPublisherToManyAddOpPixalates)
	t.Run("PublisherToPublisherDomains", testPublisherToManyAddOpPublisherDomains)
	t.Run("PublisherToTargetings", testPublisherToManyAddOpTargetings)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("PublisherToDpoRules", testPublisherToManySetOpDpoRules)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("PublisherToDpoRules", testPublisherToManyRemoveOpDpoRules)
}
