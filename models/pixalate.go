// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pixalate is an object representing the database table.
type Pixalate struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	PublisherID string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain      string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Rate        float64   `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	Active      bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *pixalateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pixalateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PixalateColumns = struct {
	ID          string
	PublisherID string
	Domain      string
	Rate        string
	Active      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	PublisherID: "publisher_id",
	Domain:      "domain",
	Rate:        "rate",
	Active:      "active",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var PixalateTableColumns = struct {
	ID          string
	PublisherID string
	Domain      string
	Rate        string
	Active      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "pixalate.id",
	PublisherID: "pixalate.publisher_id",
	Domain:      "pixalate.domain",
	Rate:        "pixalate.rate",
	Active:      "pixalate.active",
	CreatedAt:   "pixalate.created_at",
	UpdatedAt:   "pixalate.updated_at",
}

// Generated where

var PixalateWhere = struct {
	ID          whereHelperstring
	PublisherID whereHelperstring
	Domain      whereHelperstring
	Rate        whereHelperfloat64
	Active      whereHelperbool
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"pixalate\".\"id\""},
	PublisherID: whereHelperstring{field: "\"pixalate\".\"publisher_id\""},
	Domain:      whereHelperstring{field: "\"pixalate\".\"domain\""},
	Rate:        whereHelperfloat64{field: "\"pixalate\".\"rate\""},
	Active:      whereHelperbool{field: "\"pixalate\".\"active\""},
	CreatedAt:   whereHelpertime_Time{field: "\"pixalate\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"pixalate\".\"updated_at\""},
}

// PixalateRels is where relationship names are stored.
var PixalateRels = struct {
	Publisher string
}{
	Publisher: "Publisher",
}

// pixalateR is where relationships are stored.
type pixalateR struct {
	Publisher *Publisher `boil:"Publisher" json:"Publisher" toml:"Publisher" yaml:"Publisher"`
}

// NewStruct creates a new relationship struct
func (*pixalateR) NewStruct() *pixalateR {
	return &pixalateR{}
}

func (r *pixalateR) GetPublisher() *Publisher {
	if r == nil {
		return nil
	}
	return r.Publisher
}

// pixalateL is where Load methods for each relationship are stored.
type pixalateL struct{}

var (
	pixalateAllColumns            = []string{"id", "publisher_id", "domain", "rate", "active", "created_at", "updated_at"}
	pixalateColumnsWithoutDefault = []string{"id", "publisher_id", "domain", "active", "created_at"}
	pixalateColumnsWithDefault    = []string{"rate", "updated_at"}
	pixalatePrimaryKeyColumns     = []string{"domain", "publisher_id"}
	pixalateGeneratedColumns      = []string{}
)

type (
	// PixalateSlice is an alias for a slice of pointers to Pixalate.
	// This should almost always be used instead of []Pixalate.
	PixalateSlice []*Pixalate
	// PixalateHook is the signature for custom Pixalate hook methods
	PixalateHook func(context.Context, boil.ContextExecutor, *Pixalate) error

	pixalateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pixalateType                 = reflect.TypeOf(&Pixalate{})
	pixalateMapping              = queries.MakeStructMapping(pixalateType)
	pixalatePrimaryKeyMapping, _ = queries.BindMapping(pixalateType, pixalateMapping, pixalatePrimaryKeyColumns)
	pixalateInsertCacheMut       sync.RWMutex
	pixalateInsertCache          = make(map[string]insertCache)
	pixalateUpdateCacheMut       sync.RWMutex
	pixalateUpdateCache          = make(map[string]updateCache)
	pixalateUpsertCacheMut       sync.RWMutex
	pixalateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pixalateAfterSelectHooks []PixalateHook

var pixalateBeforeInsertHooks []PixalateHook
var pixalateAfterInsertHooks []PixalateHook

var pixalateBeforeUpdateHooks []PixalateHook
var pixalateAfterUpdateHooks []PixalateHook

var pixalateBeforeDeleteHooks []PixalateHook
var pixalateAfterDeleteHooks []PixalateHook

var pixalateBeforeUpsertHooks []PixalateHook
var pixalateAfterUpsertHooks []PixalateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pixalate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pixalate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pixalate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pixalate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pixalate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pixalate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pixalate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pixalate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pixalate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pixalateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPixalateHook registers your hook function for all future operations.
func AddPixalateHook(hookPoint boil.HookPoint, pixalateHook PixalateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pixalateAfterSelectHooks = append(pixalateAfterSelectHooks, pixalateHook)
	case boil.BeforeInsertHook:
		pixalateBeforeInsertHooks = append(pixalateBeforeInsertHooks, pixalateHook)
	case boil.AfterInsertHook:
		pixalateAfterInsertHooks = append(pixalateAfterInsertHooks, pixalateHook)
	case boil.BeforeUpdateHook:
		pixalateBeforeUpdateHooks = append(pixalateBeforeUpdateHooks, pixalateHook)
	case boil.AfterUpdateHook:
		pixalateAfterUpdateHooks = append(pixalateAfterUpdateHooks, pixalateHook)
	case boil.BeforeDeleteHook:
		pixalateBeforeDeleteHooks = append(pixalateBeforeDeleteHooks, pixalateHook)
	case boil.AfterDeleteHook:
		pixalateAfterDeleteHooks = append(pixalateAfterDeleteHooks, pixalateHook)
	case boil.BeforeUpsertHook:
		pixalateBeforeUpsertHooks = append(pixalateBeforeUpsertHooks, pixalateHook)
	case boil.AfterUpsertHook:
		pixalateAfterUpsertHooks = append(pixalateAfterUpsertHooks, pixalateHook)
	}
}

// One returns a single pixalate record from the query.
func (q pixalateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pixalate, error) {
	o := &Pixalate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pixalate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pixalate records from the query.
func (q pixalateQuery) All(ctx context.Context, exec boil.ContextExecutor) (PixalateSlice, error) {
	var o []*Pixalate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Pixalate slice")
	}

	if len(pixalateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pixalate records in the query.
func (q pixalateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pixalate rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pixalateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pixalate exists")
	}

	return count > 0, nil
}

// Publisher pointed to by the foreign key.
func (o *Pixalate) Publisher(mods ...qm.QueryMod) publisherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"publisher_id\" = ?", o.PublisherID),
	}

	queryMods = append(queryMods, mods...)

	return Publishers(queryMods...)
}

// LoadPublisher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pixalateL) LoadPublisher(ctx context.Context, e boil.ContextExecutor, singular bool, maybePixalate interface{}, mods queries.Applicator) error {
	var slice []*Pixalate
	var object *Pixalate

	if singular {
		var ok bool
		object, ok = maybePixalate.(*Pixalate)
		if !ok {
			object = new(Pixalate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePixalate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePixalate))
			}
		}
	} else {
		s, ok := maybePixalate.(*[]*Pixalate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePixalate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePixalate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pixalateR{}
		}
		args = append(args, object.PublisherID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pixalateR{}
			}

			for _, a := range args {
				if a == obj.PublisherID {
					continue Outer
				}
			}

			args = append(args, obj.PublisherID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`publisher`),
		qm.WhereIn(`publisher.publisher_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Publisher")
	}

	var resultSlice []*Publisher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Publisher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for publisher")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publisher")
	}

	if len(publisherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Publisher = foreign
		if foreign.R == nil {
			foreign.R = &publisherR{}
		}
		foreign.R.Pixalates = append(foreign.R.Pixalates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PublisherID == foreign.PublisherID {
				local.R.Publisher = foreign
				if foreign.R == nil {
					foreign.R = &publisherR{}
				}
				foreign.R.Pixalates = append(foreign.R.Pixalates, local)
				break
			}
		}
	}

	return nil
}

// SetPublisher of the pixalate to the related item.
// Sets o.R.Publisher to related.
// Adds o to related.R.Pixalates.
func (o *Pixalate) SetPublisher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Publisher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pixalate\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"publisher_id"}),
		strmangle.WhereClause("\"", "\"", 2, pixalatePrimaryKeyColumns),
	)
	values := []interface{}{related.PublisherID, o.Domain, o.PublisherID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PublisherID = related.PublisherID
	if o.R == nil {
		o.R = &pixalateR{
			Publisher: related,
		}
	} else {
		o.R.Publisher = related
	}

	if related.R == nil {
		related.R = &publisherR{
			Pixalates: PixalateSlice{o},
		}
	} else {
		related.R.Pixalates = append(related.R.Pixalates, o)
	}

	return nil
}

// Pixalates retrieves all the records using an executor.
func Pixalates(mods ...qm.QueryMod) pixalateQuery {
	mods = append(mods, qm.From("\"pixalate\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pixalate\".*"})
	}

	return pixalateQuery{q}
}

// FindPixalate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPixalate(ctx context.Context, exec boil.ContextExecutor, domain string, publisherID string, selectCols ...string) (*Pixalate, error) {
	pixalateObj := &Pixalate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pixalate\" where \"domain\"=$1 AND \"publisher_id\"=$2", sel,
	)

	q := queries.Raw(query, domain, publisherID)

	err := q.Bind(ctx, exec, pixalateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pixalate")
	}

	if err = pixalateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pixalateObj, err
	}

	return pixalateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pixalate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pixalate provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pixalateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pixalateInsertCacheMut.RLock()
	cache, cached := pixalateInsertCache[key]
	pixalateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pixalateAllColumns,
			pixalateColumnsWithDefault,
			pixalateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pixalateType, pixalateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pixalateType, pixalateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pixalate\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pixalate\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pixalate")
	}

	if !cached {
		pixalateInsertCacheMut.Lock()
		pixalateInsertCache[key] = cache
		pixalateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Pixalate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pixalate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pixalateUpdateCacheMut.RLock()
	cache, cached := pixalateUpdateCache[key]
	pixalateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pixalateAllColumns,
			pixalatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pixalate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pixalate\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pixalatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pixalateType, pixalateMapping, append(wl, pixalatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pixalate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pixalate")
	}

	if !cached {
		pixalateUpdateCacheMut.Lock()
		pixalateUpdateCache[key] = cache
		pixalateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pixalateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pixalate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pixalate")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PixalateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pixalatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pixalate\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pixalatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pixalate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pixalate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pixalate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pixalate provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pixalateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pixalateUpsertCacheMut.RLock()
	cache, cached := pixalateUpsertCache[key]
	pixalateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pixalateAllColumns,
			pixalateColumnsWithDefault,
			pixalateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pixalateAllColumns,
			pixalatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pixalate, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pixalatePrimaryKeyColumns))
			copy(conflict, pixalatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pixalate\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pixalateType, pixalateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pixalateType, pixalateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pixalate")
	}

	if !cached {
		pixalateUpsertCacheMut.Lock()
		pixalateUpsertCache[key] = cache
		pixalateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Pixalate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pixalate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Pixalate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pixalatePrimaryKeyMapping)
	sql := "DELETE FROM \"pixalate\" WHERE \"domain\"=$1 AND \"publisher_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pixalate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pixalate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pixalateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pixalateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pixalate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pixalate")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PixalateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pixalateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pixalatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pixalate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pixalatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pixalate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pixalate")
	}

	if len(pixalateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pixalate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPixalate(ctx, exec, o.Domain, o.PublisherID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PixalateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PixalateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pixalatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pixalate\".* FROM \"pixalate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pixalatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PixalateSlice")
	}

	*o = slice

	return nil
}

// PixalateExists checks if the Pixalate row exists.
func PixalateExists(ctx context.Context, exec boil.ContextExecutor, domain string, publisherID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pixalate\" where \"domain\"=$1 AND \"publisher_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, domain, publisherID)
	}
	row := exec.QueryRowContext(ctx, sql, domain, publisherID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pixalate exists")
	}

	return exists, nil
}

// Exists checks if the Pixalate row exists.
func (o *Pixalate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PixalateExists(ctx, exec, o.Domain, o.PublisherID)
}
