// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DemandPartnerConnection is an object representing the database table.
type DemandPartnerConnection struct {
	ID               int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	DemandPartnerID  string            `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	PublisherAccount string            `boil:"publisher_account" json:"publisher_account" toml:"publisher_account" yaml:"publisher_account"`
	IntegrationType  types.StringArray `boil:"integration_type" json:"integration_type,omitempty" toml:"integration_type" yaml:"integration_type,omitempty"`
	CreatedAt        time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *demandPartnerConnectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L demandPartnerConnectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DemandPartnerConnectionColumns = struct {
	ID               string
	DemandPartnerID  string
	PublisherAccount string
	IntegrationType  string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	DemandPartnerID:  "demand_partner_id",
	PublisherAccount: "publisher_account",
	IntegrationType:  "integration_type",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var DemandPartnerConnectionTableColumns = struct {
	ID               string
	DemandPartnerID  string
	PublisherAccount string
	IntegrationType  string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "demand_partner_connection.id",
	DemandPartnerID:  "demand_partner_connection.demand_partner_id",
	PublisherAccount: "demand_partner_connection.publisher_account",
	IntegrationType:  "demand_partner_connection.integration_type",
	CreatedAt:        "demand_partner_connection.created_at",
	UpdatedAt:        "demand_partner_connection.updated_at",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var DemandPartnerConnectionWhere = struct {
	ID               whereHelperint
	DemandPartnerID  whereHelperstring
	PublisherAccount whereHelperstring
	IntegrationType  whereHelpertypes_StringArray
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: "\"demand_partner_connection\".\"id\""},
	DemandPartnerID:  whereHelperstring{field: "\"demand_partner_connection\".\"demand_partner_id\""},
	PublisherAccount: whereHelperstring{field: "\"demand_partner_connection\".\"publisher_account\""},
	IntegrationType:  whereHelpertypes_StringArray{field: "\"demand_partner_connection\".\"integration_type\""},
	CreatedAt:        whereHelpertime_Time{field: "\"demand_partner_connection\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"demand_partner_connection\".\"updated_at\""},
}

// DemandPartnerConnectionRels is where relationship names are stored.
var DemandPartnerConnectionRels = struct {
	DemandPartner string
}{
	DemandPartner: "DemandPartner",
}

// demandPartnerConnectionR is where relationships are stored.
type demandPartnerConnectionR struct {
	DemandPartner *Dpo `boil:"DemandPartner" json:"DemandPartner" toml:"DemandPartner" yaml:"DemandPartner"`
}

// NewStruct creates a new relationship struct
func (*demandPartnerConnectionR) NewStruct() *demandPartnerConnectionR {
	return &demandPartnerConnectionR{}
}

func (r *demandPartnerConnectionR) GetDemandPartner() *Dpo {
	if r == nil {
		return nil
	}
	return r.DemandPartner
}

// demandPartnerConnectionL is where Load methods for each relationship are stored.
type demandPartnerConnectionL struct{}

var (
	demandPartnerConnectionAllColumns            = []string{"id", "demand_partner_id", "publisher_account", "integration_type", "created_at", "updated_at"}
	demandPartnerConnectionColumnsWithoutDefault = []string{"demand_partner_id", "created_at"}
	demandPartnerConnectionColumnsWithDefault    = []string{"id", "publisher_account", "integration_type", "updated_at"}
	demandPartnerConnectionPrimaryKeyColumns     = []string{"id"}
	demandPartnerConnectionGeneratedColumns      = []string{}
)

type (
	// DemandPartnerConnectionSlice is an alias for a slice of pointers to DemandPartnerConnection.
	// This should almost always be used instead of []DemandPartnerConnection.
	DemandPartnerConnectionSlice []*DemandPartnerConnection
	// DemandPartnerConnectionHook is the signature for custom DemandPartnerConnection hook methods
	DemandPartnerConnectionHook func(context.Context, boil.ContextExecutor, *DemandPartnerConnection) error

	demandPartnerConnectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	demandPartnerConnectionType                 = reflect.TypeOf(&DemandPartnerConnection{})
	demandPartnerConnectionMapping              = queries.MakeStructMapping(demandPartnerConnectionType)
	demandPartnerConnectionPrimaryKeyMapping, _ = queries.BindMapping(demandPartnerConnectionType, demandPartnerConnectionMapping, demandPartnerConnectionPrimaryKeyColumns)
	demandPartnerConnectionInsertCacheMut       sync.RWMutex
	demandPartnerConnectionInsertCache          = make(map[string]insertCache)
	demandPartnerConnectionUpdateCacheMut       sync.RWMutex
	demandPartnerConnectionUpdateCache          = make(map[string]updateCache)
	demandPartnerConnectionUpsertCacheMut       sync.RWMutex
	demandPartnerConnectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var demandPartnerConnectionAfterSelectMu sync.Mutex
var demandPartnerConnectionAfterSelectHooks []DemandPartnerConnectionHook

var demandPartnerConnectionBeforeInsertMu sync.Mutex
var demandPartnerConnectionBeforeInsertHooks []DemandPartnerConnectionHook
var demandPartnerConnectionAfterInsertMu sync.Mutex
var demandPartnerConnectionAfterInsertHooks []DemandPartnerConnectionHook

var demandPartnerConnectionBeforeUpdateMu sync.Mutex
var demandPartnerConnectionBeforeUpdateHooks []DemandPartnerConnectionHook
var demandPartnerConnectionAfterUpdateMu sync.Mutex
var demandPartnerConnectionAfterUpdateHooks []DemandPartnerConnectionHook

var demandPartnerConnectionBeforeDeleteMu sync.Mutex
var demandPartnerConnectionBeforeDeleteHooks []DemandPartnerConnectionHook
var demandPartnerConnectionAfterDeleteMu sync.Mutex
var demandPartnerConnectionAfterDeleteHooks []DemandPartnerConnectionHook

var demandPartnerConnectionBeforeUpsertMu sync.Mutex
var demandPartnerConnectionBeforeUpsertHooks []DemandPartnerConnectionHook
var demandPartnerConnectionAfterUpsertMu sync.Mutex
var demandPartnerConnectionAfterUpsertHooks []DemandPartnerConnectionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DemandPartnerConnection) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DemandPartnerConnection) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DemandPartnerConnection) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DemandPartnerConnection) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DemandPartnerConnection) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DemandPartnerConnection) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DemandPartnerConnection) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DemandPartnerConnection) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DemandPartnerConnection) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerConnectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDemandPartnerConnectionHook registers your hook function for all future operations.
func AddDemandPartnerConnectionHook(hookPoint boil.HookPoint, demandPartnerConnectionHook DemandPartnerConnectionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		demandPartnerConnectionAfterSelectMu.Lock()
		demandPartnerConnectionAfterSelectHooks = append(demandPartnerConnectionAfterSelectHooks, demandPartnerConnectionHook)
		demandPartnerConnectionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		demandPartnerConnectionBeforeInsertMu.Lock()
		demandPartnerConnectionBeforeInsertHooks = append(demandPartnerConnectionBeforeInsertHooks, demandPartnerConnectionHook)
		demandPartnerConnectionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		demandPartnerConnectionAfterInsertMu.Lock()
		demandPartnerConnectionAfterInsertHooks = append(demandPartnerConnectionAfterInsertHooks, demandPartnerConnectionHook)
		demandPartnerConnectionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		demandPartnerConnectionBeforeUpdateMu.Lock()
		demandPartnerConnectionBeforeUpdateHooks = append(demandPartnerConnectionBeforeUpdateHooks, demandPartnerConnectionHook)
		demandPartnerConnectionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		demandPartnerConnectionAfterUpdateMu.Lock()
		demandPartnerConnectionAfterUpdateHooks = append(demandPartnerConnectionAfterUpdateHooks, demandPartnerConnectionHook)
		demandPartnerConnectionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		demandPartnerConnectionBeforeDeleteMu.Lock()
		demandPartnerConnectionBeforeDeleteHooks = append(demandPartnerConnectionBeforeDeleteHooks, demandPartnerConnectionHook)
		demandPartnerConnectionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		demandPartnerConnectionAfterDeleteMu.Lock()
		demandPartnerConnectionAfterDeleteHooks = append(demandPartnerConnectionAfterDeleteHooks, demandPartnerConnectionHook)
		demandPartnerConnectionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		demandPartnerConnectionBeforeUpsertMu.Lock()
		demandPartnerConnectionBeforeUpsertHooks = append(demandPartnerConnectionBeforeUpsertHooks, demandPartnerConnectionHook)
		demandPartnerConnectionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		demandPartnerConnectionAfterUpsertMu.Lock()
		demandPartnerConnectionAfterUpsertHooks = append(demandPartnerConnectionAfterUpsertHooks, demandPartnerConnectionHook)
		demandPartnerConnectionAfterUpsertMu.Unlock()
	}
}

// One returns a single demandPartnerConnection record from the query.
func (q demandPartnerConnectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DemandPartnerConnection, error) {
	o := &DemandPartnerConnection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for demand_partner_connection")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DemandPartnerConnection records from the query.
func (q demandPartnerConnectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DemandPartnerConnectionSlice, error) {
	var o []*DemandPartnerConnection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DemandPartnerConnection slice")
	}

	if len(demandPartnerConnectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DemandPartnerConnection records in the query.
func (q demandPartnerConnectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count demand_partner_connection rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q demandPartnerConnectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if demand_partner_connection exists")
	}

	return count > 0, nil
}

// DemandPartner pointed to by the foreign key.
func (o *DemandPartnerConnection) DemandPartner(mods ...qm.QueryMod) dpoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"demand_partner_id\" = ?", o.DemandPartnerID),
	}

	queryMods = append(queryMods, mods...)

	return Dpos(queryMods...)
}

// LoadDemandPartner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (demandPartnerConnectionL) LoadDemandPartner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDemandPartnerConnection interface{}, mods queries.Applicator) error {
	var slice []*DemandPartnerConnection
	var object *DemandPartnerConnection

	if singular {
		var ok bool
		object, ok = maybeDemandPartnerConnection.(*DemandPartnerConnection)
		if !ok {
			object = new(DemandPartnerConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDemandPartnerConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDemandPartnerConnection))
			}
		}
	} else {
		s, ok := maybeDemandPartnerConnection.(*[]*DemandPartnerConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDemandPartnerConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDemandPartnerConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &demandPartnerConnectionR{}
		}
		args[object.DemandPartnerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &demandPartnerConnectionR{}
			}

			args[obj.DemandPartnerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dpo`),
		qm.WhereIn(`dpo.demand_partner_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dpo")
	}

	var resultSlice []*Dpo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dpo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dpo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dpo")
	}

	if len(dpoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DemandPartner = foreign
		if foreign.R == nil {
			foreign.R = &dpoR{}
		}
		foreign.R.DemandPartnerDemandPartnerConnections = append(foreign.R.DemandPartnerDemandPartnerConnections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DemandPartnerID == foreign.DemandPartnerID {
				local.R.DemandPartner = foreign
				if foreign.R == nil {
					foreign.R = &dpoR{}
				}
				foreign.R.DemandPartnerDemandPartnerConnections = append(foreign.R.DemandPartnerDemandPartnerConnections, local)
				break
			}
		}
	}

	return nil
}

// SetDemandPartner of the demandPartnerConnection to the related item.
// Sets o.R.DemandPartner to related.
// Adds o to related.R.DemandPartnerDemandPartnerConnections.
func (o *DemandPartnerConnection) SetDemandPartner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dpo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"demand_partner_connection\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"demand_partner_id"}),
		strmangle.WhereClause("\"", "\"", 2, demandPartnerConnectionPrimaryKeyColumns),
	)
	values := []interface{}{related.DemandPartnerID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DemandPartnerID = related.DemandPartnerID
	if o.R == nil {
		o.R = &demandPartnerConnectionR{
			DemandPartner: related,
		}
	} else {
		o.R.DemandPartner = related
	}

	if related.R == nil {
		related.R = &dpoR{
			DemandPartnerDemandPartnerConnections: DemandPartnerConnectionSlice{o},
		}
	} else {
		related.R.DemandPartnerDemandPartnerConnections = append(related.R.DemandPartnerDemandPartnerConnections, o)
	}

	return nil
}

// DemandPartnerConnections retrieves all the records using an executor.
func DemandPartnerConnections(mods ...qm.QueryMod) demandPartnerConnectionQuery {
	mods = append(mods, qm.From("\"demand_partner_connection\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"demand_partner_connection\".*"})
	}

	return demandPartnerConnectionQuery{q}
}

// FindDemandPartnerConnection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDemandPartnerConnection(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DemandPartnerConnection, error) {
	demandPartnerConnectionObj := &DemandPartnerConnection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"demand_partner_connection\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, demandPartnerConnectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from demand_partner_connection")
	}

	if err = demandPartnerConnectionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return demandPartnerConnectionObj, err
	}

	return demandPartnerConnectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DemandPartnerConnection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand_partner_connection provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandPartnerConnectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	demandPartnerConnectionInsertCacheMut.RLock()
	cache, cached := demandPartnerConnectionInsertCache[key]
	demandPartnerConnectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			demandPartnerConnectionAllColumns,
			demandPartnerConnectionColumnsWithDefault,
			demandPartnerConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(demandPartnerConnectionType, demandPartnerConnectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(demandPartnerConnectionType, demandPartnerConnectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"demand_partner_connection\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"demand_partner_connection\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into demand_partner_connection")
	}

	if !cached {
		demandPartnerConnectionInsertCacheMut.Lock()
		demandPartnerConnectionInsertCache[key] = cache
		demandPartnerConnectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DemandPartnerConnection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DemandPartnerConnection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	demandPartnerConnectionUpdateCacheMut.RLock()
	cache, cached := demandPartnerConnectionUpdateCache[key]
	demandPartnerConnectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			demandPartnerConnectionAllColumns,
			demandPartnerConnectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update demand_partner_connection, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"demand_partner_connection\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, demandPartnerConnectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(demandPartnerConnectionType, demandPartnerConnectionMapping, append(wl, demandPartnerConnectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update demand_partner_connection row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for demand_partner_connection")
	}

	if !cached {
		demandPartnerConnectionUpdateCacheMut.Lock()
		demandPartnerConnectionUpdateCache[key] = cache
		demandPartnerConnectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q demandPartnerConnectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for demand_partner_connection")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for demand_partner_connection")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DemandPartnerConnectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"demand_partner_connection\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, demandPartnerConnectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in demandPartnerConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all demandPartnerConnection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DemandPartnerConnection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no demand_partner_connection provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandPartnerConnectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	demandPartnerConnectionUpsertCacheMut.RLock()
	cache, cached := demandPartnerConnectionUpsertCache[key]
	demandPartnerConnectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			demandPartnerConnectionAllColumns,
			demandPartnerConnectionColumnsWithDefault,
			demandPartnerConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			demandPartnerConnectionAllColumns,
			demandPartnerConnectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert demand_partner_connection, could not build update column list")
		}

		ret := strmangle.SetComplement(demandPartnerConnectionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(demandPartnerConnectionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert demand_partner_connection, could not build conflict column list")
			}

			conflict = make([]string, len(demandPartnerConnectionPrimaryKeyColumns))
			copy(conflict, demandPartnerConnectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"demand_partner_connection\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(demandPartnerConnectionType, demandPartnerConnectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(demandPartnerConnectionType, demandPartnerConnectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert demand_partner_connection")
	}

	if !cached {
		demandPartnerConnectionUpsertCacheMut.Lock()
		demandPartnerConnectionUpsertCache[key] = cache
		demandPartnerConnectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DemandPartnerConnection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DemandPartnerConnection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DemandPartnerConnection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), demandPartnerConnectionPrimaryKeyMapping)
	sql := "DELETE FROM \"demand_partner_connection\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from demand_partner_connection")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for demand_partner_connection")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q demandPartnerConnectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no demandPartnerConnectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand_partner_connection")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_partner_connection")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DemandPartnerConnectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(demandPartnerConnectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"demand_partner_connection\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandPartnerConnectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demandPartnerConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_partner_connection")
	}

	if len(demandPartnerConnectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DemandPartnerConnection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDemandPartnerConnection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandPartnerConnectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DemandPartnerConnectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"demand_partner_connection\".* FROM \"demand_partner_connection\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandPartnerConnectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DemandPartnerConnectionSlice")
	}

	*o = slice

	return nil
}

// DemandPartnerConnectionExists checks if the DemandPartnerConnection row exists.
func DemandPartnerConnectionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"demand_partner_connection\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if demand_partner_connection exists")
	}

	return exists, nil
}

// Exists checks if the DemandPartnerConnection row exists.
func (o *DemandPartnerConnection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DemandPartnerConnectionExists(ctx, exec, o.ID)
}
