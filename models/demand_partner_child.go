// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DemandPartnerChild is an object representing the database table.
type DemandPartnerChild struct {
	ID                       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	DPChildName              string      `boil:"dp_child_name" json:"dp_child_name" toml:"dp_child_name" yaml:"dp_child_name"`
	DPDomain                 string      `boil:"dp_domain" json:"dp_domain" toml:"dp_domain" yaml:"dp_domain"`
	PublisherAccount         string      `boil:"publisher_account" json:"publisher_account" toml:"publisher_account" yaml:"publisher_account"`
	CertificationAuthorityID null.String `boil:"certification_authority_id" json:"certification_authority_id,omitempty" toml:"certification_authority_id" yaml:"certification_authority_id,omitempty"`
	IsRequiredForAdsTXT      bool        `boil:"is_required_for_ads_txt" json:"is_required_for_ads_txt" toml:"is_required_for_ads_txt" yaml:"is_required_for_ads_txt"`
	CreatedAt                time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	IsDirect                 bool        `boil:"is_direct" json:"is_direct" toml:"is_direct" yaml:"is_direct"`
	DPConnectionID           int         `boil:"dp_connection_id" json:"dp_connection_id" toml:"dp_connection_id" yaml:"dp_connection_id"`

	R *demandPartnerChildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L demandPartnerChildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DemandPartnerChildColumns = struct {
	ID                       string
	DPChildName              string
	DPDomain                 string
	PublisherAccount         string
	CertificationAuthorityID string
	IsRequiredForAdsTXT      string
	CreatedAt                string
	UpdatedAt                string
	IsDirect                 string
	DPConnectionID           string
}{
	ID:                       "id",
	DPChildName:              "dp_child_name",
	DPDomain:                 "dp_domain",
	PublisherAccount:         "publisher_account",
	CertificationAuthorityID: "certification_authority_id",
	IsRequiredForAdsTXT:      "is_required_for_ads_txt",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
	IsDirect:                 "is_direct",
	DPConnectionID:           "dp_connection_id",
}

var DemandPartnerChildTableColumns = struct {
	ID                       string
	DPChildName              string
	DPDomain                 string
	PublisherAccount         string
	CertificationAuthorityID string
	IsRequiredForAdsTXT      string
	CreatedAt                string
	UpdatedAt                string
	IsDirect                 string
	DPConnectionID           string
}{
	ID:                       "demand_partner_child.id",
	DPChildName:              "demand_partner_child.dp_child_name",
	DPDomain:                 "demand_partner_child.dp_domain",
	PublisherAccount:         "demand_partner_child.publisher_account",
	CertificationAuthorityID: "demand_partner_child.certification_authority_id",
	IsRequiredForAdsTXT:      "demand_partner_child.is_required_for_ads_txt",
	CreatedAt:                "demand_partner_child.created_at",
	UpdatedAt:                "demand_partner_child.updated_at",
	IsDirect:                 "demand_partner_child.is_direct",
	DPConnectionID:           "demand_partner_child.dp_connection_id",
}

// Generated where

var DemandPartnerChildWhere = struct {
	ID                       whereHelperint
	DPChildName              whereHelperstring
	DPDomain                 whereHelperstring
	PublisherAccount         whereHelperstring
	CertificationAuthorityID whereHelpernull_String
	IsRequiredForAdsTXT      whereHelperbool
	CreatedAt                whereHelpertime_Time
	UpdatedAt                whereHelpernull_Time
	IsDirect                 whereHelperbool
	DPConnectionID           whereHelperint
}{
	ID:                       whereHelperint{field: "\"demand_partner_child\".\"id\""},
	DPChildName:              whereHelperstring{field: "\"demand_partner_child\".\"dp_child_name\""},
	DPDomain:                 whereHelperstring{field: "\"demand_partner_child\".\"dp_domain\""},
	PublisherAccount:         whereHelperstring{field: "\"demand_partner_child\".\"publisher_account\""},
	CertificationAuthorityID: whereHelpernull_String{field: "\"demand_partner_child\".\"certification_authority_id\""},
	IsRequiredForAdsTXT:      whereHelperbool{field: "\"demand_partner_child\".\"is_required_for_ads_txt\""},
	CreatedAt:                whereHelpertime_Time{field: "\"demand_partner_child\".\"created_at\""},
	UpdatedAt:                whereHelpernull_Time{field: "\"demand_partner_child\".\"updated_at\""},
	IsDirect:                 whereHelperbool{field: "\"demand_partner_child\".\"is_direct\""},
	DPConnectionID:           whereHelperint{field: "\"demand_partner_child\".\"dp_connection_id\""},
}

// DemandPartnerChildRels is where relationship names are stored.
var DemandPartnerChildRels = struct {
	DPConnection string
	AdsTXTS      string
}{
	DPConnection: "DPConnection",
	AdsTXTS:      "AdsTXTS",
}

// demandPartnerChildR is where relationships are stored.
type demandPartnerChildR struct {
	DPConnection *DemandPartnerConnection `boil:"DPConnection" json:"DPConnection" toml:"DPConnection" yaml:"DPConnection"`
	AdsTXTS      AdsTXTSlice              `boil:"AdsTXTS" json:"AdsTXTS" toml:"AdsTXTS" yaml:"AdsTXTS"`
}

// NewStruct creates a new relationship struct
func (*demandPartnerChildR) NewStruct() *demandPartnerChildR {
	return &demandPartnerChildR{}
}

func (r *demandPartnerChildR) GetDPConnection() *DemandPartnerConnection {
	if r == nil {
		return nil
	}
	return r.DPConnection
}

func (r *demandPartnerChildR) GetAdsTXTS() AdsTXTSlice {
	if r == nil {
		return nil
	}
	return r.AdsTXTS
}

// demandPartnerChildL is where Load methods for each relationship are stored.
type demandPartnerChildL struct{}

var (
	demandPartnerChildAllColumns            = []string{"id", "dp_child_name", "dp_domain", "publisher_account", "certification_authority_id", "is_required_for_ads_txt", "created_at", "updated_at", "is_direct", "dp_connection_id"}
	demandPartnerChildColumnsWithoutDefault = []string{"created_at", "dp_connection_id"}
	demandPartnerChildColumnsWithDefault    = []string{"id", "dp_child_name", "dp_domain", "publisher_account", "certification_authority_id", "is_required_for_ads_txt", "updated_at", "is_direct"}
	demandPartnerChildPrimaryKeyColumns     = []string{"id"}
	demandPartnerChildGeneratedColumns      = []string{}
)

type (
	// DemandPartnerChildSlice is an alias for a slice of pointers to DemandPartnerChild.
	// This should almost always be used instead of []DemandPartnerChild.
	DemandPartnerChildSlice []*DemandPartnerChild
	// DemandPartnerChildHook is the signature for custom DemandPartnerChild hook methods
	DemandPartnerChildHook func(context.Context, boil.ContextExecutor, *DemandPartnerChild) error

	demandPartnerChildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	demandPartnerChildType                 = reflect.TypeOf(&DemandPartnerChild{})
	demandPartnerChildMapping              = queries.MakeStructMapping(demandPartnerChildType)
	demandPartnerChildPrimaryKeyMapping, _ = queries.BindMapping(demandPartnerChildType, demandPartnerChildMapping, demandPartnerChildPrimaryKeyColumns)
	demandPartnerChildInsertCacheMut       sync.RWMutex
	demandPartnerChildInsertCache          = make(map[string]insertCache)
	demandPartnerChildUpdateCacheMut       sync.RWMutex
	demandPartnerChildUpdateCache          = make(map[string]updateCache)
	demandPartnerChildUpsertCacheMut       sync.RWMutex
	demandPartnerChildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var demandPartnerChildAfterSelectMu sync.Mutex
var demandPartnerChildAfterSelectHooks []DemandPartnerChildHook

var demandPartnerChildBeforeInsertMu sync.Mutex
var demandPartnerChildBeforeInsertHooks []DemandPartnerChildHook
var demandPartnerChildAfterInsertMu sync.Mutex
var demandPartnerChildAfterInsertHooks []DemandPartnerChildHook

var demandPartnerChildBeforeUpdateMu sync.Mutex
var demandPartnerChildBeforeUpdateHooks []DemandPartnerChildHook
var demandPartnerChildAfterUpdateMu sync.Mutex
var demandPartnerChildAfterUpdateHooks []DemandPartnerChildHook

var demandPartnerChildBeforeDeleteMu sync.Mutex
var demandPartnerChildBeforeDeleteHooks []DemandPartnerChildHook
var demandPartnerChildAfterDeleteMu sync.Mutex
var demandPartnerChildAfterDeleteHooks []DemandPartnerChildHook

var demandPartnerChildBeforeUpsertMu sync.Mutex
var demandPartnerChildBeforeUpsertHooks []DemandPartnerChildHook
var demandPartnerChildAfterUpsertMu sync.Mutex
var demandPartnerChildAfterUpsertHooks []DemandPartnerChildHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DemandPartnerChild) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DemandPartnerChild) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DemandPartnerChild) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DemandPartnerChild) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DemandPartnerChild) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DemandPartnerChild) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DemandPartnerChild) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DemandPartnerChild) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DemandPartnerChild) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerChildAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDemandPartnerChildHook registers your hook function for all future operations.
func AddDemandPartnerChildHook(hookPoint boil.HookPoint, demandPartnerChildHook DemandPartnerChildHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		demandPartnerChildAfterSelectMu.Lock()
		demandPartnerChildAfterSelectHooks = append(demandPartnerChildAfterSelectHooks, demandPartnerChildHook)
		demandPartnerChildAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		demandPartnerChildBeforeInsertMu.Lock()
		demandPartnerChildBeforeInsertHooks = append(demandPartnerChildBeforeInsertHooks, demandPartnerChildHook)
		demandPartnerChildBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		demandPartnerChildAfterInsertMu.Lock()
		demandPartnerChildAfterInsertHooks = append(demandPartnerChildAfterInsertHooks, demandPartnerChildHook)
		demandPartnerChildAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		demandPartnerChildBeforeUpdateMu.Lock()
		demandPartnerChildBeforeUpdateHooks = append(demandPartnerChildBeforeUpdateHooks, demandPartnerChildHook)
		demandPartnerChildBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		demandPartnerChildAfterUpdateMu.Lock()
		demandPartnerChildAfterUpdateHooks = append(demandPartnerChildAfterUpdateHooks, demandPartnerChildHook)
		demandPartnerChildAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		demandPartnerChildBeforeDeleteMu.Lock()
		demandPartnerChildBeforeDeleteHooks = append(demandPartnerChildBeforeDeleteHooks, demandPartnerChildHook)
		demandPartnerChildBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		demandPartnerChildAfterDeleteMu.Lock()
		demandPartnerChildAfterDeleteHooks = append(demandPartnerChildAfterDeleteHooks, demandPartnerChildHook)
		demandPartnerChildAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		demandPartnerChildBeforeUpsertMu.Lock()
		demandPartnerChildBeforeUpsertHooks = append(demandPartnerChildBeforeUpsertHooks, demandPartnerChildHook)
		demandPartnerChildBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		demandPartnerChildAfterUpsertMu.Lock()
		demandPartnerChildAfterUpsertHooks = append(demandPartnerChildAfterUpsertHooks, demandPartnerChildHook)
		demandPartnerChildAfterUpsertMu.Unlock()
	}
}

// One returns a single demandPartnerChild record from the query.
func (q demandPartnerChildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DemandPartnerChild, error) {
	o := &DemandPartnerChild{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for demand_partner_child")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DemandPartnerChild records from the query.
func (q demandPartnerChildQuery) All(ctx context.Context, exec boil.ContextExecutor) (DemandPartnerChildSlice, error) {
	var o []*DemandPartnerChild

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DemandPartnerChild slice")
	}

	if len(demandPartnerChildAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DemandPartnerChild records in the query.
func (q demandPartnerChildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count demand_partner_child rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q demandPartnerChildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if demand_partner_child exists")
	}

	return count > 0, nil
}

// DPConnection pointed to by the foreign key.
func (o *DemandPartnerChild) DPConnection(mods ...qm.QueryMod) demandPartnerConnectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DPConnectionID),
	}

	queryMods = append(queryMods, mods...)

	return DemandPartnerConnections(queryMods...)
}

// AdsTXTS retrieves all the ads_txt's AdsTXTS with an executor.
func (o *DemandPartnerChild) AdsTXTS(mods ...qm.QueryMod) adsTXTQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ads_txt\".\"demand_partner_child_id\"=?", o.ID),
	)

	return AdsTXTS(queryMods...)
}

// LoadDPConnection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (demandPartnerChildL) LoadDPConnection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDemandPartnerChild interface{}, mods queries.Applicator) error {
	var slice []*DemandPartnerChild
	var object *DemandPartnerChild

	if singular {
		var ok bool
		object, ok = maybeDemandPartnerChild.(*DemandPartnerChild)
		if !ok {
			object = new(DemandPartnerChild)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDemandPartnerChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDemandPartnerChild))
			}
		}
	} else {
		s, ok := maybeDemandPartnerChild.(*[]*DemandPartnerChild)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDemandPartnerChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDemandPartnerChild))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &demandPartnerChildR{}
		}
		args[object.DPConnectionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &demandPartnerChildR{}
			}

			args[obj.DPConnectionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`demand_partner_connection`),
		qm.WhereIn(`demand_partner_connection.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DemandPartnerConnection")
	}

	var resultSlice []*DemandPartnerConnection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DemandPartnerConnection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for demand_partner_connection")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for demand_partner_connection")
	}

	if len(demandPartnerConnectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DPConnection = foreign
		if foreign.R == nil {
			foreign.R = &demandPartnerConnectionR{}
		}
		foreign.R.DPConnectionDemandPartnerChildren = append(foreign.R.DPConnectionDemandPartnerChildren, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DPConnectionID == foreign.ID {
				local.R.DPConnection = foreign
				if foreign.R == nil {
					foreign.R = &demandPartnerConnectionR{}
				}
				foreign.R.DPConnectionDemandPartnerChildren = append(foreign.R.DPConnectionDemandPartnerChildren, local)
				break
			}
		}
	}

	return nil
}

// LoadAdsTXTS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (demandPartnerChildL) LoadAdsTXTS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDemandPartnerChild interface{}, mods queries.Applicator) error {
	var slice []*DemandPartnerChild
	var object *DemandPartnerChild

	if singular {
		var ok bool
		object, ok = maybeDemandPartnerChild.(*DemandPartnerChild)
		if !ok {
			object = new(DemandPartnerChild)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDemandPartnerChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDemandPartnerChild))
			}
		}
	} else {
		s, ok := maybeDemandPartnerChild.(*[]*DemandPartnerChild)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDemandPartnerChild)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDemandPartnerChild))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &demandPartnerChildR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &demandPartnerChildR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ads_txt`),
		qm.WhereIn(`ads_txt.demand_partner_child_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ads_txt")
	}

	var resultSlice []*AdsTXT
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ads_txt")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ads_txt")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ads_txt")
	}

	if len(adsTXTAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AdsTXTS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &adsTXTR{}
			}
			foreign.R.DemandPartnerChild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DemandPartnerChildID) {
				local.R.AdsTXTS = append(local.R.AdsTXTS, foreign)
				if foreign.R == nil {
					foreign.R = &adsTXTR{}
				}
				foreign.R.DemandPartnerChild = local
				break
			}
		}
	}

	return nil
}

// SetDPConnection of the demandPartnerChild to the related item.
// Sets o.R.DPConnection to related.
// Adds o to related.R.DPConnectionDemandPartnerChildren.
func (o *DemandPartnerChild) SetDPConnection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DemandPartnerConnection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"demand_partner_child\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dp_connection_id"}),
		strmangle.WhereClause("\"", "\"", 2, demandPartnerChildPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DPConnectionID = related.ID
	if o.R == nil {
		o.R = &demandPartnerChildR{
			DPConnection: related,
		}
	} else {
		o.R.DPConnection = related
	}

	if related.R == nil {
		related.R = &demandPartnerConnectionR{
			DPConnectionDemandPartnerChildren: DemandPartnerChildSlice{o},
		}
	} else {
		related.R.DPConnectionDemandPartnerChildren = append(related.R.DPConnectionDemandPartnerChildren, o)
	}

	return nil
}

// AddAdsTXTS adds the given related objects to the existing relationships
// of the demand_partner_child, optionally inserting them as new records.
// Appends related to o.R.AdsTXTS.
// Sets related.R.DemandPartnerChild appropriately.
func (o *DemandPartnerChild) AddAdsTXTS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AdsTXT) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DemandPartnerChildID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ads_txt\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"demand_partner_child_id"}),
				strmangle.WhereClause("\"", "\"", 2, adsTXTPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DemandPartnerChildID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &demandPartnerChildR{
			AdsTXTS: related,
		}
	} else {
		o.R.AdsTXTS = append(o.R.AdsTXTS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &adsTXTR{
				DemandPartnerChild: o,
			}
		} else {
			rel.R.DemandPartnerChild = o
		}
	}
	return nil
}

// SetAdsTXTS removes all previously related items of the
// demand_partner_child replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DemandPartnerChild's AdsTXTS accordingly.
// Replaces o.R.AdsTXTS with related.
// Sets related.R.DemandPartnerChild's AdsTXTS accordingly.
func (o *DemandPartnerChild) SetAdsTXTS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AdsTXT) error {
	query := "update \"ads_txt\" set \"demand_partner_child_id\" = null where \"demand_partner_child_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AdsTXTS {
			queries.SetScanner(&rel.DemandPartnerChildID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DemandPartnerChild = nil
		}
		o.R.AdsTXTS = nil
	}

	return o.AddAdsTXTS(ctx, exec, insert, related...)
}

// RemoveAdsTXTS relationships from objects passed in.
// Removes related items from R.AdsTXTS (uses pointer comparison, removal does not keep order)
// Sets related.R.DemandPartnerChild.
func (o *DemandPartnerChild) RemoveAdsTXTS(ctx context.Context, exec boil.ContextExecutor, related ...*AdsTXT) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DemandPartnerChildID, nil)
		if rel.R != nil {
			rel.R.DemandPartnerChild = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("demand_partner_child_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AdsTXTS {
			if rel != ri {
				continue
			}

			ln := len(o.R.AdsTXTS)
			if ln > 1 && i < ln-1 {
				o.R.AdsTXTS[i] = o.R.AdsTXTS[ln-1]
			}
			o.R.AdsTXTS = o.R.AdsTXTS[:ln-1]
			break
		}
	}

	return nil
}

// DemandPartnerChildren retrieves all the records using an executor.
func DemandPartnerChildren(mods ...qm.QueryMod) demandPartnerChildQuery {
	mods = append(mods, qm.From("\"demand_partner_child\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"demand_partner_child\".*"})
	}

	return demandPartnerChildQuery{q}
}

// FindDemandPartnerChild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDemandPartnerChild(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DemandPartnerChild, error) {
	demandPartnerChildObj := &DemandPartnerChild{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"demand_partner_child\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, demandPartnerChildObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from demand_partner_child")
	}

	if err = demandPartnerChildObj.doAfterSelectHooks(ctx, exec); err != nil {
		return demandPartnerChildObj, err
	}

	return demandPartnerChildObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DemandPartnerChild) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand_partner_child provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandPartnerChildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	demandPartnerChildInsertCacheMut.RLock()
	cache, cached := demandPartnerChildInsertCache[key]
	demandPartnerChildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			demandPartnerChildAllColumns,
			demandPartnerChildColumnsWithDefault,
			demandPartnerChildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(demandPartnerChildType, demandPartnerChildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(demandPartnerChildType, demandPartnerChildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"demand_partner_child\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"demand_partner_child\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into demand_partner_child")
	}

	if !cached {
		demandPartnerChildInsertCacheMut.Lock()
		demandPartnerChildInsertCache[key] = cache
		demandPartnerChildInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DemandPartnerChild.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DemandPartnerChild) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	demandPartnerChildUpdateCacheMut.RLock()
	cache, cached := demandPartnerChildUpdateCache[key]
	demandPartnerChildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			demandPartnerChildAllColumns,
			demandPartnerChildPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update demand_partner_child, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"demand_partner_child\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, demandPartnerChildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(demandPartnerChildType, demandPartnerChildMapping, append(wl, demandPartnerChildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update demand_partner_child row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for demand_partner_child")
	}

	if !cached {
		demandPartnerChildUpdateCacheMut.Lock()
		demandPartnerChildUpdateCache[key] = cache
		demandPartnerChildUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q demandPartnerChildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for demand_partner_child")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for demand_partner_child")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DemandPartnerChildSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"demand_partner_child\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, demandPartnerChildPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in demandPartnerChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all demandPartnerChild")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DemandPartnerChild) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no demand_partner_child provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandPartnerChildColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	demandPartnerChildUpsertCacheMut.RLock()
	cache, cached := demandPartnerChildUpsertCache[key]
	demandPartnerChildUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			demandPartnerChildAllColumns,
			demandPartnerChildColumnsWithDefault,
			demandPartnerChildColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			demandPartnerChildAllColumns,
			demandPartnerChildPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert demand_partner_child, could not build update column list")
		}

		ret := strmangle.SetComplement(demandPartnerChildAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(demandPartnerChildPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert demand_partner_child, could not build conflict column list")
			}

			conflict = make([]string, len(demandPartnerChildPrimaryKeyColumns))
			copy(conflict, demandPartnerChildPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"demand_partner_child\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(demandPartnerChildType, demandPartnerChildMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(demandPartnerChildType, demandPartnerChildMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert demand_partner_child")
	}

	if !cached {
		demandPartnerChildUpsertCacheMut.Lock()
		demandPartnerChildUpsertCache[key] = cache
		demandPartnerChildUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DemandPartnerChild record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DemandPartnerChild) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DemandPartnerChild provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), demandPartnerChildPrimaryKeyMapping)
	sql := "DELETE FROM \"demand_partner_child\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from demand_partner_child")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for demand_partner_child")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q demandPartnerChildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no demandPartnerChildQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand_partner_child")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_partner_child")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DemandPartnerChildSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(demandPartnerChildBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"demand_partner_child\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandPartnerChildPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demandPartnerChild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_partner_child")
	}

	if len(demandPartnerChildAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DemandPartnerChild) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDemandPartnerChild(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandPartnerChildSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DemandPartnerChildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerChildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"demand_partner_child\".* FROM \"demand_partner_child\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandPartnerChildPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DemandPartnerChildSlice")
	}

	*o = slice

	return nil
}

// DemandPartnerChildExists checks if the DemandPartnerChild row exists.
func DemandPartnerChildExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"demand_partner_child\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if demand_partner_child exists")
	}

	return exists, nil
}

// Exists checks if the DemandPartnerChild row exists.
func (o *DemandPartnerChild) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DemandPartnerChildExists(ctx, exec, o.ID)
}
