// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDpoAutomationLogs(t *testing.T) {
	t.Parallel()

	query := DpoAutomationLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDpoAutomationLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDpoAutomationLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DpoAutomationLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDpoAutomationLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DpoAutomationLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDpoAutomationLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DpoAutomationLogExists(ctx, tx, o.Time, o.DP, o.Country, o.Publisher, o.Domain, o.Os)
	if err != nil {
		t.Errorf("Unable to check if DpoAutomationLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DpoAutomationLogExists to return true, but got false.")
	}
}

func testDpoAutomationLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dpoAutomationLogFound, err := FindDpoAutomationLog(ctx, tx, o.Time, o.DP, o.Country, o.Publisher, o.Domain, o.Os)
	if err != nil {
		t.Error(err)
	}

	if dpoAutomationLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDpoAutomationLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DpoAutomationLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDpoAutomationLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DpoAutomationLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDpoAutomationLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dpoAutomationLogOne := &DpoAutomationLog{}
	dpoAutomationLogTwo := &DpoAutomationLog{}
	if err = randomize.Struct(seed, dpoAutomationLogOne, dpoAutomationLogDBTypes, false, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}
	if err = randomize.Struct(seed, dpoAutomationLogTwo, dpoAutomationLogDBTypes, false, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dpoAutomationLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dpoAutomationLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DpoAutomationLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDpoAutomationLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dpoAutomationLogOne := &DpoAutomationLog{}
	dpoAutomationLogTwo := &DpoAutomationLog{}
	if err = randomize.Struct(seed, dpoAutomationLogOne, dpoAutomationLogDBTypes, false, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}
	if err = randomize.Struct(seed, dpoAutomationLogTwo, dpoAutomationLogDBTypes, false, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dpoAutomationLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dpoAutomationLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dpoAutomationLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func dpoAutomationLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func dpoAutomationLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func dpoAutomationLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func dpoAutomationLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func dpoAutomationLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func dpoAutomationLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func dpoAutomationLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func dpoAutomationLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DpoAutomationLog) error {
	*o = DpoAutomationLog{}
	return nil
}

func testDpoAutomationLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DpoAutomationLog{}
	o := &DpoAutomationLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog object: %s", err)
	}

	AddDpoAutomationLogHook(boil.BeforeInsertHook, dpoAutomationLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogBeforeInsertHooks = []DpoAutomationLogHook{}

	AddDpoAutomationLogHook(boil.AfterInsertHook, dpoAutomationLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogAfterInsertHooks = []DpoAutomationLogHook{}

	AddDpoAutomationLogHook(boil.AfterSelectHook, dpoAutomationLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogAfterSelectHooks = []DpoAutomationLogHook{}

	AddDpoAutomationLogHook(boil.BeforeUpdateHook, dpoAutomationLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogBeforeUpdateHooks = []DpoAutomationLogHook{}

	AddDpoAutomationLogHook(boil.AfterUpdateHook, dpoAutomationLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogAfterUpdateHooks = []DpoAutomationLogHook{}

	AddDpoAutomationLogHook(boil.BeforeDeleteHook, dpoAutomationLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogBeforeDeleteHooks = []DpoAutomationLogHook{}

	AddDpoAutomationLogHook(boil.AfterDeleteHook, dpoAutomationLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogAfterDeleteHooks = []DpoAutomationLogHook{}

	AddDpoAutomationLogHook(boil.BeforeUpsertHook, dpoAutomationLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogBeforeUpsertHooks = []DpoAutomationLogHook{}

	AddDpoAutomationLogHook(boil.AfterUpsertHook, dpoAutomationLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dpoAutomationLogAfterUpsertHooks = []DpoAutomationLogHook{}
}

func testDpoAutomationLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDpoAutomationLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dpoAutomationLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDpoAutomationLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDpoAutomationLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DpoAutomationLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDpoAutomationLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DpoAutomationLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dpoAutomationLogDBTypes = map[string]string{`Time`: `timestamp without time zone`, `EvalTime`: `timestamp without time zone`, `Domain`: `character varying`, `Publisher`: `character varying`, `Os`: `character varying`, `Country`: `character varying`, `DP`: `character varying`, `BidRequest`: `integer`, `Revenue`: `double precision`, `Erpm`: `double precision`, `OldFactor`: `double precision`, `NewFactor`: `double precision`, `RespStatus`: `integer`}
	_                       = bytes.MinRead
)

func testDpoAutomationLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dpoAutomationLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dpoAutomationLogAllColumns) == len(dpoAutomationLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDpoAutomationLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dpoAutomationLogAllColumns) == len(dpoAutomationLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DpoAutomationLog{}
	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dpoAutomationLogDBTypes, true, dpoAutomationLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dpoAutomationLogAllColumns, dpoAutomationLogPrimaryKeyColumns) {
		fields = dpoAutomationLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			dpoAutomationLogAllColumns,
			dpoAutomationLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DpoAutomationLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDpoAutomationLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(dpoAutomationLogAllColumns) == len(dpoAutomationLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DpoAutomationLog{}
	if err = randomize.Struct(seed, &o, dpoAutomationLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DpoAutomationLog: %s", err)
	}

	count, err := DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dpoAutomationLogDBTypes, false, dpoAutomationLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DpoAutomationLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DpoAutomationLog: %s", err)
	}

	count, err = DpoAutomationLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
