// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFloors(t *testing.T) {
	t.Parallel()

	query := Floors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFloorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFloorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Floors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFloorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FloorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFloorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FloorExists(ctx, tx, o.Publisher, o.Domain, o.Device, o.Country)
	if err != nil {
		t.Errorf("Unable to check if Floor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FloorExists to return true, but got false.")
	}
}

func testFloorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	floorFound, err := FindFloor(ctx, tx, o.Publisher, o.Domain, o.Device, o.Country)
	if err != nil {
		t.Error(err)
	}

	if floorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFloorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Floors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFloorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Floors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFloorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	floorOne := &Floor{}
	floorTwo := &Floor{}
	if err = randomize.Struct(seed, floorOne, floorDBTypes, false, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}
	if err = randomize.Struct(seed, floorTwo, floorDBTypes, false, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = floorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = floorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Floors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFloorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	floorOne := &Floor{}
	floorTwo := &Floor{}
	if err = randomize.Struct(seed, floorOne, floorDBTypes, false, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}
	if err = randomize.Struct(seed, floorTwo, floorDBTypes, false, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = floorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = floorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func floorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func floorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func floorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func floorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func floorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func floorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func floorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func floorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func floorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Floor) error {
	*o = Floor{}
	return nil
}

func testFloorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Floor{}
	o := &Floor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, floorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Floor object: %s", err)
	}

	AddFloorHook(boil.BeforeInsertHook, floorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	floorBeforeInsertHooks = []FloorHook{}

	AddFloorHook(boil.AfterInsertHook, floorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	floorAfterInsertHooks = []FloorHook{}

	AddFloorHook(boil.AfterSelectHook, floorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	floorAfterSelectHooks = []FloorHook{}

	AddFloorHook(boil.BeforeUpdateHook, floorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	floorBeforeUpdateHooks = []FloorHook{}

	AddFloorHook(boil.AfterUpdateHook, floorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	floorAfterUpdateHooks = []FloorHook{}

	AddFloorHook(boil.BeforeDeleteHook, floorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	floorBeforeDeleteHooks = []FloorHook{}

	AddFloorHook(boil.AfterDeleteHook, floorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	floorAfterDeleteHooks = []FloorHook{}

	AddFloorHook(boil.BeforeUpsertHook, floorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	floorBeforeUpsertHooks = []FloorHook{}

	AddFloorHook(boil.AfterUpsertHook, floorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	floorAfterUpsertHooks = []FloorHook{}
}

func testFloorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFloorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(floorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFloorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFloorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FloorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFloorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Floors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	floorDBTypes = map[string]string{`Publisher`: `character varying`, `Domain`: `character varying`, `Country`: `character varying`, `Device`: `character varying`, `Floor`: `double precision`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `RuleID`: `character varying`, `DemandPartnerID`: `character varying`, `Browser`: `character varying`, `Os`: `character varying`, `PlacementType`: `character varying`}
	_            = bytes.MinRead
)

func testFloorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(floorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(floorAllColumns) == len(floorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, floorDBTypes, true, floorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFloorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(floorAllColumns) == len(floorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Floor{}
	if err = randomize.Struct(seed, o, floorDBTypes, true, floorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, floorDBTypes, true, floorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(floorAllColumns, floorPrimaryKeyColumns) {
		fields = floorAllColumns
	} else {
		fields = strmangle.SetComplement(
			floorAllColumns,
			floorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FloorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFloorsUpsert(t *testing.T) {
	t.Parallel()

	if len(floorAllColumns) == len(floorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Floor{}
	if err = randomize.Struct(seed, &o, floorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Floor: %s", err)
	}

	count, err := Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, floorDBTypes, false, floorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Floor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Floor: %s", err)
	}

	count, err = Floors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
