package inventory

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"sort"
	"strings"
	"time"

	"github.com/bramvdbogaerde/go-scp"
	"github.com/bramvdbogaerde/go-scp/auth"
	"github.com/digitalocean/godo"
	"github.com/friendsofgo/errors"
	"github.com/m6yf/bcwork/config"
	"github.com/rs/zerolog/log"
	"github.com/spf13/viper"
	"golang.org/x/crypto/ssh"
)

type Worker struct {
	Name string `json:"name"`
}

func (w *Worker) Init(ctx context.Context, conf config.StringMap) error {

	return nil
}

func (w *Worker) Do(ctx context.Context) error {
	doClient := godo.NewFromToken(viper.GetString("digitalocean.token"))

	dropletsList, err := DropletList(ctx, doClient)
	if err != nil {
		return errors.Wrapf(err, "failed to fetch droplet list")
	}

	data := make(map[string][]string, 0)
	for _, d := range dropletsList {
		rec := GetRecord(&d)
		roles := GetDropletsRoles(&d)
		for _, role := range roles {
			data[role] = append(data[role], rec)
		}
	}

	ini := GenerateIniFile(data)
	inventoryFileName := "inventory.ini"
	b := []byte(ini)
	err = os.WriteFile(inventoryFileName, b, 0644)
	if err != nil {
		return errors.Wrapf(err, "failed to save temporary inventory file")
	}

	err = SendInventoryFileToBuilder(inventoryFileName, "bcproxy-nyc1-01")
	if err != nil {
		return errors.Wrapf(err, "failed to copy inventory file")
	}

	return nil
}

func (w *Worker) GetSleep() int {
	return 0
}

func DropletList(ctx context.Context, client *godo.Client) ([]godo.Droplet, error) {
	// create a list to hold our droplets
	list := []godo.Droplet{}

	// create options. initially, these will be blank
	opt := &godo.ListOptions{}
	for {
		droplets, resp, err := client.Droplets.List(ctx, opt)
		if err != nil {
			return nil, err
		}

		// append the current page's droplets to our list
		list = append(list, droplets...)

		// if we are at the last page, break out the for loop
		if resp.Links == nil || resp.Links.IsLastPage() {
			break
		}

		page, err := resp.Links.CurrentPage()
		if err != nil {
			return nil, err
		}

		// set the page we want for the next request
		opt.Page = page + 1
	}

	return list, nil
}

func GetDropletsRoles(d *godo.Droplet) []string {

	var res []string
	for _, t := range d.Tags {
		if strings.Index(t, "role-") == 0 {
			res = append(res, t[5:])
		}
	}

	return res
}

func GetRecord(d *godo.Droplet) string {
	res := []string{d.Name}

	for _, n := range d.Networks.V4 {
		if n.Type == "public" {
			res = append(res, "ip="+n.IPAddress)
		} else if n.Type == "private" {
			res = append(res, "ip_private="+n.IPAddress)
		}
	}

	return strings.Join(res, " ")
}

func GenerateIniFile(data map[string][]string) string {

	buf := bytes.Buffer{}
	buf.WriteString("########################\n")
	buf.WriteString(fmt.Sprintf("# This Ansible inventory file was auto generated by invetory worker on %s\n", time.Now().Format("2006-01-02 15:04")))
	buf.WriteString("########################\n")

	for role, hosts := range data {
		sort.Strings(hosts)
		buf.WriteString("\n[" + role + "]\n")
		for _, host := range hosts {
			buf.WriteString(host + "\n")
		}
	}

	return buf.String()
}

func SendInventoryFileToBuilder(inventoryFile string, builder string) error {

	// Use SSH key authentication from the auth package
	// we ignore the host key in this example, please change this if you use this library
	clientConfig, err := auth.PrivateKey("root", "/Users/yiftah/.ssh/id_rsa_brightcom", ssh.InsecureIgnoreHostKey())
	if err != nil {
		return errors.Wrapf(err, "failed to open ssh key file")
	}

	// Open a file
	f, err := os.Open(inventoryFile)
	if err != nil {
		return errors.Wrapf(err, "failed to open temporary hosts file")
	}

	// Create a new SCP client
	client := scp.NewClient(builder+":22", &clientConfig)

	// Connect to the remote server
	err = client.Connect()
	if err != nil {
		return errors.Wrapf(err, "failed to ssh connect to %s", builder)
	}

	// Finaly, copy the file over
	// Usage: CopyFromFile(context, file, remotePath, permission)

	// the context can be adjusted to provide time-outs or inherit from other contexts if this is embedded in a larger application.
	err = client.CopyFromFile(context.Background(), *f, "/etc/ansible/brightcom_hosts", "0655")
	if err != nil {
		return errors.Wrapf(err, "failed to copy hosts file to %s", builder)
	}

	client.Close()
	f.Close()

	log.Info().Msgf("inventory file copied to %s", builder)

	return nil

}
