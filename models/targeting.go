// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Targeting is an object representing the database table.
type Targeting struct {
	ID            int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	Publisher     string            `boil:"publisher" json:"publisher" toml:"publisher" yaml:"publisher"`
	Domain        string            `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	UnitSize      string            `boil:"unit_size" json:"unit_size" toml:"unit_size" yaml:"unit_size"`
	PlacementType null.String       `boil:"placement_type" json:"placement_type,omitempty" toml:"placement_type" yaml:"placement_type,omitempty"`
	Country       types.StringArray `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	DeviceType    types.StringArray `boil:"device_type" json:"device_type,omitempty" toml:"device_type" yaml:"device_type,omitempty"`
	Browser       types.StringArray `boil:"browser" json:"browser,omitempty" toml:"browser" yaml:"browser,omitempty"`
	Os            types.StringArray `boil:"os" json:"os,omitempty" toml:"os" yaml:"os,omitempty"`
	KV            null.JSON         `boil:"kv" json:"kv,omitempty" toml:"kv" yaml:"kv,omitempty"`
	PriceModel    string            `boil:"price_model" json:"price_model" toml:"price_model" yaml:"price_model"`
	Value         float64           `boil:"value" json:"value" toml:"value" yaml:"value"`
	DailyCap      null.Int          `boil:"daily_cap" json:"daily_cap,omitempty" toml:"daily_cap" yaml:"daily_cap,omitempty"`
	CreatedAt     time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Status        string            `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *targetingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L targetingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TargetingColumns = struct {
	ID            string
	Publisher     string
	Domain        string
	UnitSize      string
	PlacementType string
	Country       string
	DeviceType    string
	Browser       string
	Os            string
	KV            string
	PriceModel    string
	Value         string
	DailyCap      string
	CreatedAt     string
	UpdatedAt     string
	Status        string
}{
	ID:            "id",
	Publisher:     "publisher",
	Domain:        "domain",
	UnitSize:      "unit_size",
	PlacementType: "placement_type",
	Country:       "country",
	DeviceType:    "device_type",
	Browser:       "browser",
	Os:            "os",
	KV:            "kv",
	PriceModel:    "price_model",
	Value:         "value",
	DailyCap:      "daily_cap",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	Status:        "status",
}

var TargetingTableColumns = struct {
	ID            string
	Publisher     string
	Domain        string
	UnitSize      string
	PlacementType string
	Country       string
	DeviceType    string
	Browser       string
	Os            string
	KV            string
	PriceModel    string
	Value         string
	DailyCap      string
	CreatedAt     string
	UpdatedAt     string
	Status        string
}{
	ID:            "targeting.id",
	Publisher:     "targeting.publisher",
	Domain:        "targeting.domain",
	UnitSize:      "targeting.unit_size",
	PlacementType: "targeting.placement_type",
	Country:       "targeting.country",
	DeviceType:    "targeting.device_type",
	Browser:       "targeting.browser",
	Os:            "targeting.os",
	KV:            "targeting.kv",
	PriceModel:    "targeting.price_model",
	Value:         "targeting.value",
	DailyCap:      "targeting.daily_cap",
	CreatedAt:     "targeting.created_at",
	UpdatedAt:     "targeting.updated_at",
	Status:        "targeting.status",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TargetingWhere = struct {
	ID            whereHelperint
	Publisher     whereHelperstring
	Domain        whereHelperstring
	UnitSize      whereHelperstring
	PlacementType whereHelpernull_String
	Country       whereHelpertypes_StringArray
	DeviceType    whereHelpertypes_StringArray
	Browser       whereHelpertypes_StringArray
	Os            whereHelpertypes_StringArray
	KV            whereHelpernull_JSON
	PriceModel    whereHelperstring
	Value         whereHelperfloat64
	DailyCap      whereHelpernull_Int
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpernull_Time
	Status        whereHelperstring
}{
	ID:            whereHelperint{field: "\"targeting\".\"id\""},
	Publisher:     whereHelperstring{field: "\"targeting\".\"publisher\""},
	Domain:        whereHelperstring{field: "\"targeting\".\"domain\""},
	UnitSize:      whereHelperstring{field: "\"targeting\".\"unit_size\""},
	PlacementType: whereHelpernull_String{field: "\"targeting\".\"placement_type\""},
	Country:       whereHelpertypes_StringArray{field: "\"targeting\".\"country\""},
	DeviceType:    whereHelpertypes_StringArray{field: "\"targeting\".\"device_type\""},
	Browser:       whereHelpertypes_StringArray{field: "\"targeting\".\"browser\""},
	Os:            whereHelpertypes_StringArray{field: "\"targeting\".\"os\""},
	KV:            whereHelpernull_JSON{field: "\"targeting\".\"kv\""},
	PriceModel:    whereHelperstring{field: "\"targeting\".\"price_model\""},
	Value:         whereHelperfloat64{field: "\"targeting\".\"value\""},
	DailyCap:      whereHelpernull_Int{field: "\"targeting\".\"daily_cap\""},
	CreatedAt:     whereHelpertime_Time{field: "\"targeting\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"targeting\".\"updated_at\""},
	Status:        whereHelperstring{field: "\"targeting\".\"status\""},
}

// TargetingRels is where relationship names are stored.
var TargetingRels = struct {
	TargetingPublisher string
}{
	TargetingPublisher: "TargetingPublisher",
}

// targetingR is where relationships are stored.
type targetingR struct {
	TargetingPublisher *Publisher `boil:"TargetingPublisher" json:"TargetingPublisher" toml:"TargetingPublisher" yaml:"TargetingPublisher"`
}

// NewStruct creates a new relationship struct
func (*targetingR) NewStruct() *targetingR {
	return &targetingR{}
}

func (r *targetingR) GetTargetingPublisher() *Publisher {
	if r == nil {
		return nil
	}
	return r.TargetingPublisher
}

// targetingL is where Load methods for each relationship are stored.
type targetingL struct{}

var (
	targetingAllColumns            = []string{"id", "publisher", "domain", "unit_size", "placement_type", "country", "device_type", "browser", "os", "kv", "price_model", "value", "daily_cap", "created_at", "updated_at", "status"}
	targetingColumnsWithoutDefault = []string{"publisher", "domain", "unit_size", "price_model", "value", "created_at", "status"}
	targetingColumnsWithDefault    = []string{"id", "placement_type", "country", "device_type", "browser", "os", "kv", "daily_cap", "updated_at"}
	targetingPrimaryKeyColumns     = []string{"id"}
	targetingGeneratedColumns      = []string{}
)

type (
	// TargetingSlice is an alias for a slice of pointers to Targeting.
	// This should almost always be used instead of []Targeting.
	TargetingSlice []*Targeting
	// TargetingHook is the signature for custom Targeting hook methods
	TargetingHook func(context.Context, boil.ContextExecutor, *Targeting) error

	targetingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	targetingType                 = reflect.TypeOf(&Targeting{})
	targetingMapping              = queries.MakeStructMapping(targetingType)
	targetingPrimaryKeyMapping, _ = queries.BindMapping(targetingType, targetingMapping, targetingPrimaryKeyColumns)
	targetingInsertCacheMut       sync.RWMutex
	targetingInsertCache          = make(map[string]insertCache)
	targetingUpdateCacheMut       sync.RWMutex
	targetingUpdateCache          = make(map[string]updateCache)
	targetingUpsertCacheMut       sync.RWMutex
	targetingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var targetingAfterSelectMu sync.Mutex
var targetingAfterSelectHooks []TargetingHook

var targetingBeforeInsertMu sync.Mutex
var targetingBeforeInsertHooks []TargetingHook
var targetingAfterInsertMu sync.Mutex
var targetingAfterInsertHooks []TargetingHook

var targetingBeforeUpdateMu sync.Mutex
var targetingBeforeUpdateHooks []TargetingHook
var targetingAfterUpdateMu sync.Mutex
var targetingAfterUpdateHooks []TargetingHook

var targetingBeforeDeleteMu sync.Mutex
var targetingBeforeDeleteHooks []TargetingHook
var targetingAfterDeleteMu sync.Mutex
var targetingAfterDeleteHooks []TargetingHook

var targetingBeforeUpsertMu sync.Mutex
var targetingBeforeUpsertHooks []TargetingHook
var targetingAfterUpsertMu sync.Mutex
var targetingAfterUpsertHooks []TargetingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Targeting) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Targeting) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Targeting) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Targeting) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Targeting) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Targeting) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Targeting) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Targeting) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Targeting) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range targetingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTargetingHook registers your hook function for all future operations.
func AddTargetingHook(hookPoint boil.HookPoint, targetingHook TargetingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		targetingAfterSelectMu.Lock()
		targetingAfterSelectHooks = append(targetingAfterSelectHooks, targetingHook)
		targetingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		targetingBeforeInsertMu.Lock()
		targetingBeforeInsertHooks = append(targetingBeforeInsertHooks, targetingHook)
		targetingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		targetingAfterInsertMu.Lock()
		targetingAfterInsertHooks = append(targetingAfterInsertHooks, targetingHook)
		targetingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		targetingBeforeUpdateMu.Lock()
		targetingBeforeUpdateHooks = append(targetingBeforeUpdateHooks, targetingHook)
		targetingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		targetingAfterUpdateMu.Lock()
		targetingAfterUpdateHooks = append(targetingAfterUpdateHooks, targetingHook)
		targetingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		targetingBeforeDeleteMu.Lock()
		targetingBeforeDeleteHooks = append(targetingBeforeDeleteHooks, targetingHook)
		targetingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		targetingAfterDeleteMu.Lock()
		targetingAfterDeleteHooks = append(targetingAfterDeleteHooks, targetingHook)
		targetingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		targetingBeforeUpsertMu.Lock()
		targetingBeforeUpsertHooks = append(targetingBeforeUpsertHooks, targetingHook)
		targetingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		targetingAfterUpsertMu.Lock()
		targetingAfterUpsertHooks = append(targetingAfterUpsertHooks, targetingHook)
		targetingAfterUpsertMu.Unlock()
	}
}

// One returns a single targeting record from the query.
func (q targetingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Targeting, error) {
	o := &Targeting{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for targeting")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Targeting records from the query.
func (q targetingQuery) All(ctx context.Context, exec boil.ContextExecutor) (TargetingSlice, error) {
	var o []*Targeting

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Targeting slice")
	}

	if len(targetingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Targeting records in the query.
func (q targetingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count targeting rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q targetingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if targeting exists")
	}

	return count > 0, nil
}

// TargetingPublisher pointed to by the foreign key.
func (o *Targeting) TargetingPublisher(mods ...qm.QueryMod) publisherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"publisher_id\" = ?", o.Publisher),
	}

	queryMods = append(queryMods, mods...)

	return Publishers(queryMods...)
}

// LoadTargetingPublisher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (targetingL) LoadTargetingPublisher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTargeting interface{}, mods queries.Applicator) error {
	var slice []*Targeting
	var object *Targeting

	if singular {
		var ok bool
		object, ok = maybeTargeting.(*Targeting)
		if !ok {
			object = new(Targeting)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTargeting)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTargeting))
			}
		}
	} else {
		s, ok := maybeTargeting.(*[]*Targeting)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTargeting)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTargeting))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &targetingR{}
		}
		args[object.Publisher] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &targetingR{}
			}

			args[obj.Publisher] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`publisher`),
		qm.WhereIn(`publisher.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Publisher")
	}

	var resultSlice []*Publisher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Publisher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for publisher")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publisher")
	}

	if len(publisherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TargetingPublisher = foreign
		if foreign.R == nil {
			foreign.R = &publisherR{}
		}
		foreign.R.Targetings = append(foreign.R.Targetings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Publisher == foreign.PublisherID {
				local.R.TargetingPublisher = foreign
				if foreign.R == nil {
					foreign.R = &publisherR{}
				}
				foreign.R.Targetings = append(foreign.R.Targetings, local)
				break
			}
		}
	}

	return nil
}

// SetTargetingPublisher of the targeting to the related item.
// Sets o.R.TargetingPublisher to related.
// Adds o to related.R.Targetings.
func (o *Targeting) SetTargetingPublisher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Publisher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"targeting\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"publisher"}),
		strmangle.WhereClause("\"", "\"", 2, targetingPrimaryKeyColumns),
	)
	values := []interface{}{related.PublisherID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Publisher = related.PublisherID
	if o.R == nil {
		o.R = &targetingR{
			TargetingPublisher: related,
		}
	} else {
		o.R.TargetingPublisher = related
	}

	if related.R == nil {
		related.R = &publisherR{
			Targetings: TargetingSlice{o},
		}
	} else {
		related.R.Targetings = append(related.R.Targetings, o)
	}

	return nil
}

// Targetings retrieves all the records using an executor.
func Targetings(mods ...qm.QueryMod) targetingQuery {
	mods = append(mods, qm.From("\"targeting\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"targeting\".*"})
	}

	return targetingQuery{q}
}

// FindTargeting retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTargeting(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Targeting, error) {
	targetingObj := &Targeting{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"targeting\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, targetingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from targeting")
	}

	if err = targetingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return targetingObj, err
	}

	return targetingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Targeting) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no targeting provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	targetingInsertCacheMut.RLock()
	cache, cached := targetingInsertCache[key]
	targetingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			targetingAllColumns,
			targetingColumnsWithDefault,
			targetingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(targetingType, targetingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(targetingType, targetingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"targeting\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"targeting\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into targeting")
	}

	if !cached {
		targetingInsertCacheMut.Lock()
		targetingInsertCache[key] = cache
		targetingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Targeting.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Targeting) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	targetingUpdateCacheMut.RLock()
	cache, cached := targetingUpdateCache[key]
	targetingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			targetingAllColumns,
			targetingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update targeting, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"targeting\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, targetingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(targetingType, targetingMapping, append(wl, targetingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update targeting row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for targeting")
	}

	if !cached {
		targetingUpdateCacheMut.Lock()
		targetingUpdateCache[key] = cache
		targetingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q targetingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for targeting")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for targeting")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TargetingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"targeting\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, targetingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in targeting slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all targeting")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Targeting) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no targeting provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(targetingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	targetingUpsertCacheMut.RLock()
	cache, cached := targetingUpsertCache[key]
	targetingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			targetingAllColumns,
			targetingColumnsWithDefault,
			targetingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			targetingAllColumns,
			targetingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert targeting, could not build update column list")
		}

		ret := strmangle.SetComplement(targetingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(targetingPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert targeting, could not build conflict column list")
			}

			conflict = make([]string, len(targetingPrimaryKeyColumns))
			copy(conflict, targetingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"targeting\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(targetingType, targetingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(targetingType, targetingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert targeting")
	}

	if !cached {
		targetingUpsertCacheMut.Lock()
		targetingUpsertCache[key] = cache
		targetingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Targeting record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Targeting) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Targeting provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), targetingPrimaryKeyMapping)
	sql := "DELETE FROM \"targeting\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from targeting")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for targeting")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q targetingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no targetingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from targeting")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for targeting")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TargetingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(targetingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"targeting\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, targetingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from targeting slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for targeting")
	}

	if len(targetingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Targeting) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTargeting(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TargetingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TargetingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), targetingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"targeting\".* FROM \"targeting\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, targetingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TargetingSlice")
	}

	*o = slice

	return nil
}

// TargetingExists checks if the Targeting row exists.
func TargetingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"targeting\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if targeting exists")
	}

	return exists, nil
}

// Exists checks if the Targeting row exists.
func (o *Targeting) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TargetingExists(ctx, exec, o.ID)
}
