// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DemandPartnerHourly is an object representing the database table.
type DemandPartnerHourly struct {
	Time            time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	DemandPartnerID string    `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	Domain          string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Impression      int64     `boil:"impression" json:"impression" toml:"impression" yaml:"impression"`
	Revenue         float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`

	R *demandPartnerHourlyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L demandPartnerHourlyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DemandPartnerHourlyColumns = struct {
	Time            string
	DemandPartnerID string
	Domain          string
	Impression      string
	Revenue         string
}{
	Time:            "time",
	DemandPartnerID: "demand_partner_id",
	Domain:          "domain",
	Impression:      "impression",
	Revenue:         "revenue",
}

var DemandPartnerHourlyTableColumns = struct {
	Time            string
	DemandPartnerID string
	Domain          string
	Impression      string
	Revenue         string
}{
	Time:            "demand_partner_hourly.time",
	DemandPartnerID: "demand_partner_hourly.demand_partner_id",
	Domain:          "demand_partner_hourly.domain",
	Impression:      "demand_partner_hourly.impression",
	Revenue:         "demand_partner_hourly.revenue",
}

// Generated where

var DemandPartnerHourlyWhere = struct {
	Time            whereHelpertime_Time
	DemandPartnerID whereHelperstring
	Domain          whereHelperstring
	Impression      whereHelperint64
	Revenue         whereHelperfloat64
}{
	Time:            whereHelpertime_Time{field: "\"demand_partner_hourly\".\"time\""},
	DemandPartnerID: whereHelperstring{field: "\"demand_partner_hourly\".\"demand_partner_id\""},
	Domain:          whereHelperstring{field: "\"demand_partner_hourly\".\"domain\""},
	Impression:      whereHelperint64{field: "\"demand_partner_hourly\".\"impression\""},
	Revenue:         whereHelperfloat64{field: "\"demand_partner_hourly\".\"revenue\""},
}

// DemandPartnerHourlyRels is where relationship names are stored.
var DemandPartnerHourlyRels = struct {
}{}

// demandPartnerHourlyR is where relationships are stored.
type demandPartnerHourlyR struct {
}

// NewStruct creates a new relationship struct
func (*demandPartnerHourlyR) NewStruct() *demandPartnerHourlyR {
	return &demandPartnerHourlyR{}
}

// demandPartnerHourlyL is where Load methods for each relationship are stored.
type demandPartnerHourlyL struct{}

var (
	demandPartnerHourlyAllColumns            = []string{"time", "demand_partner_id", "domain", "impression", "revenue"}
	demandPartnerHourlyColumnsWithoutDefault = []string{"time", "demand_partner_id", "domain"}
	demandPartnerHourlyColumnsWithDefault    = []string{"impression", "revenue"}
	demandPartnerHourlyPrimaryKeyColumns     = []string{"time", "demand_partner_id", "domain"}
	demandPartnerHourlyGeneratedColumns      = []string{}
)

type (
	// DemandPartnerHourlySlice is an alias for a slice of pointers to DemandPartnerHourly.
	// This should almost always be used instead of []DemandPartnerHourly.
	DemandPartnerHourlySlice []*DemandPartnerHourly
	// DemandPartnerHourlyHook is the signature for custom DemandPartnerHourly hook methods
	DemandPartnerHourlyHook func(context.Context, boil.ContextExecutor, *DemandPartnerHourly) error

	demandPartnerHourlyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	demandPartnerHourlyType                 = reflect.TypeOf(&DemandPartnerHourly{})
	demandPartnerHourlyMapping              = queries.MakeStructMapping(demandPartnerHourlyType)
	demandPartnerHourlyPrimaryKeyMapping, _ = queries.BindMapping(demandPartnerHourlyType, demandPartnerHourlyMapping, demandPartnerHourlyPrimaryKeyColumns)
	demandPartnerHourlyInsertCacheMut       sync.RWMutex
	demandPartnerHourlyInsertCache          = make(map[string]insertCache)
	demandPartnerHourlyUpdateCacheMut       sync.RWMutex
	demandPartnerHourlyUpdateCache          = make(map[string]updateCache)
	demandPartnerHourlyUpsertCacheMut       sync.RWMutex
	demandPartnerHourlyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var demandPartnerHourlyAfterSelectHooks []DemandPartnerHourlyHook

var demandPartnerHourlyBeforeInsertHooks []DemandPartnerHourlyHook
var demandPartnerHourlyAfterInsertHooks []DemandPartnerHourlyHook

var demandPartnerHourlyBeforeUpdateHooks []DemandPartnerHourlyHook
var demandPartnerHourlyAfterUpdateHooks []DemandPartnerHourlyHook

var demandPartnerHourlyBeforeDeleteHooks []DemandPartnerHourlyHook
var demandPartnerHourlyAfterDeleteHooks []DemandPartnerHourlyHook

var demandPartnerHourlyBeforeUpsertHooks []DemandPartnerHourlyHook
var demandPartnerHourlyAfterUpsertHooks []DemandPartnerHourlyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DemandPartnerHourly) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DemandPartnerHourly) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DemandPartnerHourly) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DemandPartnerHourly) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DemandPartnerHourly) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DemandPartnerHourly) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DemandPartnerHourly) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DemandPartnerHourly) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DemandPartnerHourly) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandPartnerHourlyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDemandPartnerHourlyHook registers your hook function for all future operations.
func AddDemandPartnerHourlyHook(hookPoint boil.HookPoint, demandPartnerHourlyHook DemandPartnerHourlyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		demandPartnerHourlyAfterSelectHooks = append(demandPartnerHourlyAfterSelectHooks, demandPartnerHourlyHook)
	case boil.BeforeInsertHook:
		demandPartnerHourlyBeforeInsertHooks = append(demandPartnerHourlyBeforeInsertHooks, demandPartnerHourlyHook)
	case boil.AfterInsertHook:
		demandPartnerHourlyAfterInsertHooks = append(demandPartnerHourlyAfterInsertHooks, demandPartnerHourlyHook)
	case boil.BeforeUpdateHook:
		demandPartnerHourlyBeforeUpdateHooks = append(demandPartnerHourlyBeforeUpdateHooks, demandPartnerHourlyHook)
	case boil.AfterUpdateHook:
		demandPartnerHourlyAfterUpdateHooks = append(demandPartnerHourlyAfterUpdateHooks, demandPartnerHourlyHook)
	case boil.BeforeDeleteHook:
		demandPartnerHourlyBeforeDeleteHooks = append(demandPartnerHourlyBeforeDeleteHooks, demandPartnerHourlyHook)
	case boil.AfterDeleteHook:
		demandPartnerHourlyAfterDeleteHooks = append(demandPartnerHourlyAfterDeleteHooks, demandPartnerHourlyHook)
	case boil.BeforeUpsertHook:
		demandPartnerHourlyBeforeUpsertHooks = append(demandPartnerHourlyBeforeUpsertHooks, demandPartnerHourlyHook)
	case boil.AfterUpsertHook:
		demandPartnerHourlyAfterUpsertHooks = append(demandPartnerHourlyAfterUpsertHooks, demandPartnerHourlyHook)
	}
}

// One returns a single demandPartnerHourly record from the query.
func (q demandPartnerHourlyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DemandPartnerHourly, error) {
	o := &DemandPartnerHourly{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for demand_partner_hourly")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DemandPartnerHourly records from the query.
func (q demandPartnerHourlyQuery) All(ctx context.Context, exec boil.ContextExecutor) (DemandPartnerHourlySlice, error) {
	var o []*DemandPartnerHourly

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DemandPartnerHourly slice")
	}

	if len(demandPartnerHourlyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DemandPartnerHourly records in the query.
func (q demandPartnerHourlyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count demand_partner_hourly rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q demandPartnerHourlyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if demand_partner_hourly exists")
	}

	return count > 0, nil
}

// DemandPartnerHourlies retrieves all the records using an executor.
func DemandPartnerHourlies(mods ...qm.QueryMod) demandPartnerHourlyQuery {
	mods = append(mods, qm.From("\"demand_partner_hourly\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"demand_partner_hourly\".*"})
	}

	return demandPartnerHourlyQuery{q}
}

// FindDemandPartnerHourly retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDemandPartnerHourly(ctx context.Context, exec boil.ContextExecutor, time time.Time, demandPartnerID string, domain string, selectCols ...string) (*DemandPartnerHourly, error) {
	demandPartnerHourlyObj := &DemandPartnerHourly{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"demand_partner_hourly\" where \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"domain\"=$3", sel,
	)

	q := queries.Raw(query, time, demandPartnerID, domain)

	err := q.Bind(ctx, exec, demandPartnerHourlyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from demand_partner_hourly")
	}

	if err = demandPartnerHourlyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return demandPartnerHourlyObj, err
	}

	return demandPartnerHourlyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DemandPartnerHourly) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand_partner_hourly provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandPartnerHourlyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	demandPartnerHourlyInsertCacheMut.RLock()
	cache, cached := demandPartnerHourlyInsertCache[key]
	demandPartnerHourlyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			demandPartnerHourlyAllColumns,
			demandPartnerHourlyColumnsWithDefault,
			demandPartnerHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(demandPartnerHourlyType, demandPartnerHourlyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(demandPartnerHourlyType, demandPartnerHourlyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"demand_partner_hourly\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"demand_partner_hourly\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into demand_partner_hourly")
	}

	if !cached {
		demandPartnerHourlyInsertCacheMut.Lock()
		demandPartnerHourlyInsertCache[key] = cache
		demandPartnerHourlyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DemandPartnerHourly.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DemandPartnerHourly) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	demandPartnerHourlyUpdateCacheMut.RLock()
	cache, cached := demandPartnerHourlyUpdateCache[key]
	demandPartnerHourlyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			demandPartnerHourlyAllColumns,
			demandPartnerHourlyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update demand_partner_hourly, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"demand_partner_hourly\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, demandPartnerHourlyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(demandPartnerHourlyType, demandPartnerHourlyMapping, append(wl, demandPartnerHourlyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update demand_partner_hourly row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for demand_partner_hourly")
	}

	if !cached {
		demandPartnerHourlyUpdateCacheMut.Lock()
		demandPartnerHourlyUpdateCache[key] = cache
		demandPartnerHourlyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q demandPartnerHourlyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for demand_partner_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for demand_partner_hourly")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DemandPartnerHourlySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"demand_partner_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, demandPartnerHourlyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in demandPartnerHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all demandPartnerHourly")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DemandPartnerHourly) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand_partner_hourly provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandPartnerHourlyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	demandPartnerHourlyUpsertCacheMut.RLock()
	cache, cached := demandPartnerHourlyUpsertCache[key]
	demandPartnerHourlyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			demandPartnerHourlyAllColumns,
			demandPartnerHourlyColumnsWithDefault,
			demandPartnerHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			demandPartnerHourlyAllColumns,
			demandPartnerHourlyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert demand_partner_hourly, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(demandPartnerHourlyPrimaryKeyColumns))
			copy(conflict, demandPartnerHourlyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"demand_partner_hourly\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(demandPartnerHourlyType, demandPartnerHourlyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(demandPartnerHourlyType, demandPartnerHourlyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert demand_partner_hourly")
	}

	if !cached {
		demandPartnerHourlyUpsertCacheMut.Lock()
		demandPartnerHourlyUpsertCache[key] = cache
		demandPartnerHourlyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DemandPartnerHourly record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DemandPartnerHourly) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DemandPartnerHourly provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), demandPartnerHourlyPrimaryKeyMapping)
	sql := "DELETE FROM \"demand_partner_hourly\" WHERE \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"domain\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from demand_partner_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for demand_partner_hourly")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q demandPartnerHourlyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no demandPartnerHourlyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand_partner_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_partner_hourly")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DemandPartnerHourlySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(demandPartnerHourlyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"demand_partner_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandPartnerHourlyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demandPartnerHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_partner_hourly")
	}

	if len(demandPartnerHourlyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DemandPartnerHourly) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDemandPartnerHourly(ctx, exec, o.Time, o.DemandPartnerID, o.Domain)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandPartnerHourlySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DemandPartnerHourlySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPartnerHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"demand_partner_hourly\".* FROM \"demand_partner_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandPartnerHourlyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DemandPartnerHourlySlice")
	}

	*o = slice

	return nil
}

// DemandPartnerHourlyExists checks if the DemandPartnerHourly row exists.
func DemandPartnerHourlyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, demandPartnerID string, domain string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"demand_partner_hourly\" where \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"domain\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, demandPartnerID, domain)
	}
	row := exec.QueryRowContext(ctx, sql, time, demandPartnerID, domain)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if demand_partner_hourly exists")
	}

	return exists, nil
}

// Exists checks if the DemandPartnerHourly row exists.
func (o *DemandPartnerHourly) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DemandPartnerHourlyExists(ctx, exec, o.Time, o.DemandPartnerID, o.Domain)
}
