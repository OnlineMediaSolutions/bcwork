// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DPAPIReport is an object representing the database table.
type DPAPIReport struct {
	DateStamp     time.Time     `boil:"date_stamp" json:"date_stamp" toml:"date_stamp" yaml:"date_stamp"`
	DemandPartner string        `boil:"demand_partner" json:"demand_partner" toml:"demand_partner" yaml:"demand_partner"`
	Domain        string        `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	SoldImps      int64         `boil:"sold_imps" json:"sold_imps" toml:"sold_imps" yaml:"sold_imps"`
	Revenue       types.Decimal `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	UpdatedAt     time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *dpAPIReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dpAPIReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DPAPIReportColumns = struct {
	DateStamp     string
	DemandPartner string
	Domain        string
	SoldImps      string
	Revenue       string
	UpdatedAt     string
}{
	DateStamp:     "date_stamp",
	DemandPartner: "demand_partner",
	Domain:        "domain",
	SoldImps:      "sold_imps",
	Revenue:       "revenue",
	UpdatedAt:     "updated_at",
}

var DPAPIReportTableColumns = struct {
	DateStamp     string
	DemandPartner string
	Domain        string
	SoldImps      string
	Revenue       string
	UpdatedAt     string
}{
	DateStamp:     "dp_api_report.date_stamp",
	DemandPartner: "dp_api_report.demand_partner",
	Domain:        "dp_api_report.domain",
	SoldImps:      "dp_api_report.sold_imps",
	Revenue:       "dp_api_report.revenue",
	UpdatedAt:     "dp_api_report.updated_at",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DPAPIReportWhere = struct {
	DateStamp     whereHelpertime_Time
	DemandPartner whereHelperstring
	Domain        whereHelperstring
	SoldImps      whereHelperint64
	Revenue       whereHelpertypes_Decimal
	UpdatedAt     whereHelpertime_Time
}{
	DateStamp:     whereHelpertime_Time{field: "\"dp_api_report\".\"date_stamp\""},
	DemandPartner: whereHelperstring{field: "\"dp_api_report\".\"demand_partner\""},
	Domain:        whereHelperstring{field: "\"dp_api_report\".\"domain\""},
	SoldImps:      whereHelperint64{field: "\"dp_api_report\".\"sold_imps\""},
	Revenue:       whereHelpertypes_Decimal{field: "\"dp_api_report\".\"revenue\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"dp_api_report\".\"updated_at\""},
}

// DPAPIReportRels is where relationship names are stored.
var DPAPIReportRels = struct {
}{}

// dpAPIReportR is where relationships are stored.
type dpAPIReportR struct {
}

// NewStruct creates a new relationship struct
func (*dpAPIReportR) NewStruct() *dpAPIReportR {
	return &dpAPIReportR{}
}

// dpAPIReportL is where Load methods for each relationship are stored.
type dpAPIReportL struct{}

var (
	dpAPIReportAllColumns            = []string{"date_stamp", "demand_partner", "domain", "sold_imps", "revenue", "updated_at"}
	dpAPIReportColumnsWithoutDefault = []string{"date_stamp", "demand_partner", "domain"}
	dpAPIReportColumnsWithDefault    = []string{"sold_imps", "revenue", "updated_at"}
	dpAPIReportPrimaryKeyColumns     = []string{"date_stamp", "demand_partner", "domain"}
	dpAPIReportGeneratedColumns      = []string{}
)

type (
	// DPAPIReportSlice is an alias for a slice of pointers to DPAPIReport.
	// This should almost always be used instead of []DPAPIReport.
	DPAPIReportSlice []*DPAPIReport
	// DPAPIReportHook is the signature for custom DPAPIReport hook methods
	DPAPIReportHook func(context.Context, boil.ContextExecutor, *DPAPIReport) error

	dpAPIReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dpAPIReportType                 = reflect.TypeOf(&DPAPIReport{})
	dpAPIReportMapping              = queries.MakeStructMapping(dpAPIReportType)
	dpAPIReportPrimaryKeyMapping, _ = queries.BindMapping(dpAPIReportType, dpAPIReportMapping, dpAPIReportPrimaryKeyColumns)
	dpAPIReportInsertCacheMut       sync.RWMutex
	dpAPIReportInsertCache          = make(map[string]insertCache)
	dpAPIReportUpdateCacheMut       sync.RWMutex
	dpAPIReportUpdateCache          = make(map[string]updateCache)
	dpAPIReportUpsertCacheMut       sync.RWMutex
	dpAPIReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dpAPIReportAfterSelectMu sync.Mutex
var dpAPIReportAfterSelectHooks []DPAPIReportHook

var dpAPIReportBeforeInsertMu sync.Mutex
var dpAPIReportBeforeInsertHooks []DPAPIReportHook
var dpAPIReportAfterInsertMu sync.Mutex
var dpAPIReportAfterInsertHooks []DPAPIReportHook

var dpAPIReportBeforeUpdateMu sync.Mutex
var dpAPIReportBeforeUpdateHooks []DPAPIReportHook
var dpAPIReportAfterUpdateMu sync.Mutex
var dpAPIReportAfterUpdateHooks []DPAPIReportHook

var dpAPIReportBeforeDeleteMu sync.Mutex
var dpAPIReportBeforeDeleteHooks []DPAPIReportHook
var dpAPIReportAfterDeleteMu sync.Mutex
var dpAPIReportAfterDeleteHooks []DPAPIReportHook

var dpAPIReportBeforeUpsertMu sync.Mutex
var dpAPIReportBeforeUpsertHooks []DPAPIReportHook
var dpAPIReportAfterUpsertMu sync.Mutex
var dpAPIReportAfterUpsertHooks []DPAPIReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DPAPIReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DPAPIReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DPAPIReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DPAPIReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DPAPIReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DPAPIReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DPAPIReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DPAPIReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DPAPIReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpAPIReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDPAPIReportHook registers your hook function for all future operations.
func AddDPAPIReportHook(hookPoint boil.HookPoint, dpAPIReportHook DPAPIReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dpAPIReportAfterSelectMu.Lock()
		dpAPIReportAfterSelectHooks = append(dpAPIReportAfterSelectHooks, dpAPIReportHook)
		dpAPIReportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		dpAPIReportBeforeInsertMu.Lock()
		dpAPIReportBeforeInsertHooks = append(dpAPIReportBeforeInsertHooks, dpAPIReportHook)
		dpAPIReportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		dpAPIReportAfterInsertMu.Lock()
		dpAPIReportAfterInsertHooks = append(dpAPIReportAfterInsertHooks, dpAPIReportHook)
		dpAPIReportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		dpAPIReportBeforeUpdateMu.Lock()
		dpAPIReportBeforeUpdateHooks = append(dpAPIReportBeforeUpdateHooks, dpAPIReportHook)
		dpAPIReportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		dpAPIReportAfterUpdateMu.Lock()
		dpAPIReportAfterUpdateHooks = append(dpAPIReportAfterUpdateHooks, dpAPIReportHook)
		dpAPIReportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		dpAPIReportBeforeDeleteMu.Lock()
		dpAPIReportBeforeDeleteHooks = append(dpAPIReportBeforeDeleteHooks, dpAPIReportHook)
		dpAPIReportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		dpAPIReportAfterDeleteMu.Lock()
		dpAPIReportAfterDeleteHooks = append(dpAPIReportAfterDeleteHooks, dpAPIReportHook)
		dpAPIReportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		dpAPIReportBeforeUpsertMu.Lock()
		dpAPIReportBeforeUpsertHooks = append(dpAPIReportBeforeUpsertHooks, dpAPIReportHook)
		dpAPIReportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		dpAPIReportAfterUpsertMu.Lock()
		dpAPIReportAfterUpsertHooks = append(dpAPIReportAfterUpsertHooks, dpAPIReportHook)
		dpAPIReportAfterUpsertMu.Unlock()
	}
}

// One returns a single dpAPIReport record from the query.
func (q dpAPIReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DPAPIReport, error) {
	o := &DPAPIReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dp_api_report")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DPAPIReport records from the query.
func (q dpAPIReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (DPAPIReportSlice, error) {
	var o []*DPAPIReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DPAPIReport slice")
	}

	if len(dpAPIReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DPAPIReport records in the query.
func (q dpAPIReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dp_api_report rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dpAPIReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dp_api_report exists")
	}

	return count > 0, nil
}

// DPAPIReports retrieves all the records using an executor.
func DPAPIReports(mods ...qm.QueryMod) dpAPIReportQuery {
	mods = append(mods, qm.From("\"dp_api_report\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dp_api_report\".*"})
	}

	return dpAPIReportQuery{q}
}

// FindDPAPIReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDPAPIReport(ctx context.Context, exec boil.ContextExecutor, dateStamp time.Time, demandPartner string, domain string, selectCols ...string) (*DPAPIReport, error) {
	dpAPIReportObj := &DPAPIReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dp_api_report\" where \"date_stamp\"=$1 AND \"demand_partner\"=$2 AND \"domain\"=$3", sel,
	)

	q := queries.Raw(query, dateStamp, demandPartner, domain)

	err := q.Bind(ctx, exec, dpAPIReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dp_api_report")
	}

	if err = dpAPIReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dpAPIReportObj, err
	}

	return dpAPIReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DPAPIReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dp_api_report provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dpAPIReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dpAPIReportInsertCacheMut.RLock()
	cache, cached := dpAPIReportInsertCache[key]
	dpAPIReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dpAPIReportAllColumns,
			dpAPIReportColumnsWithDefault,
			dpAPIReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dpAPIReportType, dpAPIReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dpAPIReportType, dpAPIReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dp_api_report\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dp_api_report\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dp_api_report")
	}

	if !cached {
		dpAPIReportInsertCacheMut.Lock()
		dpAPIReportInsertCache[key] = cache
		dpAPIReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DPAPIReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DPAPIReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dpAPIReportUpdateCacheMut.RLock()
	cache, cached := dpAPIReportUpdateCache[key]
	dpAPIReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dpAPIReportAllColumns,
			dpAPIReportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dp_api_report, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dp_api_report\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dpAPIReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dpAPIReportType, dpAPIReportMapping, append(wl, dpAPIReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dp_api_report row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dp_api_report")
	}

	if !cached {
		dpAPIReportUpdateCacheMut.Lock()
		dpAPIReportUpdateCache[key] = cache
		dpAPIReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dpAPIReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dp_api_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dp_api_report")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DPAPIReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpAPIReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dp_api_report\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dpAPIReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dpAPIReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dpAPIReport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DPAPIReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no dp_api_report provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dpAPIReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dpAPIReportUpsertCacheMut.RLock()
	cache, cached := dpAPIReportUpsertCache[key]
	dpAPIReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			dpAPIReportAllColumns,
			dpAPIReportColumnsWithDefault,
			dpAPIReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dpAPIReportAllColumns,
			dpAPIReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dp_api_report, could not build update column list")
		}

		ret := strmangle.SetComplement(dpAPIReportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(dpAPIReportPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert dp_api_report, could not build conflict column list")
			}

			conflict = make([]string, len(dpAPIReportPrimaryKeyColumns))
			copy(conflict, dpAPIReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dp_api_report\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(dpAPIReportType, dpAPIReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dpAPIReportType, dpAPIReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dp_api_report")
	}

	if !cached {
		dpAPIReportUpsertCacheMut.Lock()
		dpAPIReportUpsertCache[key] = cache
		dpAPIReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DPAPIReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DPAPIReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DPAPIReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dpAPIReportPrimaryKeyMapping)
	sql := "DELETE FROM \"dp_api_report\" WHERE \"date_stamp\"=$1 AND \"demand_partner\"=$2 AND \"domain\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dp_api_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dp_api_report")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dpAPIReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dpAPIReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dp_api_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dp_api_report")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DPAPIReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dpAPIReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpAPIReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dp_api_report\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dpAPIReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dpAPIReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dp_api_report")
	}

	if len(dpAPIReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DPAPIReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDPAPIReport(ctx, exec, o.DateStamp, o.DemandPartner, o.Domain)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DPAPIReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DPAPIReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpAPIReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dp_api_report\".* FROM \"dp_api_report\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dpAPIReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DPAPIReportSlice")
	}

	*o = slice

	return nil
}

// DPAPIReportExists checks if the DPAPIReport row exists.
func DPAPIReportExists(ctx context.Context, exec boil.ContextExecutor, dateStamp time.Time, demandPartner string, domain string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dp_api_report\" where \"date_stamp\"=$1 AND \"demand_partner\"=$2 AND \"domain\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dateStamp, demandPartner, domain)
	}
	row := exec.QueryRowContext(ctx, sql, dateStamp, demandPartner, domain)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dp_api_report exists")
	}

	return exists, nil
}

// Exists checks if the DPAPIReport row exists.
func (o *DPAPIReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DPAPIReportExists(ctx, exec, o.DateStamp, o.DemandPartner, o.Domain)
}
