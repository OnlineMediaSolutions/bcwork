// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DemandParnterPlacement is an object representing the database table.
type DemandParnterPlacement struct {
	DemandPartnerPlacementID string `boil:"demand_partner_placement_id" json:"demand_partner_placement_id" toml:"demand_partner_placement_id" yaml:"demand_partner_placement_id"`
	DemandPartnerID          string `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	Name                     string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *demandParnterPlacementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L demandParnterPlacementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DemandParnterPlacementColumns = struct {
	DemandPartnerPlacementID string
	DemandPartnerID          string
	Name                     string
}{
	DemandPartnerPlacementID: "demand_partner_placement_id",
	DemandPartnerID:          "demand_partner_id",
	Name:                     "name",
}

var DemandParnterPlacementTableColumns = struct {
	DemandPartnerPlacementID string
	DemandPartnerID          string
	Name                     string
}{
	DemandPartnerPlacementID: "demand_parnter_placement.demand_partner_placement_id",
	DemandPartnerID:          "demand_parnter_placement.demand_partner_id",
	Name:                     "demand_parnter_placement.name",
}

// Generated where

var DemandParnterPlacementWhere = struct {
	DemandPartnerPlacementID whereHelperstring
	DemandPartnerID          whereHelperstring
	Name                     whereHelperstring
}{
	DemandPartnerPlacementID: whereHelperstring{field: "\"demand_parnter_placement\".\"demand_partner_placement_id\""},
	DemandPartnerID:          whereHelperstring{field: "\"demand_parnter_placement\".\"demand_partner_id\""},
	Name:                     whereHelperstring{field: "\"demand_parnter_placement\".\"name\""},
}

// DemandParnterPlacementRels is where relationship names are stored.
var DemandParnterPlacementRels = struct {
	DemandPartner string
}{
	DemandPartner: "DemandPartner",
}

// demandParnterPlacementR is where relationships are stored.
type demandParnterPlacementR struct {
	DemandPartner *DemandPartner `boil:"DemandPartner" json:"DemandPartner" toml:"DemandPartner" yaml:"DemandPartner"`
}

// NewStruct creates a new relationship struct
func (*demandParnterPlacementR) NewStruct() *demandParnterPlacementR {
	return &demandParnterPlacementR{}
}

func (r *demandParnterPlacementR) GetDemandPartner() *DemandPartner {
	if r == nil {
		return nil
	}
	return r.DemandPartner
}

// demandParnterPlacementL is where Load methods for each relationship are stored.
type demandParnterPlacementL struct{}

var (
	demandParnterPlacementAllColumns            = []string{"demand_partner_placement_id", "demand_partner_id", "name"}
	demandParnterPlacementColumnsWithoutDefault = []string{"demand_partner_placement_id", "demand_partner_id", "name"}
	demandParnterPlacementColumnsWithDefault    = []string{}
	demandParnterPlacementPrimaryKeyColumns     = []string{"demand_partner_placement_id"}
	demandParnterPlacementGeneratedColumns      = []string{}
)

type (
	// DemandParnterPlacementSlice is an alias for a slice of pointers to DemandParnterPlacement.
	// This should almost always be used instead of []DemandParnterPlacement.
	DemandParnterPlacementSlice []*DemandParnterPlacement
	// DemandParnterPlacementHook is the signature for custom DemandParnterPlacement hook methods
	DemandParnterPlacementHook func(context.Context, boil.ContextExecutor, *DemandParnterPlacement) error

	demandParnterPlacementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	demandParnterPlacementType                 = reflect.TypeOf(&DemandParnterPlacement{})
	demandParnterPlacementMapping              = queries.MakeStructMapping(demandParnterPlacementType)
	demandParnterPlacementPrimaryKeyMapping, _ = queries.BindMapping(demandParnterPlacementType, demandParnterPlacementMapping, demandParnterPlacementPrimaryKeyColumns)
	demandParnterPlacementInsertCacheMut       sync.RWMutex
	demandParnterPlacementInsertCache          = make(map[string]insertCache)
	demandParnterPlacementUpdateCacheMut       sync.RWMutex
	demandParnterPlacementUpdateCache          = make(map[string]updateCache)
	demandParnterPlacementUpsertCacheMut       sync.RWMutex
	demandParnterPlacementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var demandParnterPlacementAfterSelectMu sync.Mutex
var demandParnterPlacementAfterSelectHooks []DemandParnterPlacementHook

var demandParnterPlacementBeforeInsertMu sync.Mutex
var demandParnterPlacementBeforeInsertHooks []DemandParnterPlacementHook
var demandParnterPlacementAfterInsertMu sync.Mutex
var demandParnterPlacementAfterInsertHooks []DemandParnterPlacementHook

var demandParnterPlacementBeforeUpdateMu sync.Mutex
var demandParnterPlacementBeforeUpdateHooks []DemandParnterPlacementHook
var demandParnterPlacementAfterUpdateMu sync.Mutex
var demandParnterPlacementAfterUpdateHooks []DemandParnterPlacementHook

var demandParnterPlacementBeforeDeleteMu sync.Mutex
var demandParnterPlacementBeforeDeleteHooks []DemandParnterPlacementHook
var demandParnterPlacementAfterDeleteMu sync.Mutex
var demandParnterPlacementAfterDeleteHooks []DemandParnterPlacementHook

var demandParnterPlacementBeforeUpsertMu sync.Mutex
var demandParnterPlacementBeforeUpsertHooks []DemandParnterPlacementHook
var demandParnterPlacementAfterUpsertMu sync.Mutex
var demandParnterPlacementAfterUpsertHooks []DemandParnterPlacementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DemandParnterPlacement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DemandParnterPlacement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DemandParnterPlacement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DemandParnterPlacement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DemandParnterPlacement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DemandParnterPlacement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DemandParnterPlacement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DemandParnterPlacement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DemandParnterPlacement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandParnterPlacementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDemandParnterPlacementHook registers your hook function for all future operations.
func AddDemandParnterPlacementHook(hookPoint boil.HookPoint, demandParnterPlacementHook DemandParnterPlacementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		demandParnterPlacementAfterSelectMu.Lock()
		demandParnterPlacementAfterSelectHooks = append(demandParnterPlacementAfterSelectHooks, demandParnterPlacementHook)
		demandParnterPlacementAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		demandParnterPlacementBeforeInsertMu.Lock()
		demandParnterPlacementBeforeInsertHooks = append(demandParnterPlacementBeforeInsertHooks, demandParnterPlacementHook)
		demandParnterPlacementBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		demandParnterPlacementAfterInsertMu.Lock()
		demandParnterPlacementAfterInsertHooks = append(demandParnterPlacementAfterInsertHooks, demandParnterPlacementHook)
		demandParnterPlacementAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		demandParnterPlacementBeforeUpdateMu.Lock()
		demandParnterPlacementBeforeUpdateHooks = append(demandParnterPlacementBeforeUpdateHooks, demandParnterPlacementHook)
		demandParnterPlacementBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		demandParnterPlacementAfterUpdateMu.Lock()
		demandParnterPlacementAfterUpdateHooks = append(demandParnterPlacementAfterUpdateHooks, demandParnterPlacementHook)
		demandParnterPlacementAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		demandParnterPlacementBeforeDeleteMu.Lock()
		demandParnterPlacementBeforeDeleteHooks = append(demandParnterPlacementBeforeDeleteHooks, demandParnterPlacementHook)
		demandParnterPlacementBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		demandParnterPlacementAfterDeleteMu.Lock()
		demandParnterPlacementAfterDeleteHooks = append(demandParnterPlacementAfterDeleteHooks, demandParnterPlacementHook)
		demandParnterPlacementAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		demandParnterPlacementBeforeUpsertMu.Lock()
		demandParnterPlacementBeforeUpsertHooks = append(demandParnterPlacementBeforeUpsertHooks, demandParnterPlacementHook)
		demandParnterPlacementBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		demandParnterPlacementAfterUpsertMu.Lock()
		demandParnterPlacementAfterUpsertHooks = append(demandParnterPlacementAfterUpsertHooks, demandParnterPlacementHook)
		demandParnterPlacementAfterUpsertMu.Unlock()
	}
}

// One returns a single demandParnterPlacement record from the query.
func (q demandParnterPlacementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DemandParnterPlacement, error) {
	o := &DemandParnterPlacement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for demand_parnter_placement")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DemandParnterPlacement records from the query.
func (q demandParnterPlacementQuery) All(ctx context.Context, exec boil.ContextExecutor) (DemandParnterPlacementSlice, error) {
	var o []*DemandParnterPlacement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DemandParnterPlacement slice")
	}

	if len(demandParnterPlacementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DemandParnterPlacement records in the query.
func (q demandParnterPlacementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count demand_parnter_placement rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q demandParnterPlacementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if demand_parnter_placement exists")
	}

	return count > 0, nil
}

// DemandPartner pointed to by the foreign key.
func (o *DemandParnterPlacement) DemandPartner(mods ...qm.QueryMod) demandPartnerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"demand_partner_id\" = ?", o.DemandPartnerID),
	}

	queryMods = append(queryMods, mods...)

	return DemandPartners(queryMods...)
}

// LoadDemandPartner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (demandParnterPlacementL) LoadDemandPartner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDemandParnterPlacement interface{}, mods queries.Applicator) error {
	var slice []*DemandParnterPlacement
	var object *DemandParnterPlacement

	if singular {
		var ok bool
		object, ok = maybeDemandParnterPlacement.(*DemandParnterPlacement)
		if !ok {
			object = new(DemandParnterPlacement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDemandParnterPlacement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDemandParnterPlacement))
			}
		}
	} else {
		s, ok := maybeDemandParnterPlacement.(*[]*DemandParnterPlacement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDemandParnterPlacement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDemandParnterPlacement))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &demandParnterPlacementR{}
		}
		args[object.DemandPartnerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &demandParnterPlacementR{}
			}

			args[obj.DemandPartnerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`demand_partner`),
		qm.WhereIn(`demand_partner.demand_partner_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DemandPartner")
	}

	var resultSlice []*DemandPartner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DemandPartner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for demand_partner")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for demand_partner")
	}

	if len(demandPartnerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DemandPartner = foreign
		if foreign.R == nil {
			foreign.R = &demandPartnerR{}
		}
		foreign.R.DemandParnterPlacements = append(foreign.R.DemandParnterPlacements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DemandPartnerID == foreign.DemandPartnerID {
				local.R.DemandPartner = foreign
				if foreign.R == nil {
					foreign.R = &demandPartnerR{}
				}
				foreign.R.DemandParnterPlacements = append(foreign.R.DemandParnterPlacements, local)
				break
			}
		}
	}

	return nil
}

// SetDemandPartner of the demandParnterPlacement to the related item.
// Sets o.R.DemandPartner to related.
// Adds o to related.R.DemandParnterPlacements.
func (o *DemandParnterPlacement) SetDemandPartner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DemandPartner) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"demand_parnter_placement\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"demand_partner_id"}),
		strmangle.WhereClause("\"", "\"", 2, demandParnterPlacementPrimaryKeyColumns),
	)
	values := []interface{}{related.DemandPartnerID, o.DemandPartnerPlacementID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DemandPartnerID = related.DemandPartnerID
	if o.R == nil {
		o.R = &demandParnterPlacementR{
			DemandPartner: related,
		}
	} else {
		o.R.DemandPartner = related
	}

	if related.R == nil {
		related.R = &demandPartnerR{
			DemandParnterPlacements: DemandParnterPlacementSlice{o},
		}
	} else {
		related.R.DemandParnterPlacements = append(related.R.DemandParnterPlacements, o)
	}

	return nil
}

// DemandParnterPlacements retrieves all the records using an executor.
func DemandParnterPlacements(mods ...qm.QueryMod) demandParnterPlacementQuery {
	mods = append(mods, qm.From("\"demand_parnter_placement\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"demand_parnter_placement\".*"})
	}

	return demandParnterPlacementQuery{q}
}

// FindDemandParnterPlacement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDemandParnterPlacement(ctx context.Context, exec boil.ContextExecutor, demandPartnerPlacementID string, selectCols ...string) (*DemandParnterPlacement, error) {
	demandParnterPlacementObj := &DemandParnterPlacement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"demand_parnter_placement\" where \"demand_partner_placement_id\"=$1", sel,
	)

	q := queries.Raw(query, demandPartnerPlacementID)

	err := q.Bind(ctx, exec, demandParnterPlacementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from demand_parnter_placement")
	}

	if err = demandParnterPlacementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return demandParnterPlacementObj, err
	}

	return demandParnterPlacementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DemandParnterPlacement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand_parnter_placement provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandParnterPlacementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	demandParnterPlacementInsertCacheMut.RLock()
	cache, cached := demandParnterPlacementInsertCache[key]
	demandParnterPlacementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			demandParnterPlacementAllColumns,
			demandParnterPlacementColumnsWithDefault,
			demandParnterPlacementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(demandParnterPlacementType, demandParnterPlacementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(demandParnterPlacementType, demandParnterPlacementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"demand_parnter_placement\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"demand_parnter_placement\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into demand_parnter_placement")
	}

	if !cached {
		demandParnterPlacementInsertCacheMut.Lock()
		demandParnterPlacementInsertCache[key] = cache
		demandParnterPlacementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DemandParnterPlacement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DemandParnterPlacement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	demandParnterPlacementUpdateCacheMut.RLock()
	cache, cached := demandParnterPlacementUpdateCache[key]
	demandParnterPlacementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			demandParnterPlacementAllColumns,
			demandParnterPlacementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update demand_parnter_placement, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"demand_parnter_placement\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, demandParnterPlacementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(demandParnterPlacementType, demandParnterPlacementMapping, append(wl, demandParnterPlacementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update demand_parnter_placement row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for demand_parnter_placement")
	}

	if !cached {
		demandParnterPlacementUpdateCacheMut.Lock()
		demandParnterPlacementUpdateCache[key] = cache
		demandParnterPlacementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q demandParnterPlacementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for demand_parnter_placement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for demand_parnter_placement")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DemandParnterPlacementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandParnterPlacementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"demand_parnter_placement\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, demandParnterPlacementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in demandParnterPlacement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all demandParnterPlacement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DemandParnterPlacement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no demand_parnter_placement provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandParnterPlacementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	demandParnterPlacementUpsertCacheMut.RLock()
	cache, cached := demandParnterPlacementUpsertCache[key]
	demandParnterPlacementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			demandParnterPlacementAllColumns,
			demandParnterPlacementColumnsWithDefault,
			demandParnterPlacementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			demandParnterPlacementAllColumns,
			demandParnterPlacementPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert demand_parnter_placement, could not build update column list")
		}

		ret := strmangle.SetComplement(demandParnterPlacementAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(demandParnterPlacementPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert demand_parnter_placement, could not build conflict column list")
			}

			conflict = make([]string, len(demandParnterPlacementPrimaryKeyColumns))
			copy(conflict, demandParnterPlacementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"demand_parnter_placement\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(demandParnterPlacementType, demandParnterPlacementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(demandParnterPlacementType, demandParnterPlacementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert demand_parnter_placement")
	}

	if !cached {
		demandParnterPlacementUpsertCacheMut.Lock()
		demandParnterPlacementUpsertCache[key] = cache
		demandParnterPlacementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DemandParnterPlacement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DemandParnterPlacement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DemandParnterPlacement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), demandParnterPlacementPrimaryKeyMapping)
	sql := "DELETE FROM \"demand_parnter_placement\" WHERE \"demand_partner_placement_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from demand_parnter_placement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for demand_parnter_placement")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q demandParnterPlacementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no demandParnterPlacementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand_parnter_placement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_parnter_placement")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DemandParnterPlacementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(demandParnterPlacementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandParnterPlacementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"demand_parnter_placement\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandParnterPlacementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demandParnterPlacement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_parnter_placement")
	}

	if len(demandParnterPlacementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DemandParnterPlacement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDemandParnterPlacement(ctx, exec, o.DemandPartnerPlacementID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandParnterPlacementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DemandParnterPlacementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandParnterPlacementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"demand_parnter_placement\".* FROM \"demand_parnter_placement\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandParnterPlacementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DemandParnterPlacementSlice")
	}

	*o = slice

	return nil
}

// DemandParnterPlacementExists checks if the DemandParnterPlacement row exists.
func DemandParnterPlacementExists(ctx context.Context, exec boil.ContextExecutor, demandPartnerPlacementID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"demand_parnter_placement\" where \"demand_partner_placement_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, demandPartnerPlacementID)
	}
	row := exec.QueryRowContext(ctx, sql, demandPartnerPlacementID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if demand_parnter_placement exists")
	}

	return exists, nil
}

// Exists checks if the DemandParnterPlacement row exists.
func (o *DemandParnterPlacement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DemandParnterPlacementExists(ctx, exec, o.DemandPartnerPlacementID)
}
