// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReportUpdate is an object representing the database table.
type ReportUpdate struct {
	Report   string    `boil:"report" json:"report" toml:"report" yaml:"report"`
	UpdateAt time.Time `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`

	R *reportUpdateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reportUpdateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReportUpdateColumns = struct {
	Report   string
	UpdateAt string
}{
	Report:   "report",
	UpdateAt: "update_at",
}

var ReportUpdateTableColumns = struct {
	Report   string
	UpdateAt string
}{
	Report:   "report_update.report",
	UpdateAt: "report_update.update_at",
}

// Generated where

var ReportUpdateWhere = struct {
	Report   whereHelperstring
	UpdateAt whereHelpertime_Time
}{
	Report:   whereHelperstring{field: "\"report_update\".\"report\""},
	UpdateAt: whereHelpertime_Time{field: "\"report_update\".\"update_at\""},
}

// ReportUpdateRels is where relationship names are stored.
var ReportUpdateRels = struct {
}{}

// reportUpdateR is where relationships are stored.
type reportUpdateR struct {
}

// NewStruct creates a new relationship struct
func (*reportUpdateR) NewStruct() *reportUpdateR {
	return &reportUpdateR{}
}

// reportUpdateL is where Load methods for each relationship are stored.
type reportUpdateL struct{}

var (
	reportUpdateAllColumns            = []string{"report", "update_at"}
	reportUpdateColumnsWithoutDefault = []string{"report", "update_at"}
	reportUpdateColumnsWithDefault    = []string{}
	reportUpdatePrimaryKeyColumns     = []string{"report"}
	reportUpdateGeneratedColumns      = []string{}
)

type (
	// ReportUpdateSlice is an alias for a slice of pointers to ReportUpdate.
	// This should almost always be used instead of []ReportUpdate.
	ReportUpdateSlice []*ReportUpdate
	// ReportUpdateHook is the signature for custom ReportUpdate hook methods
	ReportUpdateHook func(context.Context, boil.ContextExecutor, *ReportUpdate) error

	reportUpdateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reportUpdateType                 = reflect.TypeOf(&ReportUpdate{})
	reportUpdateMapping              = queries.MakeStructMapping(reportUpdateType)
	reportUpdatePrimaryKeyMapping, _ = queries.BindMapping(reportUpdateType, reportUpdateMapping, reportUpdatePrimaryKeyColumns)
	reportUpdateInsertCacheMut       sync.RWMutex
	reportUpdateInsertCache          = make(map[string]insertCache)
	reportUpdateUpdateCacheMut       sync.RWMutex
	reportUpdateUpdateCache          = make(map[string]updateCache)
	reportUpdateUpsertCacheMut       sync.RWMutex
	reportUpdateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reportUpdateAfterSelectHooks []ReportUpdateHook

var reportUpdateBeforeInsertHooks []ReportUpdateHook
var reportUpdateAfterInsertHooks []ReportUpdateHook

var reportUpdateBeforeUpdateHooks []ReportUpdateHook
var reportUpdateAfterUpdateHooks []ReportUpdateHook

var reportUpdateBeforeDeleteHooks []ReportUpdateHook
var reportUpdateAfterDeleteHooks []ReportUpdateHook

var reportUpdateBeforeUpsertHooks []ReportUpdateHook
var reportUpdateAfterUpsertHooks []ReportUpdateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReportUpdate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReportUpdate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReportUpdate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReportUpdate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReportUpdate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReportUpdate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReportUpdate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReportUpdate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReportUpdate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportUpdateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReportUpdateHook registers your hook function for all future operations.
func AddReportUpdateHook(hookPoint boil.HookPoint, reportUpdateHook ReportUpdateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reportUpdateAfterSelectHooks = append(reportUpdateAfterSelectHooks, reportUpdateHook)
	case boil.BeforeInsertHook:
		reportUpdateBeforeInsertHooks = append(reportUpdateBeforeInsertHooks, reportUpdateHook)
	case boil.AfterInsertHook:
		reportUpdateAfterInsertHooks = append(reportUpdateAfterInsertHooks, reportUpdateHook)
	case boil.BeforeUpdateHook:
		reportUpdateBeforeUpdateHooks = append(reportUpdateBeforeUpdateHooks, reportUpdateHook)
	case boil.AfterUpdateHook:
		reportUpdateAfterUpdateHooks = append(reportUpdateAfterUpdateHooks, reportUpdateHook)
	case boil.BeforeDeleteHook:
		reportUpdateBeforeDeleteHooks = append(reportUpdateBeforeDeleteHooks, reportUpdateHook)
	case boil.AfterDeleteHook:
		reportUpdateAfterDeleteHooks = append(reportUpdateAfterDeleteHooks, reportUpdateHook)
	case boil.BeforeUpsertHook:
		reportUpdateBeforeUpsertHooks = append(reportUpdateBeforeUpsertHooks, reportUpdateHook)
	case boil.AfterUpsertHook:
		reportUpdateAfterUpsertHooks = append(reportUpdateAfterUpsertHooks, reportUpdateHook)
	}
}

// One returns a single reportUpdate record from the query.
func (q reportUpdateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReportUpdate, error) {
	o := &ReportUpdate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for report_update")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReportUpdate records from the query.
func (q reportUpdateQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReportUpdateSlice, error) {
	var o []*ReportUpdate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReportUpdate slice")
	}

	if len(reportUpdateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReportUpdate records in the query.
func (q reportUpdateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count report_update rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reportUpdateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if report_update exists")
	}

	return count > 0, nil
}

// ReportUpdates retrieves all the records using an executor.
func ReportUpdates(mods ...qm.QueryMod) reportUpdateQuery {
	mods = append(mods, qm.From("\"report_update\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"report_update\".*"})
	}

	return reportUpdateQuery{q}
}

// FindReportUpdate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReportUpdate(ctx context.Context, exec boil.ContextExecutor, report string, selectCols ...string) (*ReportUpdate, error) {
	reportUpdateObj := &ReportUpdate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"report_update\" where \"report\"=$1", sel,
	)

	q := queries.Raw(query, report)

	err := q.Bind(ctx, exec, reportUpdateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from report_update")
	}

	if err = reportUpdateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reportUpdateObj, err
	}

	return reportUpdateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReportUpdate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no report_update provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportUpdateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reportUpdateInsertCacheMut.RLock()
	cache, cached := reportUpdateInsertCache[key]
	reportUpdateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reportUpdateAllColumns,
			reportUpdateColumnsWithDefault,
			reportUpdateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reportUpdateType, reportUpdateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reportUpdateType, reportUpdateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"report_update\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"report_update\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into report_update")
	}

	if !cached {
		reportUpdateInsertCacheMut.Lock()
		reportUpdateInsertCache[key] = cache
		reportUpdateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReportUpdate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReportUpdate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reportUpdateUpdateCacheMut.RLock()
	cache, cached := reportUpdateUpdateCache[key]
	reportUpdateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reportUpdateAllColumns,
			reportUpdatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update report_update, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"report_update\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reportUpdatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reportUpdateType, reportUpdateMapping, append(wl, reportUpdatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update report_update row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for report_update")
	}

	if !cached {
		reportUpdateUpdateCacheMut.Lock()
		reportUpdateUpdateCache[key] = cache
		reportUpdateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reportUpdateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for report_update")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for report_update")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReportUpdateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportUpdatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"report_update\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reportUpdatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reportUpdate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reportUpdate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReportUpdate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no report_update provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportUpdateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reportUpdateUpsertCacheMut.RLock()
	cache, cached := reportUpdateUpsertCache[key]
	reportUpdateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reportUpdateAllColumns,
			reportUpdateColumnsWithDefault,
			reportUpdateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reportUpdateAllColumns,
			reportUpdatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert report_update, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(reportUpdatePrimaryKeyColumns))
			copy(conflict, reportUpdatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"report_update\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(reportUpdateType, reportUpdateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reportUpdateType, reportUpdateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert report_update")
	}

	if !cached {
		reportUpdateUpsertCacheMut.Lock()
		reportUpdateUpsertCache[key] = cache
		reportUpdateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReportUpdate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReportUpdate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReportUpdate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reportUpdatePrimaryKeyMapping)
	sql := "DELETE FROM \"report_update\" WHERE \"report\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from report_update")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for report_update")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reportUpdateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reportUpdateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from report_update")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for report_update")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReportUpdateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reportUpdateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportUpdatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"report_update\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportUpdatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reportUpdate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for report_update")
	}

	if len(reportUpdateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReportUpdate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReportUpdate(ctx, exec, o.Report)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReportUpdateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReportUpdateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportUpdatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"report_update\".* FROM \"report_update\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportUpdatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReportUpdateSlice")
	}

	*o = slice

	return nil
}

// ReportUpdateExists checks if the ReportUpdate row exists.
func ReportUpdateExists(ctx context.Context, exec boil.ContextExecutor, report string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"report_update\" where \"report\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, report)
	}
	row := exec.QueryRowContext(ctx, sql, report)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if report_update exists")
	}

	return exists, nil
}

// Exists checks if the ReportUpdate row exists.
func (o *ReportUpdate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReportUpdateExists(ctx, exec, o.Report)
}
