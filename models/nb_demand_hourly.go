// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NBDemandHourly is an object representing the database table.
type NBDemandHourly struct {
	Time                     time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	DemandPartnerID          string    `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	DemandPartnerPlacementID string    `boil:"demand_partner_placement_id" json:"demand_partner_placement_id" toml:"demand_partner_placement_id" yaml:"demand_partner_placement_id"`
	PublisherID              string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain                   string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Os                       string    `boil:"os" json:"os" toml:"os" yaml:"os"`
	Country                  string    `boil:"country" json:"country" toml:"country" yaml:"country"`
	DeviceType               string    `boil:"device_type" json:"device_type" toml:"device_type" yaml:"device_type"`
	PlacementType            string    `boil:"placement_type" json:"placement_type" toml:"placement_type" yaml:"placement_type"`
	Size                     string    `boil:"size" json:"size" toml:"size" yaml:"size"`
	RequestType              string    `boil:"request_type" json:"request_type" toml:"request_type" yaml:"request_type"`
	PaymentType              string    `boil:"payment_type" json:"payment_type" toml:"payment_type" yaml:"payment_type"`
	Datacenter               string    `boil:"datacenter" json:"datacenter" toml:"datacenter" yaml:"datacenter"`
	BidRequests              int64     `boil:"bid_requests" json:"bid_requests" toml:"bid_requests" yaml:"bid_requests"`
	BidResponses             int64     `boil:"bid_responses" json:"bid_responses" toml:"bid_responses" yaml:"bid_responses"`
	AvgBidPrice              float64   `boil:"avg_bid_price" json:"avg_bid_price" toml:"avg_bid_price" yaml:"avg_bid_price"`
	DPFee                    float64   `boil:"dp_fee" json:"dp_fee" toml:"dp_fee" yaml:"dp_fee"`
	AuctionWins              int64     `boil:"auction_wins" json:"auction_wins" toml:"auction_wins" yaml:"auction_wins"`
	Auction                  float64   `boil:"auction" json:"auction" toml:"auction" yaml:"auction"`
	SoldImpressions          int64     `boil:"sold_impressions" json:"sold_impressions" toml:"sold_impressions" yaml:"sold_impressions"`
	Revenue                  float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	DataImpressions          int64     `boil:"data_impressions" json:"data_impressions" toml:"data_impressions" yaml:"data_impressions"`
	DataFee                  float64   `boil:"data_fee" json:"data_fee" toml:"data_fee" yaml:"data_fee"`

	R *nbDemandHourlyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nbDemandHourlyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NBDemandHourlyColumns = struct {
	Time                     string
	DemandPartnerID          string
	DemandPartnerPlacementID string
	PublisherID              string
	Domain                   string
	Os                       string
	Country                  string
	DeviceType               string
	PlacementType            string
	Size                     string
	RequestType              string
	PaymentType              string
	Datacenter               string
	BidRequests              string
	BidResponses             string
	AvgBidPrice              string
	DPFee                    string
	AuctionWins              string
	Auction                  string
	SoldImpressions          string
	Revenue                  string
	DataImpressions          string
	DataFee                  string
}{
	Time:                     "time",
	DemandPartnerID:          "demand_partner_id",
	DemandPartnerPlacementID: "demand_partner_placement_id",
	PublisherID:              "publisher_id",
	Domain:                   "domain",
	Os:                       "os",
	Country:                  "country",
	DeviceType:               "device_type",
	PlacementType:            "placement_type",
	Size:                     "size",
	RequestType:              "request_type",
	PaymentType:              "payment_type",
	Datacenter:               "datacenter",
	BidRequests:              "bid_requests",
	BidResponses:             "bid_responses",
	AvgBidPrice:              "avg_bid_price",
	DPFee:                    "dp_fee",
	AuctionWins:              "auction_wins",
	Auction:                  "auction",
	SoldImpressions:          "sold_impressions",
	Revenue:                  "revenue",
	DataImpressions:          "data_impressions",
	DataFee:                  "data_fee",
}

var NBDemandHourlyTableColumns = struct {
	Time                     string
	DemandPartnerID          string
	DemandPartnerPlacementID string
	PublisherID              string
	Domain                   string
	Os                       string
	Country                  string
	DeviceType               string
	PlacementType            string
	Size                     string
	RequestType              string
	PaymentType              string
	Datacenter               string
	BidRequests              string
	BidResponses             string
	AvgBidPrice              string
	DPFee                    string
	AuctionWins              string
	Auction                  string
	SoldImpressions          string
	Revenue                  string
	DataImpressions          string
	DataFee                  string
}{
	Time:                     "nb_demand_hourly.time",
	DemandPartnerID:          "nb_demand_hourly.demand_partner_id",
	DemandPartnerPlacementID: "nb_demand_hourly.demand_partner_placement_id",
	PublisherID:              "nb_demand_hourly.publisher_id",
	Domain:                   "nb_demand_hourly.domain",
	Os:                       "nb_demand_hourly.os",
	Country:                  "nb_demand_hourly.country",
	DeviceType:               "nb_demand_hourly.device_type",
	PlacementType:            "nb_demand_hourly.placement_type",
	Size:                     "nb_demand_hourly.size",
	RequestType:              "nb_demand_hourly.request_type",
	PaymentType:              "nb_demand_hourly.payment_type",
	Datacenter:               "nb_demand_hourly.datacenter",
	BidRequests:              "nb_demand_hourly.bid_requests",
	BidResponses:             "nb_demand_hourly.bid_responses",
	AvgBidPrice:              "nb_demand_hourly.avg_bid_price",
	DPFee:                    "nb_demand_hourly.dp_fee",
	AuctionWins:              "nb_demand_hourly.auction_wins",
	Auction:                  "nb_demand_hourly.auction",
	SoldImpressions:          "nb_demand_hourly.sold_impressions",
	Revenue:                  "nb_demand_hourly.revenue",
	DataImpressions:          "nb_demand_hourly.data_impressions",
	DataFee:                  "nb_demand_hourly.data_fee",
}

// Generated where

var NBDemandHourlyWhere = struct {
	Time                     whereHelpertime_Time
	DemandPartnerID          whereHelperstring
	DemandPartnerPlacementID whereHelperstring
	PublisherID              whereHelperstring
	Domain                   whereHelperstring
	Os                       whereHelperstring
	Country                  whereHelperstring
	DeviceType               whereHelperstring
	PlacementType            whereHelperstring
	Size                     whereHelperstring
	RequestType              whereHelperstring
	PaymentType              whereHelperstring
	Datacenter               whereHelperstring
	BidRequests              whereHelperint64
	BidResponses             whereHelperint64
	AvgBidPrice              whereHelperfloat64
	DPFee                    whereHelperfloat64
	AuctionWins              whereHelperint64
	Auction                  whereHelperfloat64
	SoldImpressions          whereHelperint64
	Revenue                  whereHelperfloat64
	DataImpressions          whereHelperint64
	DataFee                  whereHelperfloat64
}{
	Time:                     whereHelpertime_Time{field: "\"nb_demand_hourly\".\"time\""},
	DemandPartnerID:          whereHelperstring{field: "\"nb_demand_hourly\".\"demand_partner_id\""},
	DemandPartnerPlacementID: whereHelperstring{field: "\"nb_demand_hourly\".\"demand_partner_placement_id\""},
	PublisherID:              whereHelperstring{field: "\"nb_demand_hourly\".\"publisher_id\""},
	Domain:                   whereHelperstring{field: "\"nb_demand_hourly\".\"domain\""},
	Os:                       whereHelperstring{field: "\"nb_demand_hourly\".\"os\""},
	Country:                  whereHelperstring{field: "\"nb_demand_hourly\".\"country\""},
	DeviceType:               whereHelperstring{field: "\"nb_demand_hourly\".\"device_type\""},
	PlacementType:            whereHelperstring{field: "\"nb_demand_hourly\".\"placement_type\""},
	Size:                     whereHelperstring{field: "\"nb_demand_hourly\".\"size\""},
	RequestType:              whereHelperstring{field: "\"nb_demand_hourly\".\"request_type\""},
	PaymentType:              whereHelperstring{field: "\"nb_demand_hourly\".\"payment_type\""},
	Datacenter:               whereHelperstring{field: "\"nb_demand_hourly\".\"datacenter\""},
	BidRequests:              whereHelperint64{field: "\"nb_demand_hourly\".\"bid_requests\""},
	BidResponses:             whereHelperint64{field: "\"nb_demand_hourly\".\"bid_responses\""},
	AvgBidPrice:              whereHelperfloat64{field: "\"nb_demand_hourly\".\"avg_bid_price\""},
	DPFee:                    whereHelperfloat64{field: "\"nb_demand_hourly\".\"dp_fee\""},
	AuctionWins:              whereHelperint64{field: "\"nb_demand_hourly\".\"auction_wins\""},
	Auction:                  whereHelperfloat64{field: "\"nb_demand_hourly\".\"auction\""},
	SoldImpressions:          whereHelperint64{field: "\"nb_demand_hourly\".\"sold_impressions\""},
	Revenue:                  whereHelperfloat64{field: "\"nb_demand_hourly\".\"revenue\""},
	DataImpressions:          whereHelperint64{field: "\"nb_demand_hourly\".\"data_impressions\""},
	DataFee:                  whereHelperfloat64{field: "\"nb_demand_hourly\".\"data_fee\""},
}

// NBDemandHourlyRels is where relationship names are stored.
var NBDemandHourlyRels = struct {
}{}

// nbDemandHourlyR is where relationships are stored.
type nbDemandHourlyR struct {
}

// NewStruct creates a new relationship struct
func (*nbDemandHourlyR) NewStruct() *nbDemandHourlyR {
	return &nbDemandHourlyR{}
}

// nbDemandHourlyL is where Load methods for each relationship are stored.
type nbDemandHourlyL struct{}

var (
	nbDemandHourlyAllColumns            = []string{"time", "demand_partner_id", "demand_partner_placement_id", "publisher_id", "domain", "os", "country", "device_type", "placement_type", "size", "request_type", "payment_type", "datacenter", "bid_requests", "bid_responses", "avg_bid_price", "dp_fee", "auction_wins", "auction", "sold_impressions", "revenue", "data_impressions", "data_fee"}
	nbDemandHourlyColumnsWithoutDefault = []string{"time", "demand_partner_id", "demand_partner_placement_id", "publisher_id"}
	nbDemandHourlyColumnsWithDefault    = []string{"domain", "os", "country", "device_type", "placement_type", "size", "request_type", "payment_type", "datacenter", "bid_requests", "bid_responses", "avg_bid_price", "dp_fee", "auction_wins", "auction", "sold_impressions", "revenue", "data_impressions", "data_fee"}
	nbDemandHourlyPrimaryKeyColumns     = []string{"time", "demand_partner_id", "demand_partner_placement_id", "publisher_id", "domain", "os", "country", "device_type", "placement_type", "size", "request_type", "payment_type", "datacenter"}
	nbDemandHourlyGeneratedColumns      = []string{}
)

type (
	// NBDemandHourlySlice is an alias for a slice of pointers to NBDemandHourly.
	// This should almost always be used instead of []NBDemandHourly.
	NBDemandHourlySlice []*NBDemandHourly
	// NBDemandHourlyHook is the signature for custom NBDemandHourly hook methods
	NBDemandHourlyHook func(context.Context, boil.ContextExecutor, *NBDemandHourly) error

	nbDemandHourlyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nbDemandHourlyType                 = reflect.TypeOf(&NBDemandHourly{})
	nbDemandHourlyMapping              = queries.MakeStructMapping(nbDemandHourlyType)
	nbDemandHourlyPrimaryKeyMapping, _ = queries.BindMapping(nbDemandHourlyType, nbDemandHourlyMapping, nbDemandHourlyPrimaryKeyColumns)
	nbDemandHourlyInsertCacheMut       sync.RWMutex
	nbDemandHourlyInsertCache          = make(map[string]insertCache)
	nbDemandHourlyUpdateCacheMut       sync.RWMutex
	nbDemandHourlyUpdateCache          = make(map[string]updateCache)
	nbDemandHourlyUpsertCacheMut       sync.RWMutex
	nbDemandHourlyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nbDemandHourlyAfterSelectHooks []NBDemandHourlyHook

var nbDemandHourlyBeforeInsertHooks []NBDemandHourlyHook
var nbDemandHourlyAfterInsertHooks []NBDemandHourlyHook

var nbDemandHourlyBeforeUpdateHooks []NBDemandHourlyHook
var nbDemandHourlyAfterUpdateHooks []NBDemandHourlyHook

var nbDemandHourlyBeforeDeleteHooks []NBDemandHourlyHook
var nbDemandHourlyAfterDeleteHooks []NBDemandHourlyHook

var nbDemandHourlyBeforeUpsertHooks []NBDemandHourlyHook
var nbDemandHourlyAfterUpsertHooks []NBDemandHourlyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NBDemandHourly) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NBDemandHourly) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NBDemandHourly) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NBDemandHourly) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NBDemandHourly) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NBDemandHourly) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NBDemandHourly) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NBDemandHourly) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NBDemandHourly) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nbDemandHourlyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNBDemandHourlyHook registers your hook function for all future operations.
func AddNBDemandHourlyHook(hookPoint boil.HookPoint, nbDemandHourlyHook NBDemandHourlyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		nbDemandHourlyAfterSelectHooks = append(nbDemandHourlyAfterSelectHooks, nbDemandHourlyHook)
	case boil.BeforeInsertHook:
		nbDemandHourlyBeforeInsertHooks = append(nbDemandHourlyBeforeInsertHooks, nbDemandHourlyHook)
	case boil.AfterInsertHook:
		nbDemandHourlyAfterInsertHooks = append(nbDemandHourlyAfterInsertHooks, nbDemandHourlyHook)
	case boil.BeforeUpdateHook:
		nbDemandHourlyBeforeUpdateHooks = append(nbDemandHourlyBeforeUpdateHooks, nbDemandHourlyHook)
	case boil.AfterUpdateHook:
		nbDemandHourlyAfterUpdateHooks = append(nbDemandHourlyAfterUpdateHooks, nbDemandHourlyHook)
	case boil.BeforeDeleteHook:
		nbDemandHourlyBeforeDeleteHooks = append(nbDemandHourlyBeforeDeleteHooks, nbDemandHourlyHook)
	case boil.AfterDeleteHook:
		nbDemandHourlyAfterDeleteHooks = append(nbDemandHourlyAfterDeleteHooks, nbDemandHourlyHook)
	case boil.BeforeUpsertHook:
		nbDemandHourlyBeforeUpsertHooks = append(nbDemandHourlyBeforeUpsertHooks, nbDemandHourlyHook)
	case boil.AfterUpsertHook:
		nbDemandHourlyAfterUpsertHooks = append(nbDemandHourlyAfterUpsertHooks, nbDemandHourlyHook)
	}
}

// One returns a single nbDemandHourly record from the query.
func (q nbDemandHourlyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NBDemandHourly, error) {
	o := &NBDemandHourly{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for nb_demand_hourly")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NBDemandHourly records from the query.
func (q nbDemandHourlyQuery) All(ctx context.Context, exec boil.ContextExecutor) (NBDemandHourlySlice, error) {
	var o []*NBDemandHourly

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NBDemandHourly slice")
	}

	if len(nbDemandHourlyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NBDemandHourly records in the query.
func (q nbDemandHourlyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count nb_demand_hourly rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nbDemandHourlyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if nb_demand_hourly exists")
	}

	return count > 0, nil
}

// NBDemandHourlies retrieves all the records using an executor.
func NBDemandHourlies(mods ...qm.QueryMod) nbDemandHourlyQuery {
	mods = append(mods, qm.From("\"nb_demand_hourly\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"nb_demand_hourly\".*"})
	}

	return nbDemandHourlyQuery{q}
}

// FindNBDemandHourly retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNBDemandHourly(ctx context.Context, exec boil.ContextExecutor, time time.Time, demandPartnerID string, demandPartnerPlacementID string, publisherID string, domain string, os string, country string, deviceType string, placementType string, size string, requestType string, paymentType string, datacenter string, selectCols ...string) (*NBDemandHourly, error) {
	nbDemandHourlyObj := &NBDemandHourly{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nb_demand_hourly\" where \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"demand_partner_placement_id\"=$3 AND \"publisher_id\"=$4 AND \"domain\"=$5 AND \"os\"=$6 AND \"country\"=$7 AND \"device_type\"=$8 AND \"placement_type\"=$9 AND \"size\"=$10 AND \"request_type\"=$11 AND \"payment_type\"=$12 AND \"datacenter\"=$13", sel,
	)

	q := queries.Raw(query, time, demandPartnerID, demandPartnerPlacementID, publisherID, domain, os, country, deviceType, placementType, size, requestType, paymentType, datacenter)

	err := q.Bind(ctx, exec, nbDemandHourlyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from nb_demand_hourly")
	}

	if err = nbDemandHourlyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return nbDemandHourlyObj, err
	}

	return nbDemandHourlyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NBDemandHourly) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nb_demand_hourly provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nbDemandHourlyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nbDemandHourlyInsertCacheMut.RLock()
	cache, cached := nbDemandHourlyInsertCache[key]
	nbDemandHourlyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nbDemandHourlyAllColumns,
			nbDemandHourlyColumnsWithDefault,
			nbDemandHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nbDemandHourlyType, nbDemandHourlyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nbDemandHourlyType, nbDemandHourlyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nb_demand_hourly\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nb_demand_hourly\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into nb_demand_hourly")
	}

	if !cached {
		nbDemandHourlyInsertCacheMut.Lock()
		nbDemandHourlyInsertCache[key] = cache
		nbDemandHourlyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NBDemandHourly.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NBDemandHourly) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nbDemandHourlyUpdateCacheMut.RLock()
	cache, cached := nbDemandHourlyUpdateCache[key]
	nbDemandHourlyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nbDemandHourlyAllColumns,
			nbDemandHourlyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update nb_demand_hourly, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nb_demand_hourly\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, nbDemandHourlyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nbDemandHourlyType, nbDemandHourlyMapping, append(wl, nbDemandHourlyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update nb_demand_hourly row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for nb_demand_hourly")
	}

	if !cached {
		nbDemandHourlyUpdateCacheMut.Lock()
		nbDemandHourlyUpdateCache[key] = cache
		nbDemandHourlyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nbDemandHourlyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for nb_demand_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for nb_demand_hourly")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NBDemandHourlySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nbDemandHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nb_demand_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nbDemandHourlyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nbDemandHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nbDemandHourly")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NBDemandHourly) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no nb_demand_hourly provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nbDemandHourlyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nbDemandHourlyUpsertCacheMut.RLock()
	cache, cached := nbDemandHourlyUpsertCache[key]
	nbDemandHourlyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			nbDemandHourlyAllColumns,
			nbDemandHourlyColumnsWithDefault,
			nbDemandHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			nbDemandHourlyAllColumns,
			nbDemandHourlyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert nb_demand_hourly, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(nbDemandHourlyPrimaryKeyColumns))
			copy(conflict, nbDemandHourlyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"nb_demand_hourly\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(nbDemandHourlyType, nbDemandHourlyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nbDemandHourlyType, nbDemandHourlyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert nb_demand_hourly")
	}

	if !cached {
		nbDemandHourlyUpsertCacheMut.Lock()
		nbDemandHourlyUpsertCache[key] = cache
		nbDemandHourlyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NBDemandHourly record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NBDemandHourly) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NBDemandHourly provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nbDemandHourlyPrimaryKeyMapping)
	sql := "DELETE FROM \"nb_demand_hourly\" WHERE \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"demand_partner_placement_id\"=$3 AND \"publisher_id\"=$4 AND \"domain\"=$5 AND \"os\"=$6 AND \"country\"=$7 AND \"device_type\"=$8 AND \"placement_type\"=$9 AND \"size\"=$10 AND \"request_type\"=$11 AND \"payment_type\"=$12 AND \"datacenter\"=$13"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from nb_demand_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for nb_demand_hourly")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nbDemandHourlyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nbDemandHourlyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nb_demand_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nb_demand_hourly")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NBDemandHourlySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nbDemandHourlyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nbDemandHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nb_demand_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nbDemandHourlyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nbDemandHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for nb_demand_hourly")
	}

	if len(nbDemandHourlyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NBDemandHourly) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNBDemandHourly(ctx, exec, o.Time, o.DemandPartnerID, o.DemandPartnerPlacementID, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType, o.PlacementType, o.Size, o.RequestType, o.PaymentType, o.Datacenter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NBDemandHourlySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NBDemandHourlySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nbDemandHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nb_demand_hourly\".* FROM \"nb_demand_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nbDemandHourlyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NBDemandHourlySlice")
	}

	*o = slice

	return nil
}

// NBDemandHourlyExists checks if the NBDemandHourly row exists.
func NBDemandHourlyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, demandPartnerID string, demandPartnerPlacementID string, publisherID string, domain string, os string, country string, deviceType string, placementType string, size string, requestType string, paymentType string, datacenter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nb_demand_hourly\" where \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"demand_partner_placement_id\"=$3 AND \"publisher_id\"=$4 AND \"domain\"=$5 AND \"os\"=$6 AND \"country\"=$7 AND \"device_type\"=$8 AND \"placement_type\"=$9 AND \"size\"=$10 AND \"request_type\"=$11 AND \"payment_type\"=$12 AND \"datacenter\"=$13 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, demandPartnerID, demandPartnerPlacementID, publisherID, domain, os, country, deviceType, placementType, size, requestType, paymentType, datacenter)
	}
	row := exec.QueryRowContext(ctx, sql, time, demandPartnerID, demandPartnerPlacementID, publisherID, domain, os, country, deviceType, placementType, size, requestType, paymentType, datacenter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if nb_demand_hourly exists")
	}

	return exists, nil
}

// Exists checks if the NBDemandHourly row exists.
func (o *NBDemandHourly) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NBDemandHourlyExists(ctx, exec, o.Time, o.DemandPartnerID, o.DemandPartnerPlacementID, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType, o.PlacementType, o.Size, o.RequestType, o.PaymentType, o.Datacenter)
}
