// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DemandHourly is an object representing the database table.
type DemandHourly struct {
	Time             time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	DemandPartnerID  string    `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	PublisherID      string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain           string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	BidRequest       int64     `boil:"bid_request" json:"bid_request" toml:"bid_request" yaml:"bid_request"`
	BidResponse      int64     `boil:"bid_response" json:"bid_response" toml:"bid_response" yaml:"bid_response"`
	BidPrice         float64   `boil:"bid_price" json:"bid_price" toml:"bid_price" yaml:"bid_price"`
	Impression       int64     `boil:"impression" json:"impression" toml:"impression" yaml:"impression"`
	Revenue          float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	DemandPartnerFee float64   `boil:"demand_partner_fee" json:"demand_partner_fee" toml:"demand_partner_fee" yaml:"demand_partner_fee"`
	DataFee          float64   `boil:"data_fee" json:"data_fee" toml:"data_fee" yaml:"data_fee"`

	R *demandHourlyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L demandHourlyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DemandHourlyColumns = struct {
	Time             string
	DemandPartnerID  string
	PublisherID      string
	Domain           string
	BidRequest       string
	BidResponse      string
	BidPrice         string
	Impression       string
	Revenue          string
	DemandPartnerFee string
	DataFee          string
}{
	Time:             "time",
	DemandPartnerID:  "demand_partner_id",
	PublisherID:      "publisher_id",
	Domain:           "domain",
	BidRequest:       "bid_request",
	BidResponse:      "bid_response",
	BidPrice:         "bid_price",
	Impression:       "impression",
	Revenue:          "revenue",
	DemandPartnerFee: "demand_partner_fee",
	DataFee:          "data_fee",
}

var DemandHourlyTableColumns = struct {
	Time             string
	DemandPartnerID  string
	PublisherID      string
	Domain           string
	BidRequest       string
	BidResponse      string
	BidPrice         string
	Impression       string
	Revenue          string
	DemandPartnerFee string
	DataFee          string
}{
	Time:             "demand_hourly.time",
	DemandPartnerID:  "demand_hourly.demand_partner_id",
	PublisherID:      "demand_hourly.publisher_id",
	Domain:           "demand_hourly.domain",
	BidRequest:       "demand_hourly.bid_request",
	BidResponse:      "demand_hourly.bid_response",
	BidPrice:         "demand_hourly.bid_price",
	Impression:       "demand_hourly.impression",
	Revenue:          "demand_hourly.revenue",
	DemandPartnerFee: "demand_hourly.demand_partner_fee",
	DataFee:          "demand_hourly.data_fee",
}

// Generated where

var DemandHourlyWhere = struct {
	Time             whereHelpertime_Time
	DemandPartnerID  whereHelperstring
	PublisherID      whereHelperstring
	Domain           whereHelperstring
	BidRequest       whereHelperint64
	BidResponse      whereHelperint64
	BidPrice         whereHelperfloat64
	Impression       whereHelperint64
	Revenue          whereHelperfloat64
	DemandPartnerFee whereHelperfloat64
	DataFee          whereHelperfloat64
}{
	Time:             whereHelpertime_Time{field: "\"demand_hourly\".\"time\""},
	DemandPartnerID:  whereHelperstring{field: "\"demand_hourly\".\"demand_partner_id\""},
	PublisherID:      whereHelperstring{field: "\"demand_hourly\".\"publisher_id\""},
	Domain:           whereHelperstring{field: "\"demand_hourly\".\"domain\""},
	BidRequest:       whereHelperint64{field: "\"demand_hourly\".\"bid_request\""},
	BidResponse:      whereHelperint64{field: "\"demand_hourly\".\"bid_response\""},
	BidPrice:         whereHelperfloat64{field: "\"demand_hourly\".\"bid_price\""},
	Impression:       whereHelperint64{field: "\"demand_hourly\".\"impression\""},
	Revenue:          whereHelperfloat64{field: "\"demand_hourly\".\"revenue\""},
	DemandPartnerFee: whereHelperfloat64{field: "\"demand_hourly\".\"demand_partner_fee\""},
	DataFee:          whereHelperfloat64{field: "\"demand_hourly\".\"data_fee\""},
}

// DemandHourlyRels is where relationship names are stored.
var DemandHourlyRels = struct {
}{}

// demandHourlyR is where relationships are stored.
type demandHourlyR struct {
}

// NewStruct creates a new relationship struct
func (*demandHourlyR) NewStruct() *demandHourlyR {
	return &demandHourlyR{}
}

// demandHourlyL is where Load methods for each relationship are stored.
type demandHourlyL struct{}

var (
	demandHourlyAllColumns            = []string{"time", "demand_partner_id", "publisher_id", "domain", "bid_request", "bid_response", "bid_price", "impression", "revenue", "demand_partner_fee", "data_fee"}
	demandHourlyColumnsWithoutDefault = []string{"time", "demand_partner_id", "publisher_id"}
	demandHourlyColumnsWithDefault    = []string{"domain", "bid_request", "bid_response", "bid_price", "impression", "revenue", "demand_partner_fee", "data_fee"}
	demandHourlyPrimaryKeyColumns     = []string{"time", "publisher_id", "demand_partner_id", "domain"}
	demandHourlyGeneratedColumns      = []string{}
)

type (
	// DemandHourlySlice is an alias for a slice of pointers to DemandHourly.
	// This should almost always be used instead of []DemandHourly.
	DemandHourlySlice []*DemandHourly
	// DemandHourlyHook is the signature for custom DemandHourly hook methods
	DemandHourlyHook func(context.Context, boil.ContextExecutor, *DemandHourly) error

	demandHourlyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	demandHourlyType                 = reflect.TypeOf(&DemandHourly{})
	demandHourlyMapping              = queries.MakeStructMapping(demandHourlyType)
	demandHourlyPrimaryKeyMapping, _ = queries.BindMapping(demandHourlyType, demandHourlyMapping, demandHourlyPrimaryKeyColumns)
	demandHourlyInsertCacheMut       sync.RWMutex
	demandHourlyInsertCache          = make(map[string]insertCache)
	demandHourlyUpdateCacheMut       sync.RWMutex
	demandHourlyUpdateCache          = make(map[string]updateCache)
	demandHourlyUpsertCacheMut       sync.RWMutex
	demandHourlyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var demandHourlyAfterSelectMu sync.Mutex
var demandHourlyAfterSelectHooks []DemandHourlyHook

var demandHourlyBeforeInsertMu sync.Mutex
var demandHourlyBeforeInsertHooks []DemandHourlyHook
var demandHourlyAfterInsertMu sync.Mutex
var demandHourlyAfterInsertHooks []DemandHourlyHook

var demandHourlyBeforeUpdateMu sync.Mutex
var demandHourlyBeforeUpdateHooks []DemandHourlyHook
var demandHourlyAfterUpdateMu sync.Mutex
var demandHourlyAfterUpdateHooks []DemandHourlyHook

var demandHourlyBeforeDeleteMu sync.Mutex
var demandHourlyBeforeDeleteHooks []DemandHourlyHook
var demandHourlyAfterDeleteMu sync.Mutex
var demandHourlyAfterDeleteHooks []DemandHourlyHook

var demandHourlyBeforeUpsertMu sync.Mutex
var demandHourlyBeforeUpsertHooks []DemandHourlyHook
var demandHourlyAfterUpsertMu sync.Mutex
var demandHourlyAfterUpsertHooks []DemandHourlyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DemandHourly) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DemandHourly) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DemandHourly) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DemandHourly) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DemandHourly) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DemandHourly) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DemandHourly) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DemandHourly) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DemandHourly) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandHourlyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDemandHourlyHook registers your hook function for all future operations.
func AddDemandHourlyHook(hookPoint boil.HookPoint, demandHourlyHook DemandHourlyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		demandHourlyAfterSelectMu.Lock()
		demandHourlyAfterSelectHooks = append(demandHourlyAfterSelectHooks, demandHourlyHook)
		demandHourlyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		demandHourlyBeforeInsertMu.Lock()
		demandHourlyBeforeInsertHooks = append(demandHourlyBeforeInsertHooks, demandHourlyHook)
		demandHourlyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		demandHourlyAfterInsertMu.Lock()
		demandHourlyAfterInsertHooks = append(demandHourlyAfterInsertHooks, demandHourlyHook)
		demandHourlyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		demandHourlyBeforeUpdateMu.Lock()
		demandHourlyBeforeUpdateHooks = append(demandHourlyBeforeUpdateHooks, demandHourlyHook)
		demandHourlyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		demandHourlyAfterUpdateMu.Lock()
		demandHourlyAfterUpdateHooks = append(demandHourlyAfterUpdateHooks, demandHourlyHook)
		demandHourlyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		demandHourlyBeforeDeleteMu.Lock()
		demandHourlyBeforeDeleteHooks = append(demandHourlyBeforeDeleteHooks, demandHourlyHook)
		demandHourlyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		demandHourlyAfterDeleteMu.Lock()
		demandHourlyAfterDeleteHooks = append(demandHourlyAfterDeleteHooks, demandHourlyHook)
		demandHourlyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		demandHourlyBeforeUpsertMu.Lock()
		demandHourlyBeforeUpsertHooks = append(demandHourlyBeforeUpsertHooks, demandHourlyHook)
		demandHourlyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		demandHourlyAfterUpsertMu.Lock()
		demandHourlyAfterUpsertHooks = append(demandHourlyAfterUpsertHooks, demandHourlyHook)
		demandHourlyAfterUpsertMu.Unlock()
	}
}

// One returns a single demandHourly record from the query.
func (q demandHourlyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DemandHourly, error) {
	o := &DemandHourly{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for demand_hourly")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DemandHourly records from the query.
func (q demandHourlyQuery) All(ctx context.Context, exec boil.ContextExecutor) (DemandHourlySlice, error) {
	var o []*DemandHourly

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DemandHourly slice")
	}

	if len(demandHourlyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DemandHourly records in the query.
func (q demandHourlyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count demand_hourly rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q demandHourlyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if demand_hourly exists")
	}

	return count > 0, nil
}

// DemandHourlies retrieves all the records using an executor.
func DemandHourlies(mods ...qm.QueryMod) demandHourlyQuery {
	mods = append(mods, qm.From("\"demand_hourly\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"demand_hourly\".*"})
	}

	return demandHourlyQuery{q}
}

// FindDemandHourly retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDemandHourly(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, demandPartnerID string, domain string, selectCols ...string) (*DemandHourly, error) {
	demandHourlyObj := &DemandHourly{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"demand_hourly\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4", sel,
	)

	q := queries.Raw(query, time, publisherID, demandPartnerID, domain)

	err := q.Bind(ctx, exec, demandHourlyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from demand_hourly")
	}

	if err = demandHourlyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return demandHourlyObj, err
	}

	return demandHourlyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DemandHourly) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand_hourly provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandHourlyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	demandHourlyInsertCacheMut.RLock()
	cache, cached := demandHourlyInsertCache[key]
	demandHourlyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			demandHourlyAllColumns,
			demandHourlyColumnsWithDefault,
			demandHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(demandHourlyType, demandHourlyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(demandHourlyType, demandHourlyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"demand_hourly\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"demand_hourly\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into demand_hourly")
	}

	if !cached {
		demandHourlyInsertCacheMut.Lock()
		demandHourlyInsertCache[key] = cache
		demandHourlyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DemandHourly.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DemandHourly) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	demandHourlyUpdateCacheMut.RLock()
	cache, cached := demandHourlyUpdateCache[key]
	demandHourlyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			demandHourlyAllColumns,
			demandHourlyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update demand_hourly, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"demand_hourly\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, demandHourlyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(demandHourlyType, demandHourlyMapping, append(wl, demandHourlyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update demand_hourly row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for demand_hourly")
	}

	if !cached {
		demandHourlyUpdateCacheMut.Lock()
		demandHourlyUpdateCache[key] = cache
		demandHourlyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q demandHourlyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for demand_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for demand_hourly")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DemandHourlySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"demand_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, demandHourlyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in demandHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all demandHourly")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DemandHourly) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no demand_hourly provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandHourlyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	demandHourlyUpsertCacheMut.RLock()
	cache, cached := demandHourlyUpsertCache[key]
	demandHourlyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			demandHourlyAllColumns,
			demandHourlyColumnsWithDefault,
			demandHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			demandHourlyAllColumns,
			demandHourlyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert demand_hourly, could not build update column list")
		}

		ret := strmangle.SetComplement(demandHourlyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(demandHourlyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert demand_hourly, could not build conflict column list")
			}

			conflict = make([]string, len(demandHourlyPrimaryKeyColumns))
			copy(conflict, demandHourlyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"demand_hourly\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(demandHourlyType, demandHourlyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(demandHourlyType, demandHourlyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert demand_hourly")
	}

	if !cached {
		demandHourlyUpsertCacheMut.Lock()
		demandHourlyUpsertCache[key] = cache
		demandHourlyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DemandHourly record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DemandHourly) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DemandHourly provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), demandHourlyPrimaryKeyMapping)
	sql := "DELETE FROM \"demand_hourly\" WHERE \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from demand_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for demand_hourly")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q demandHourlyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no demandHourlyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_hourly")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DemandHourlySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(demandHourlyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"demand_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandHourlyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demandHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_hourly")
	}

	if len(demandHourlyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DemandHourly) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDemandHourly(ctx, exec, o.Time, o.PublisherID, o.DemandPartnerID, o.Domain)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandHourlySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DemandHourlySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"demand_hourly\".* FROM \"demand_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandHourlyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DemandHourlySlice")
	}

	*o = slice

	return nil
}

// DemandHourlyExists checks if the DemandHourly row exists.
func DemandHourlyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, demandPartnerID string, domain string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"demand_hourly\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, publisherID, demandPartnerID, domain)
	}
	row := exec.QueryRowContext(ctx, sql, time, publisherID, demandPartnerID, domain)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if demand_hourly exists")
	}

	return exists, nil
}

// Exists checks if the DemandHourly row exists.
func (o *DemandHourly) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DemandHourlyExists(ctx, exec, o.Time, o.PublisherID, o.DemandPartnerID, o.Domain)
}
