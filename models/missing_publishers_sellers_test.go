// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMissingPublishersSellers(t *testing.T) {
	t.Parallel()

	query := MissingPublishersSellers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMissingPublishersSellersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMissingPublishersSellersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MissingPublishersSellers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMissingPublishersSellersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MissingPublishersSellerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMissingPublishersSellersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MissingPublishersSellerExists(ctx, tx, o.Name)
	if err != nil {
		t.Errorf("Unable to check if MissingPublishersSeller exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MissingPublishersSellerExists to return true, but got false.")
	}
}

func testMissingPublishersSellersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	missingPublishersSellerFound, err := FindMissingPublishersSeller(ctx, tx, o.Name)
	if err != nil {
		t.Error(err)
	}

	if missingPublishersSellerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMissingPublishersSellersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MissingPublishersSellers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMissingPublishersSellersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MissingPublishersSellers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMissingPublishersSellersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	missingPublishersSellerOne := &MissingPublishersSeller{}
	missingPublishersSellerTwo := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, missingPublishersSellerOne, missingPublishersSellerDBTypes, false, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}
	if err = randomize.Struct(seed, missingPublishersSellerTwo, missingPublishersSellerDBTypes, false, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = missingPublishersSellerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = missingPublishersSellerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MissingPublishersSellers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMissingPublishersSellersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	missingPublishersSellerOne := &MissingPublishersSeller{}
	missingPublishersSellerTwo := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, missingPublishersSellerOne, missingPublishersSellerDBTypes, false, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}
	if err = randomize.Struct(seed, missingPublishersSellerTwo, missingPublishersSellerDBTypes, false, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = missingPublishersSellerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = missingPublishersSellerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func missingPublishersSellerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func missingPublishersSellerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func missingPublishersSellerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func missingPublishersSellerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func missingPublishersSellerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func missingPublishersSellerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func missingPublishersSellerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func missingPublishersSellerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func missingPublishersSellerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MissingPublishersSeller) error {
	*o = MissingPublishersSeller{}
	return nil
}

func testMissingPublishersSellersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MissingPublishersSeller{}
	o := &MissingPublishersSeller{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller object: %s", err)
	}

	AddMissingPublishersSellerHook(boil.BeforeInsertHook, missingPublishersSellerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerBeforeInsertHooks = []MissingPublishersSellerHook{}

	AddMissingPublishersSellerHook(boil.AfterInsertHook, missingPublishersSellerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerAfterInsertHooks = []MissingPublishersSellerHook{}

	AddMissingPublishersSellerHook(boil.AfterSelectHook, missingPublishersSellerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerAfterSelectHooks = []MissingPublishersSellerHook{}

	AddMissingPublishersSellerHook(boil.BeforeUpdateHook, missingPublishersSellerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerBeforeUpdateHooks = []MissingPublishersSellerHook{}

	AddMissingPublishersSellerHook(boil.AfterUpdateHook, missingPublishersSellerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerAfterUpdateHooks = []MissingPublishersSellerHook{}

	AddMissingPublishersSellerHook(boil.BeforeDeleteHook, missingPublishersSellerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerBeforeDeleteHooks = []MissingPublishersSellerHook{}

	AddMissingPublishersSellerHook(boil.AfterDeleteHook, missingPublishersSellerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerAfterDeleteHooks = []MissingPublishersSellerHook{}

	AddMissingPublishersSellerHook(boil.BeforeUpsertHook, missingPublishersSellerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerBeforeUpsertHooks = []MissingPublishersSellerHook{}

	AddMissingPublishersSellerHook(boil.AfterUpsertHook, missingPublishersSellerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	missingPublishersSellerAfterUpsertHooks = []MissingPublishersSellerHook{}
}

func testMissingPublishersSellersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMissingPublishersSellersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(missingPublishersSellerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMissingPublishersSellersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMissingPublishersSellersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MissingPublishersSellerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMissingPublishersSellersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MissingPublishersSellers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	missingPublishersSellerDBTypes = map[string]string{`Name`: `character varying`, `URL`: `character varying`, `Sellers`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                              = bytes.MinRead
)

func testMissingPublishersSellersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(missingPublishersSellerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(missingPublishersSellerAllColumns) == len(missingPublishersSellerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMissingPublishersSellersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(missingPublishersSellerAllColumns) == len(missingPublishersSellerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MissingPublishersSeller{}
	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, missingPublishersSellerDBTypes, true, missingPublishersSellerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(missingPublishersSellerAllColumns, missingPublishersSellerPrimaryKeyColumns) {
		fields = missingPublishersSellerAllColumns
	} else {
		fields = strmangle.SetComplement(
			missingPublishersSellerAllColumns,
			missingPublishersSellerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MissingPublishersSellerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMissingPublishersSellersUpsert(t *testing.T) {
	t.Parallel()

	if len(missingPublishersSellerAllColumns) == len(missingPublishersSellerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MissingPublishersSeller{}
	if err = randomize.Struct(seed, &o, missingPublishersSellerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MissingPublishersSeller: %s", err)
	}

	count, err := MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, missingPublishersSellerDBTypes, false, missingPublishersSellerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MissingPublishersSeller struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MissingPublishersSeller: %s", err)
	}

	count, err = MissingPublishersSellers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
