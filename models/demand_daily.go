// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DemandDaily is an object representing the database table.
type DemandDaily struct {
	Time             time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	DemandPartnerID  string    `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	PublisherID      string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain           string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	BidRequest       int64     `boil:"bid_request" json:"bid_request" toml:"bid_request" yaml:"bid_request"`
	BidResponse      int64     `boil:"bid_response" json:"bid_response" toml:"bid_response" yaml:"bid_response"`
	BidPrice         float64   `boil:"bid_price" json:"bid_price" toml:"bid_price" yaml:"bid_price"`
	Impression       int64     `boil:"impression" json:"impression" toml:"impression" yaml:"impression"`
	Revenue          float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	DemandPartnerFee float64   `boil:"demand_partner_fee" json:"demand_partner_fee" toml:"demand_partner_fee" yaml:"demand_partner_fee"`
	DataFee          float64   `boil:"data_fee" json:"data_fee" toml:"data_fee" yaml:"data_fee"`

	R *demandDailyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L demandDailyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DemandDailyColumns = struct {
	Time             string
	DemandPartnerID  string
	PublisherID      string
	Domain           string
	BidRequest       string
	BidResponse      string
	BidPrice         string
	Impression       string
	Revenue          string
	DemandPartnerFee string
	DataFee          string
}{
	Time:             "time",
	DemandPartnerID:  "demand_partner_id",
	PublisherID:      "publisher_id",
	Domain:           "domain",
	BidRequest:       "bid_request",
	BidResponse:      "bid_response",
	BidPrice:         "bid_price",
	Impression:       "impression",
	Revenue:          "revenue",
	DemandPartnerFee: "demand_partner_fee",
	DataFee:          "data_fee",
}

var DemandDailyTableColumns = struct {
	Time             string
	DemandPartnerID  string
	PublisherID      string
	Domain           string
	BidRequest       string
	BidResponse      string
	BidPrice         string
	Impression       string
	Revenue          string
	DemandPartnerFee string
	DataFee          string
}{
	Time:             "demand_daily.time",
	DemandPartnerID:  "demand_daily.demand_partner_id",
	PublisherID:      "demand_daily.publisher_id",
	Domain:           "demand_daily.domain",
	BidRequest:       "demand_daily.bid_request",
	BidResponse:      "demand_daily.bid_response",
	BidPrice:         "demand_daily.bid_price",
	Impression:       "demand_daily.impression",
	Revenue:          "demand_daily.revenue",
	DemandPartnerFee: "demand_daily.demand_partner_fee",
	DataFee:          "demand_daily.data_fee",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DemandDailyWhere = struct {
	Time             whereHelpertime_Time
	DemandPartnerID  whereHelperstring
	PublisherID      whereHelperstring
	Domain           whereHelperstring
	BidRequest       whereHelperint64
	BidResponse      whereHelperint64
	BidPrice         whereHelperfloat64
	Impression       whereHelperint64
	Revenue          whereHelperfloat64
	DemandPartnerFee whereHelperfloat64
	DataFee          whereHelperfloat64
}{
	Time:             whereHelpertime_Time{field: "\"demand_daily\".\"time\""},
	DemandPartnerID:  whereHelperstring{field: "\"demand_daily\".\"demand_partner_id\""},
	PublisherID:      whereHelperstring{field: "\"demand_daily\".\"publisher_id\""},
	Domain:           whereHelperstring{field: "\"demand_daily\".\"domain\""},
	BidRequest:       whereHelperint64{field: "\"demand_daily\".\"bid_request\""},
	BidResponse:      whereHelperint64{field: "\"demand_daily\".\"bid_response\""},
	BidPrice:         whereHelperfloat64{field: "\"demand_daily\".\"bid_price\""},
	Impression:       whereHelperint64{field: "\"demand_daily\".\"impression\""},
	Revenue:          whereHelperfloat64{field: "\"demand_daily\".\"revenue\""},
	DemandPartnerFee: whereHelperfloat64{field: "\"demand_daily\".\"demand_partner_fee\""},
	DataFee:          whereHelperfloat64{field: "\"demand_daily\".\"data_fee\""},
}

// DemandDailyRels is where relationship names are stored.
var DemandDailyRels = struct {
}{}

// demandDailyR is where relationships are stored.
type demandDailyR struct {
}

// NewStruct creates a new relationship struct
func (*demandDailyR) NewStruct() *demandDailyR {
	return &demandDailyR{}
}

// demandDailyL is where Load methods for each relationship are stored.
type demandDailyL struct{}

var (
	demandDailyAllColumns            = []string{"time", "demand_partner_id", "publisher_id", "domain", "bid_request", "bid_response", "bid_price", "impression", "revenue", "demand_partner_fee", "data_fee"}
	demandDailyColumnsWithoutDefault = []string{"time", "demand_partner_id", "publisher_id"}
	demandDailyColumnsWithDefault    = []string{"domain", "bid_request", "bid_response", "bid_price", "impression", "revenue", "demand_partner_fee", "data_fee"}
	demandDailyPrimaryKeyColumns     = []string{"time", "publisher_id", "demand_partner_id", "domain"}
	demandDailyGeneratedColumns      = []string{}
)

type (
	// DemandDailySlice is an alias for a slice of pointers to DemandDaily.
	// This should almost always be used instead of []DemandDaily.
	DemandDailySlice []*DemandDaily
	// DemandDailyHook is the signature for custom DemandDaily hook methods
	DemandDailyHook func(context.Context, boil.ContextExecutor, *DemandDaily) error

	demandDailyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	demandDailyType                 = reflect.TypeOf(&DemandDaily{})
	demandDailyMapping              = queries.MakeStructMapping(demandDailyType)
	demandDailyPrimaryKeyMapping, _ = queries.BindMapping(demandDailyType, demandDailyMapping, demandDailyPrimaryKeyColumns)
	demandDailyInsertCacheMut       sync.RWMutex
	demandDailyInsertCache          = make(map[string]insertCache)
	demandDailyUpdateCacheMut       sync.RWMutex
	demandDailyUpdateCache          = make(map[string]updateCache)
	demandDailyUpsertCacheMut       sync.RWMutex
	demandDailyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var demandDailyAfterSelectMu sync.Mutex
var demandDailyAfterSelectHooks []DemandDailyHook

var demandDailyBeforeInsertMu sync.Mutex
var demandDailyBeforeInsertHooks []DemandDailyHook
var demandDailyAfterInsertMu sync.Mutex
var demandDailyAfterInsertHooks []DemandDailyHook

var demandDailyBeforeUpdateMu sync.Mutex
var demandDailyBeforeUpdateHooks []DemandDailyHook
var demandDailyAfterUpdateMu sync.Mutex
var demandDailyAfterUpdateHooks []DemandDailyHook

var demandDailyBeforeDeleteMu sync.Mutex
var demandDailyBeforeDeleteHooks []DemandDailyHook
var demandDailyAfterDeleteMu sync.Mutex
var demandDailyAfterDeleteHooks []DemandDailyHook

var demandDailyBeforeUpsertMu sync.Mutex
var demandDailyBeforeUpsertHooks []DemandDailyHook
var demandDailyAfterUpsertMu sync.Mutex
var demandDailyAfterUpsertHooks []DemandDailyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DemandDaily) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DemandDaily) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DemandDaily) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DemandDaily) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DemandDaily) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DemandDaily) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DemandDaily) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DemandDaily) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DemandDaily) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range demandDailyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDemandDailyHook registers your hook function for all future operations.
func AddDemandDailyHook(hookPoint boil.HookPoint, demandDailyHook DemandDailyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		demandDailyAfterSelectMu.Lock()
		demandDailyAfterSelectHooks = append(demandDailyAfterSelectHooks, demandDailyHook)
		demandDailyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		demandDailyBeforeInsertMu.Lock()
		demandDailyBeforeInsertHooks = append(demandDailyBeforeInsertHooks, demandDailyHook)
		demandDailyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		demandDailyAfterInsertMu.Lock()
		demandDailyAfterInsertHooks = append(demandDailyAfterInsertHooks, demandDailyHook)
		demandDailyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		demandDailyBeforeUpdateMu.Lock()
		demandDailyBeforeUpdateHooks = append(demandDailyBeforeUpdateHooks, demandDailyHook)
		demandDailyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		demandDailyAfterUpdateMu.Lock()
		demandDailyAfterUpdateHooks = append(demandDailyAfterUpdateHooks, demandDailyHook)
		demandDailyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		demandDailyBeforeDeleteMu.Lock()
		demandDailyBeforeDeleteHooks = append(demandDailyBeforeDeleteHooks, demandDailyHook)
		demandDailyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		demandDailyAfterDeleteMu.Lock()
		demandDailyAfterDeleteHooks = append(demandDailyAfterDeleteHooks, demandDailyHook)
		demandDailyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		demandDailyBeforeUpsertMu.Lock()
		demandDailyBeforeUpsertHooks = append(demandDailyBeforeUpsertHooks, demandDailyHook)
		demandDailyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		demandDailyAfterUpsertMu.Lock()
		demandDailyAfterUpsertHooks = append(demandDailyAfterUpsertHooks, demandDailyHook)
		demandDailyAfterUpsertMu.Unlock()
	}
}

// One returns a single demandDaily record from the query.
func (q demandDailyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DemandDaily, error) {
	o := &DemandDaily{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for demand_daily")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DemandDaily records from the query.
func (q demandDailyQuery) All(ctx context.Context, exec boil.ContextExecutor) (DemandDailySlice, error) {
	var o []*DemandDaily

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DemandDaily slice")
	}

	if len(demandDailyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DemandDaily records in the query.
func (q demandDailyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count demand_daily rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q demandDailyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if demand_daily exists")
	}

	return count > 0, nil
}

// DemandDailies retrieves all the records using an executor.
func DemandDailies(mods ...qm.QueryMod) demandDailyQuery {
	mods = append(mods, qm.From("\"demand_daily\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"demand_daily\".*"})
	}

	return demandDailyQuery{q}
}

// FindDemandDaily retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDemandDaily(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, demandPartnerID string, domain string, selectCols ...string) (*DemandDaily, error) {
	demandDailyObj := &DemandDaily{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"demand_daily\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4", sel,
	)

	q := queries.Raw(query, time, publisherID, demandPartnerID, domain)

	err := q.Bind(ctx, exec, demandDailyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from demand_daily")
	}

	if err = demandDailyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return demandDailyObj, err
	}

	return demandDailyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DemandDaily) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand_daily provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandDailyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	demandDailyInsertCacheMut.RLock()
	cache, cached := demandDailyInsertCache[key]
	demandDailyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			demandDailyAllColumns,
			demandDailyColumnsWithDefault,
			demandDailyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(demandDailyType, demandDailyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(demandDailyType, demandDailyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"demand_daily\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"demand_daily\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into demand_daily")
	}

	if !cached {
		demandDailyInsertCacheMut.Lock()
		demandDailyInsertCache[key] = cache
		demandDailyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DemandDaily.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DemandDaily) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	demandDailyUpdateCacheMut.RLock()
	cache, cached := demandDailyUpdateCache[key]
	demandDailyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			demandDailyAllColumns,
			demandDailyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update demand_daily, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"demand_daily\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, demandDailyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(demandDailyType, demandDailyMapping, append(wl, demandDailyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update demand_daily row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for demand_daily")
	}

	if !cached {
		demandDailyUpdateCacheMut.Lock()
		demandDailyUpdateCache[key] = cache
		demandDailyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q demandDailyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for demand_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for demand_daily")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DemandDailySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"demand_daily\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, demandDailyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in demandDaily slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all demandDaily")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DemandDaily) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no demand_daily provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandDailyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	demandDailyUpsertCacheMut.RLock()
	cache, cached := demandDailyUpsertCache[key]
	demandDailyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			demandDailyAllColumns,
			demandDailyColumnsWithDefault,
			demandDailyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			demandDailyAllColumns,
			demandDailyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert demand_daily, could not build update column list")
		}

		ret := strmangle.SetComplement(demandDailyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(demandDailyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert demand_daily, could not build conflict column list")
			}

			conflict = make([]string, len(demandDailyPrimaryKeyColumns))
			copy(conflict, demandDailyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"demand_daily\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(demandDailyType, demandDailyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(demandDailyType, demandDailyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert demand_daily")
	}

	if !cached {
		demandDailyUpsertCacheMut.Lock()
		demandDailyUpsertCache[key] = cache
		demandDailyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DemandDaily record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DemandDaily) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DemandDaily provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), demandDailyPrimaryKeyMapping)
	sql := "DELETE FROM \"demand_daily\" WHERE \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from demand_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for demand_daily")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q demandDailyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no demandDailyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_daily")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DemandDailySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(demandDailyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"demand_daily\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandDailyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demandDaily slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand_daily")
	}

	if len(demandDailyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DemandDaily) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDemandDaily(ctx, exec, o.Time, o.PublisherID, o.DemandPartnerID, o.Domain)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandDailySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DemandDailySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"demand_daily\".* FROM \"demand_daily\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, demandDailyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DemandDailySlice")
	}

	*o = slice

	return nil
}

// DemandDailyExists checks if the DemandDaily row exists.
func DemandDailyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, demandPartnerID string, domain string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"demand_daily\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, publisherID, demandPartnerID, domain)
	}
	row := exec.QueryRowContext(ctx, sql, time, publisherID, demandPartnerID, domain)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if demand_daily exists")
	}

	return exists, nil
}

// Exists checks if the DemandDaily row exists.
func (o *DemandDaily) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DemandDailyExists(ctx, exec, o.Time, o.PublisherID, o.DemandPartnerID, o.Domain)
}
