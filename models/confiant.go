// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Confiant is an object representing the database table.
type Confiant struct {
	ConfiantKey string    `boil:"confiant_key" json:"confiant_key" toml:"confiant_key" yaml:"confiant_key"`
	PublisherID string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain      string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Rate        float64   `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *confiantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L confiantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfiantColumns = struct {
	ConfiantKey string
	PublisherID string
	Domain      string
	Rate        string
	CreatedAt   string
	UpdatedAt   string
}{
	ConfiantKey: "confiant_key",
	PublisherID: "publisher_id",
	Domain:      "domain",
	Rate:        "rate",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ConfiantTableColumns = struct {
	ConfiantKey string
	PublisherID string
	Domain      string
	Rate        string
	CreatedAt   string
	UpdatedAt   string
}{
	ConfiantKey: "confiant.confiant_key",
	PublisherID: "confiant.publisher_id",
	Domain:      "confiant.domain",
	Rate:        "confiant.rate",
	CreatedAt:   "confiant.created_at",
	UpdatedAt:   "confiant.updated_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ConfiantWhere = struct {
	ConfiantKey whereHelperstring
	PublisherID whereHelperstring
	Domain      whereHelperstring
	Rate        whereHelperfloat64
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
}{
	ConfiantKey: whereHelperstring{field: "\"confiant\".\"confiant_key\""},
	PublisherID: whereHelperstring{field: "\"confiant\".\"publisher_id\""},
	Domain:      whereHelperstring{field: "\"confiant\".\"domain\""},
	Rate:        whereHelperfloat64{field: "\"confiant\".\"rate\""},
	CreatedAt:   whereHelpertime_Time{field: "\"confiant\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"confiant\".\"updated_at\""},
}

// ConfiantRels is where relationship names are stored.
var ConfiantRels = struct {
	Publisher string
}{
	Publisher: "Publisher",
}

// confiantR is where relationships are stored.
type confiantR struct {
	Publisher *Publisher `boil:"Publisher" json:"Publisher" toml:"Publisher" yaml:"Publisher"`
}

// NewStruct creates a new relationship struct
func (*confiantR) NewStruct() *confiantR {
	return &confiantR{}
}

func (r *confiantR) GetPublisher() *Publisher {
	if r == nil {
		return nil
	}
	return r.Publisher
}

// confiantL is where Load methods for each relationship are stored.
type confiantL struct{}

var (
	confiantAllColumns            = []string{"confiant_key", "publisher_id", "domain", "rate", "created_at", "updated_at"}
	confiantColumnsWithoutDefault = []string{"confiant_key", "publisher_id", "domain", "created_at"}
	confiantColumnsWithDefault    = []string{"rate", "updated_at"}
	confiantPrimaryKeyColumns     = []string{"confiant_key", "domain", "publisher_id"}
	confiantGeneratedColumns      = []string{}
)

type (
	// ConfiantSlice is an alias for a slice of pointers to Confiant.
	// This should almost always be used instead of []Confiant.
	ConfiantSlice []*Confiant
	// ConfiantHook is the signature for custom Confiant hook methods
	ConfiantHook func(context.Context, boil.ContextExecutor, *Confiant) error

	confiantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	confiantType                 = reflect.TypeOf(&Confiant{})
	confiantMapping              = queries.MakeStructMapping(confiantType)
	confiantPrimaryKeyMapping, _ = queries.BindMapping(confiantType, confiantMapping, confiantPrimaryKeyColumns)
	confiantInsertCacheMut       sync.RWMutex
	confiantInsertCache          = make(map[string]insertCache)
	confiantUpdateCacheMut       sync.RWMutex
	confiantUpdateCache          = make(map[string]updateCache)
	confiantUpsertCacheMut       sync.RWMutex
	confiantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var confiantAfterSelectMu sync.Mutex
var confiantAfterSelectHooks []ConfiantHook

var confiantBeforeInsertMu sync.Mutex
var confiantBeforeInsertHooks []ConfiantHook
var confiantAfterInsertMu sync.Mutex
var confiantAfterInsertHooks []ConfiantHook

var confiantBeforeUpdateMu sync.Mutex
var confiantBeforeUpdateHooks []ConfiantHook
var confiantAfterUpdateMu sync.Mutex
var confiantAfterUpdateHooks []ConfiantHook

var confiantBeforeDeleteMu sync.Mutex
var confiantBeforeDeleteHooks []ConfiantHook
var confiantAfterDeleteMu sync.Mutex
var confiantAfterDeleteHooks []ConfiantHook

var confiantBeforeUpsertMu sync.Mutex
var confiantBeforeUpsertHooks []ConfiantHook
var confiantAfterUpsertMu sync.Mutex
var confiantAfterUpsertHooks []ConfiantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Confiant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Confiant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Confiant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Confiant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Confiant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Confiant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Confiant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Confiant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Confiant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range confiantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfiantHook registers your hook function for all future operations.
func AddConfiantHook(hookPoint boil.HookPoint, confiantHook ConfiantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		confiantAfterSelectMu.Lock()
		confiantAfterSelectHooks = append(confiantAfterSelectHooks, confiantHook)
		confiantAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		confiantBeforeInsertMu.Lock()
		confiantBeforeInsertHooks = append(confiantBeforeInsertHooks, confiantHook)
		confiantBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		confiantAfterInsertMu.Lock()
		confiantAfterInsertHooks = append(confiantAfterInsertHooks, confiantHook)
		confiantAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		confiantBeforeUpdateMu.Lock()
		confiantBeforeUpdateHooks = append(confiantBeforeUpdateHooks, confiantHook)
		confiantBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		confiantAfterUpdateMu.Lock()
		confiantAfterUpdateHooks = append(confiantAfterUpdateHooks, confiantHook)
		confiantAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		confiantBeforeDeleteMu.Lock()
		confiantBeforeDeleteHooks = append(confiantBeforeDeleteHooks, confiantHook)
		confiantBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		confiantAfterDeleteMu.Lock()
		confiantAfterDeleteHooks = append(confiantAfterDeleteHooks, confiantHook)
		confiantAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		confiantBeforeUpsertMu.Lock()
		confiantBeforeUpsertHooks = append(confiantBeforeUpsertHooks, confiantHook)
		confiantBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		confiantAfterUpsertMu.Lock()
		confiantAfterUpsertHooks = append(confiantAfterUpsertHooks, confiantHook)
		confiantAfterUpsertMu.Unlock()
	}
}

// One returns a single confiant record from the query.
func (q confiantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Confiant, error) {
	o := &Confiant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for confiant")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Confiant records from the query.
func (q confiantQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConfiantSlice, error) {
	var o []*Confiant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Confiant slice")
	}

	if len(confiantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Confiant records in the query.
func (q confiantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count confiant rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q confiantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if confiant exists")
	}

	return count > 0, nil
}

// Publisher pointed to by the foreign key.
func (o *Confiant) Publisher(mods ...qm.QueryMod) publisherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"publisher_id\" = ?", o.PublisherID),
	}

	queryMods = append(queryMods, mods...)

	return Publishers(queryMods...)
}

// LoadPublisher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (confiantL) LoadPublisher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiant interface{}, mods queries.Applicator) error {
	var slice []*Confiant
	var object *Confiant

	if singular {
		var ok bool
		object, ok = maybeConfiant.(*Confiant)
		if !ok {
			object = new(Confiant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeConfiant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeConfiant))
			}
		}
	} else {
		s, ok := maybeConfiant.(*[]*Confiant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeConfiant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeConfiant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &confiantR{}
		}
		args[object.PublisherID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &confiantR{}
			}

			args[obj.PublisherID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`publisher`),
		qm.WhereIn(`publisher.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Publisher")
	}

	var resultSlice []*Publisher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Publisher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for publisher")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publisher")
	}

	if len(publisherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Publisher = foreign
		if foreign.R == nil {
			foreign.R = &publisherR{}
		}
		foreign.R.Confiants = append(foreign.R.Confiants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PublisherID == foreign.PublisherID {
				local.R.Publisher = foreign
				if foreign.R == nil {
					foreign.R = &publisherR{}
				}
				foreign.R.Confiants = append(foreign.R.Confiants, local)
				break
			}
		}
	}

	return nil
}

// SetPublisher of the confiant to the related item.
// Sets o.R.Publisher to related.
// Adds o to related.R.Confiants.
func (o *Confiant) SetPublisher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Publisher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"confiant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"publisher_id"}),
		strmangle.WhereClause("\"", "\"", 2, confiantPrimaryKeyColumns),
	)
	values := []interface{}{related.PublisherID, o.ConfiantKey, o.Domain, o.PublisherID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PublisherID = related.PublisherID
	if o.R == nil {
		o.R = &confiantR{
			Publisher: related,
		}
	} else {
		o.R.Publisher = related
	}

	if related.R == nil {
		related.R = &publisherR{
			Confiants: ConfiantSlice{o},
		}
	} else {
		related.R.Confiants = append(related.R.Confiants, o)
	}

	return nil
}

// Confiants retrieves all the records using an executor.
func Confiants(mods ...qm.QueryMod) confiantQuery {
	mods = append(mods, qm.From("\"confiant\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"confiant\".*"})
	}

	return confiantQuery{q}
}

// FindConfiant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfiant(ctx context.Context, exec boil.ContextExecutor, confiantKey string, domain string, publisherID string, selectCols ...string) (*Confiant, error) {
	confiantObj := &Confiant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"confiant\" where \"confiant_key\"=$1 AND \"domain\"=$2 AND \"publisher_id\"=$3", sel,
	)

	q := queries.Raw(query, confiantKey, domain, publisherID)

	err := q.Bind(ctx, exec, confiantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from confiant")
	}

	if err = confiantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return confiantObj, err
	}

	return confiantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Confiant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no confiant provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(confiantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	confiantInsertCacheMut.RLock()
	cache, cached := confiantInsertCache[key]
	confiantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			confiantAllColumns,
			confiantColumnsWithDefault,
			confiantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(confiantType, confiantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(confiantType, confiantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"confiant\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"confiant\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into confiant")
	}

	if !cached {
		confiantInsertCacheMut.Lock()
		confiantInsertCache[key] = cache
		confiantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Confiant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Confiant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	confiantUpdateCacheMut.RLock()
	cache, cached := confiantUpdateCache[key]
	confiantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			confiantAllColumns,
			confiantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update confiant, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"confiant\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, confiantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(confiantType, confiantMapping, append(wl, confiantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update confiant row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for confiant")
	}

	if !cached {
		confiantUpdateCacheMut.Lock()
		confiantUpdateCache[key] = cache
		confiantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q confiantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for confiant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for confiant")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfiantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), confiantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"confiant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, confiantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in confiant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all confiant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Confiant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no confiant provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(confiantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	confiantUpsertCacheMut.RLock()
	cache, cached := confiantUpsertCache[key]
	confiantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			confiantAllColumns,
			confiantColumnsWithDefault,
			confiantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			confiantAllColumns,
			confiantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert confiant, could not build update column list")
		}

		ret := strmangle.SetComplement(confiantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(confiantPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert confiant, could not build conflict column list")
			}

			conflict = make([]string, len(confiantPrimaryKeyColumns))
			copy(conflict, confiantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"confiant\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(confiantType, confiantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(confiantType, confiantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert confiant")
	}

	if !cached {
		confiantUpsertCacheMut.Lock()
		confiantUpsertCache[key] = cache
		confiantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Confiant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Confiant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Confiant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), confiantPrimaryKeyMapping)
	sql := "DELETE FROM \"confiant\" WHERE \"confiant_key\"=$1 AND \"domain\"=$2 AND \"publisher_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from confiant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for confiant")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q confiantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no confiantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from confiant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for confiant")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfiantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(confiantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), confiantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"confiant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, confiantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from confiant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for confiant")
	}

	if len(confiantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Confiant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConfiant(ctx, exec, o.ConfiantKey, o.Domain, o.PublisherID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfiantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfiantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), confiantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"confiant\".* FROM \"confiant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, confiantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfiantSlice")
	}

	*o = slice

	return nil
}

// ConfiantExists checks if the Confiant row exists.
func ConfiantExists(ctx context.Context, exec boil.ContextExecutor, confiantKey string, domain string, publisherID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"confiant\" where \"confiant_key\"=$1 AND \"domain\"=$2 AND \"publisher_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, confiantKey, domain, publisherID)
	}
	row := exec.QueryRowContext(ctx, sql, confiantKey, domain, publisherID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if confiant exists")
	}

	return exists, nil
}

// Exists checks if the Confiant row exists.
func (o *Confiant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ConfiantExists(ctx, exec, o.ConfiantKey, o.Domain, o.PublisherID)
}
