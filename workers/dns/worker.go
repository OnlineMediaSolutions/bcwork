package dns

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"sort"
	"strings"
	"time"

	"github.com/bramvdbogaerde/go-scp"
	"github.com/bramvdbogaerde/go-scp/auth"
	"github.com/digitalocean/godo"
	"github.com/friendsofgo/errors"
	"github.com/m6yf/bcwork/config"
	"github.com/rs/zerolog/log"
	"github.com/spf13/viper"
	"golang.org/x/crypto/ssh"
)

type Worker struct {
	Name string `json:"name"`
}

func (w *Worker) Init(ctx context.Context, conf config.StringMap) error {
	return nil
}

func (w *Worker) Do(ctx context.Context) error {
	doClient := godo.NewFromToken(viper.GetString("digitalocean.token"))

	dropletsList, err := DropletList(ctx, doClient)
	if err != nil {
		return errors.Wrapf(err, "failed to fetch droplet list")
	}
	hostsFile := GenerateHostsFile(dropletsList)

	dropletsMap := GenerateHostsList(dropletsList)

	err = SendHostFileToDroplets(hostsFile, dropletsMap)
	if err != nil {
		return errors.Wrapf(err, "couldnt complete sending hosts file to all droplets")
	}

	return nil
}

func (w *Worker) GetSleep() int {
	return 0
}

func DropletList(ctx context.Context, client *godo.Client) ([]godo.Droplet, error) {
	// create a list to hold our droplets
	list := []godo.Droplet{}

	// create options. initially, these will be blank
	opt := &godo.ListOptions{}
	for {
		droplets, resp, err := client.Droplets.List(ctx, opt)
		if err != nil {
			return nil, err
		}

		// append the current page's droplets to our list
		list = append(list, droplets...)

		// if we are at the last page, break out the for loop
		if resp.Links == nil || resp.Links.IsLastPage() {
			break
		}

		page, err := resp.Links.CurrentPage()
		if err != nil {
			return nil, err
		}

		// set the page we want for the next request
		opt.Page = page + 1
	}

	return list, nil
}

func GenerateHostsList(droplets []godo.Droplet) map[string]string {
	sort.SliceStable(droplets, func(i, j int) bool {
		return strings.Compare(droplets[i].Name, droplets[j].Name) < 0
	})

	res := make(map[string]string)

	for _, d := range droplets {
		for _, n := range d.Networks.V4 {
			if n.Type == "public" {
				res[d.Name] = n.IPAddress
			}
		}
	}

	return res
}

func GenerateHostsFile(droplets []godo.Droplet) string {
	sort.SliceStable(droplets, func(i, j int) bool {
		return strings.Compare(droplets[i].Name, droplets[j].Name) < 0
	})

	buf := bytes.Buffer{}
	buf.WriteString("########################\n")
	buf.WriteString(fmt.Sprintf("# This hosts file was auto generated by dns worker on %s\n", time.Now().Format("2006-01-02 15:04")))
	buf.WriteString("########################\n")

	buf.WriteString("\n127.0.0.1 localhost\n\n")

	for _, d := range droplets {
		for _, n := range d.Networks.V4 {
			name := d.Name
			if n.Type == "private" {
				name += "-private"
			}
			buf.WriteString(fmt.Sprintf("%s %s\n", n.IPAddress, name))
		}
		buf.WriteString("\n")
	}

	return buf.String()
}

func SendHostFileToDroplets(hostsFile string, droplets map[string]string) error {
	hostsFileName := "hosts.temp"
	b := []byte(hostsFile)
	err := os.WriteFile(hostsFileName, b, 0644)
	if err != nil {
		return errors.Wrapf(err, "failed to save temporary hosts file")
	}

	// Use SSH key authentication from the auth package
	// we ignore the host key in this example, please change this if you use this library
	clientConfig, _ := auth.PrivateKey("root", "/Users/yiftah/.ssh/id_rsa_brightcom", ssh.InsecureIgnoreHostKey()) //nolint:gosec

	for name, ip := range droplets {
		// Open a file
		f, err := os.Open(hostsFileName)
		if err != nil {
			return errors.Wrapf(err, "failed to open temporary hosts file")
		}

		// Create a new SCP client
		client := scp.NewClient(name+":22", &clientConfig)

		// Connect to the remote server
		err = client.Connect()
		if err != nil {
			return errors.Wrapf(err, "failed to ssh connect to %s %s", name, ip)
		}

		// Finaly, copy the file over
		// Usage: CopyFromFile(context, file, remotePath, permission)

		// the context can be adjusted to provide time-outs or inherit from other contexts if this is embedded in a larger application.
		err = client.CopyFromFile(context.Background(), *f, "/etc/hosts", "0655")
		if err != nil {
			return errors.Wrapf(err, "failed to copy hosts file to %s %s", name, ip)
		}

		client.Close()
		f.Close()

		log.Info().Msgf("hosts file copied to %s %s", name, ip)
	}

	return nil
}
