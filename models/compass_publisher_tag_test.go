// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompassPublisherTags(t *testing.T) {
	t.Parallel()

	query := CompassPublisherTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompassPublisherTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompassPublisherTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CompassPublisherTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompassPublisherTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompassPublisherTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompassPublisherTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompassPublisherTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CompassPublisherTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompassPublisherTagExists to return true, but got false.")
	}
}

func testCompassPublisherTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	compassPublisherTagFound, err := FindCompassPublisherTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if compassPublisherTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompassPublisherTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CompassPublisherTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompassPublisherTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CompassPublisherTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompassPublisherTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	compassPublisherTagOne := &CompassPublisherTag{}
	compassPublisherTagTwo := &CompassPublisherTag{}
	if err = randomize.Struct(seed, compassPublisherTagOne, compassPublisherTagDBTypes, false, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}
	if err = randomize.Struct(seed, compassPublisherTagTwo, compassPublisherTagDBTypes, false, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = compassPublisherTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = compassPublisherTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompassPublisherTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompassPublisherTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	compassPublisherTagOne := &CompassPublisherTag{}
	compassPublisherTagTwo := &CompassPublisherTag{}
	if err = randomize.Struct(seed, compassPublisherTagOne, compassPublisherTagDBTypes, false, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}
	if err = randomize.Struct(seed, compassPublisherTagTwo, compassPublisherTagDBTypes, false, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = compassPublisherTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = compassPublisherTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func compassPublisherTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func compassPublisherTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func compassPublisherTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func compassPublisherTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func compassPublisherTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func compassPublisherTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func compassPublisherTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func compassPublisherTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func compassPublisherTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CompassPublisherTag) error {
	*o = CompassPublisherTag{}
	return nil
}

func testCompassPublisherTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CompassPublisherTag{}
	o := &CompassPublisherTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag object: %s", err)
	}

	AddCompassPublisherTagHook(boil.BeforeInsertHook, compassPublisherTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagBeforeInsertHooks = []CompassPublisherTagHook{}

	AddCompassPublisherTagHook(boil.AfterInsertHook, compassPublisherTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagAfterInsertHooks = []CompassPublisherTagHook{}

	AddCompassPublisherTagHook(boil.AfterSelectHook, compassPublisherTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagAfterSelectHooks = []CompassPublisherTagHook{}

	AddCompassPublisherTagHook(boil.BeforeUpdateHook, compassPublisherTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagBeforeUpdateHooks = []CompassPublisherTagHook{}

	AddCompassPublisherTagHook(boil.AfterUpdateHook, compassPublisherTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagAfterUpdateHooks = []CompassPublisherTagHook{}

	AddCompassPublisherTagHook(boil.BeforeDeleteHook, compassPublisherTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagBeforeDeleteHooks = []CompassPublisherTagHook{}

	AddCompassPublisherTagHook(boil.AfterDeleteHook, compassPublisherTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagAfterDeleteHooks = []CompassPublisherTagHook{}

	AddCompassPublisherTagHook(boil.BeforeUpsertHook, compassPublisherTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagBeforeUpsertHooks = []CompassPublisherTagHook{}

	AddCompassPublisherTagHook(boil.AfterUpsertHook, compassPublisherTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	compassPublisherTagAfterUpsertHooks = []CompassPublisherTagHook{}
}

func testCompassPublisherTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompassPublisherTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(compassPublisherTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompassPublisherTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompassPublisherTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompassPublisherTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompassPublisherTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompassPublisherTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	compassPublisherTagDBTypes = map[string]string{`ID`: `integer`, `PublisherID`: `character varying`, `DeviceType`: `character varying`, `Domain`: `character varying`}
	_                          = bytes.MinRead
)

func testCompassPublisherTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(compassPublisherTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(compassPublisherTagAllColumns) == len(compassPublisherTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompassPublisherTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(compassPublisherTagAllColumns) == len(compassPublisherTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompassPublisherTag{}
	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, compassPublisherTagDBTypes, true, compassPublisherTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(compassPublisherTagAllColumns, compassPublisherTagPrimaryKeyColumns) {
		fields = compassPublisherTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			compassPublisherTagAllColumns,
			compassPublisherTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompassPublisherTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompassPublisherTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(compassPublisherTagAllColumns) == len(compassPublisherTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CompassPublisherTag{}
	if err = randomize.Struct(seed, &o, compassPublisherTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompassPublisherTag: %s", err)
	}

	count, err := CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, compassPublisherTagDBTypes, false, compassPublisherTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompassPublisherTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompassPublisherTag: %s", err)
	}

	count, err = CompassPublisherTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
