// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MetadataQueue is an object representing the database table.
type MetadataQueue struct {
	TransactionID     string      `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	Key               string      `boil:"key" json:"key" toml:"key" yaml:"key"`
	Version           null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	Value             types.JSON  `boil:"value" json:"value" toml:"value" yaml:"value"`
	CommitedInstances int64       `boil:"commited_instances" json:"commited_instances" toml:"commited_instances" yaml:"commited_instances"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *metadataQueueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metadataQueueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetadataQueueColumns = struct {
	TransactionID     string
	Key               string
	Version           string
	Value             string
	CommitedInstances string
	CreatedAt         string
	UpdatedAt         string
}{
	TransactionID:     "transaction_id",
	Key:               "key",
	Version:           "version",
	Value:             "value",
	CommitedInstances: "commited_instances",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var MetadataQueueTableColumns = struct {
	TransactionID     string
	Key               string
	Version           string
	Value             string
	CommitedInstances string
	CreatedAt         string
	UpdatedAt         string
}{
	TransactionID:     "metadata_queue.transaction_id",
	Key:               "metadata_queue.key",
	Version:           "metadata_queue.version",
	Value:             "metadata_queue.value",
	CommitedInstances: "metadata_queue.commited_instances",
	CreatedAt:         "metadata_queue.created_at",
	UpdatedAt:         "metadata_queue.updated_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MetadataQueueWhere = struct {
	TransactionID     whereHelperstring
	Key               whereHelperstring
	Version           whereHelpernull_String
	Value             whereHelpertypes_JSON
	CommitedInstances whereHelperint64
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpernull_Time
}{
	TransactionID:     whereHelperstring{field: "\"metadata_queue\".\"transaction_id\""},
	Key:               whereHelperstring{field: "\"metadata_queue\".\"key\""},
	Version:           whereHelpernull_String{field: "\"metadata_queue\".\"version\""},
	Value:             whereHelpertypes_JSON{field: "\"metadata_queue\".\"value\""},
	CommitedInstances: whereHelperint64{field: "\"metadata_queue\".\"commited_instances\""},
	CreatedAt:         whereHelpertime_Time{field: "\"metadata_queue\".\"created_at\""},
	UpdatedAt:         whereHelpernull_Time{field: "\"metadata_queue\".\"updated_at\""},
}

// MetadataQueueRels is where relationship names are stored.
var MetadataQueueRels = struct {
}{}

// metadataQueueR is where relationships are stored.
type metadataQueueR struct {
}

// NewStruct creates a new relationship struct
func (*metadataQueueR) NewStruct() *metadataQueueR {
	return &metadataQueueR{}
}

// metadataQueueL is where Load methods for each relationship are stored.
type metadataQueueL struct{}

var (
	metadataQueueAllColumns            = []string{"transaction_id", "key", "version", "value", "commited_instances", "created_at", "updated_at"}
	metadataQueueColumnsWithoutDefault = []string{"transaction_id", "key", "value", "commited_instances", "created_at"}
	metadataQueueColumnsWithDefault    = []string{"version", "updated_at"}
	metadataQueuePrimaryKeyColumns     = []string{"transaction_id"}
	metadataQueueGeneratedColumns      = []string{}
)

type (
	// MetadataQueueSlice is an alias for a slice of pointers to MetadataQueue.
	// This should almost always be used instead of []MetadataQueue.
	MetadataQueueSlice []*MetadataQueue
	// MetadataQueueHook is the signature for custom MetadataQueue hook methods
	MetadataQueueHook func(context.Context, boil.ContextExecutor, *MetadataQueue) error

	metadataQueueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metadataQueueType                 = reflect.TypeOf(&MetadataQueue{})
	metadataQueueMapping              = queries.MakeStructMapping(metadataQueueType)
	metadataQueuePrimaryKeyMapping, _ = queries.BindMapping(metadataQueueType, metadataQueueMapping, metadataQueuePrimaryKeyColumns)
	metadataQueueInsertCacheMut       sync.RWMutex
	metadataQueueInsertCache          = make(map[string]insertCache)
	metadataQueueUpdateCacheMut       sync.RWMutex
	metadataQueueUpdateCache          = make(map[string]updateCache)
	metadataQueueUpsertCacheMut       sync.RWMutex
	metadataQueueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metadataQueueAfterSelectMu sync.Mutex
var metadataQueueAfterSelectHooks []MetadataQueueHook

var metadataQueueBeforeInsertMu sync.Mutex
var metadataQueueBeforeInsertHooks []MetadataQueueHook
var metadataQueueAfterInsertMu sync.Mutex
var metadataQueueAfterInsertHooks []MetadataQueueHook

var metadataQueueBeforeUpdateMu sync.Mutex
var metadataQueueBeforeUpdateHooks []MetadataQueueHook
var metadataQueueAfterUpdateMu sync.Mutex
var metadataQueueAfterUpdateHooks []MetadataQueueHook

var metadataQueueBeforeDeleteMu sync.Mutex
var metadataQueueBeforeDeleteHooks []MetadataQueueHook
var metadataQueueAfterDeleteMu sync.Mutex
var metadataQueueAfterDeleteHooks []MetadataQueueHook

var metadataQueueBeforeUpsertMu sync.Mutex
var metadataQueueBeforeUpsertHooks []MetadataQueueHook
var metadataQueueAfterUpsertMu sync.Mutex
var metadataQueueAfterUpsertHooks []MetadataQueueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MetadataQueue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MetadataQueue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MetadataQueue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MetadataQueue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MetadataQueue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MetadataQueue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MetadataQueue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MetadataQueue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MetadataQueue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metadataQueueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetadataQueueHook registers your hook function for all future operations.
func AddMetadataQueueHook(hookPoint boil.HookPoint, metadataQueueHook MetadataQueueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metadataQueueAfterSelectMu.Lock()
		metadataQueueAfterSelectHooks = append(metadataQueueAfterSelectHooks, metadataQueueHook)
		metadataQueueAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		metadataQueueBeforeInsertMu.Lock()
		metadataQueueBeforeInsertHooks = append(metadataQueueBeforeInsertHooks, metadataQueueHook)
		metadataQueueBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		metadataQueueAfterInsertMu.Lock()
		metadataQueueAfterInsertHooks = append(metadataQueueAfterInsertHooks, metadataQueueHook)
		metadataQueueAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		metadataQueueBeforeUpdateMu.Lock()
		metadataQueueBeforeUpdateHooks = append(metadataQueueBeforeUpdateHooks, metadataQueueHook)
		metadataQueueBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		metadataQueueAfterUpdateMu.Lock()
		metadataQueueAfterUpdateHooks = append(metadataQueueAfterUpdateHooks, metadataQueueHook)
		metadataQueueAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		metadataQueueBeforeDeleteMu.Lock()
		metadataQueueBeforeDeleteHooks = append(metadataQueueBeforeDeleteHooks, metadataQueueHook)
		metadataQueueBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		metadataQueueAfterDeleteMu.Lock()
		metadataQueueAfterDeleteHooks = append(metadataQueueAfterDeleteHooks, metadataQueueHook)
		metadataQueueAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		metadataQueueBeforeUpsertMu.Lock()
		metadataQueueBeforeUpsertHooks = append(metadataQueueBeforeUpsertHooks, metadataQueueHook)
		metadataQueueBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		metadataQueueAfterUpsertMu.Lock()
		metadataQueueAfterUpsertHooks = append(metadataQueueAfterUpsertHooks, metadataQueueHook)
		metadataQueueAfterUpsertMu.Unlock()
	}
}

// One returns a single metadataQueue record from the query.
func (q metadataQueueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MetadataQueue, error) {
	o := &MetadataQueue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for metadata_queue")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MetadataQueue records from the query.
func (q metadataQueueQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetadataQueueSlice, error) {
	var o []*MetadataQueue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MetadataQueue slice")
	}

	if len(metadataQueueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MetadataQueue records in the query.
func (q metadataQueueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count metadata_queue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metadataQueueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if metadata_queue exists")
	}

	return count > 0, nil
}

// MetadataQueues retrieves all the records using an executor.
func MetadataQueues(mods ...qm.QueryMod) metadataQueueQuery {
	mods = append(mods, qm.From("\"metadata_queue\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"metadata_queue\".*"})
	}

	return metadataQueueQuery{q}
}

// FindMetadataQueue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetadataQueue(ctx context.Context, exec boil.ContextExecutor, transactionID string, selectCols ...string) (*MetadataQueue, error) {
	metadataQueueObj := &MetadataQueue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"metadata_queue\" where \"transaction_id\"=$1", sel,
	)

	q := queries.Raw(query, transactionID)

	err := q.Bind(ctx, exec, metadataQueueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from metadata_queue")
	}

	if err = metadataQueueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metadataQueueObj, err
	}

	return metadataQueueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MetadataQueue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no metadata_queue provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metadataQueueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metadataQueueInsertCacheMut.RLock()
	cache, cached := metadataQueueInsertCache[key]
	metadataQueueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metadataQueueAllColumns,
			metadataQueueColumnsWithDefault,
			metadataQueueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(metadataQueueType, metadataQueueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metadataQueueType, metadataQueueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"metadata_queue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"metadata_queue\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into metadata_queue")
	}

	if !cached {
		metadataQueueInsertCacheMut.Lock()
		metadataQueueInsertCache[key] = cache
		metadataQueueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MetadataQueue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MetadataQueue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metadataQueueUpdateCacheMut.RLock()
	cache, cached := metadataQueueUpdateCache[key]
	metadataQueueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metadataQueueAllColumns,
			metadataQueuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update metadata_queue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"metadata_queue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, metadataQueuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metadataQueueType, metadataQueueMapping, append(wl, metadataQueuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update metadata_queue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for metadata_queue")
	}

	if !cached {
		metadataQueueUpdateCacheMut.Lock()
		metadataQueueUpdateCache[key] = cache
		metadataQueueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metadataQueueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for metadata_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for metadata_queue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetadataQueueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metadataQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"metadata_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, metadataQueuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in metadataQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all metadataQueue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MetadataQueue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no metadata_queue provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metadataQueueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metadataQueueUpsertCacheMut.RLock()
	cache, cached := metadataQueueUpsertCache[key]
	metadataQueueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			metadataQueueAllColumns,
			metadataQueueColumnsWithDefault,
			metadataQueueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			metadataQueueAllColumns,
			metadataQueuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert metadata_queue, could not build update column list")
		}

		ret := strmangle.SetComplement(metadataQueueAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(metadataQueuePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert metadata_queue, could not build conflict column list")
			}

			conflict = make([]string, len(metadataQueuePrimaryKeyColumns))
			copy(conflict, metadataQueuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"metadata_queue\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(metadataQueueType, metadataQueueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metadataQueueType, metadataQueueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert metadata_queue")
	}

	if !cached {
		metadataQueueUpsertCacheMut.Lock()
		metadataQueueUpsertCache[key] = cache
		metadataQueueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MetadataQueue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MetadataQueue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MetadataQueue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metadataQueuePrimaryKeyMapping)
	sql := "DELETE FROM \"metadata_queue\" WHERE \"transaction_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from metadata_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for metadata_queue")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metadataQueueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no metadataQueueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metadata_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for metadata_queue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetadataQueueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metadataQueueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metadataQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"metadata_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metadataQueuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metadataQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for metadata_queue")
	}

	if len(metadataQueueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MetadataQueue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetadataQueue(ctx, exec, o.TransactionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetadataQueueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetadataQueueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metadataQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"metadata_queue\".* FROM \"metadata_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metadataQueuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MetadataQueueSlice")
	}

	*o = slice

	return nil
}

// MetadataQueueExists checks if the MetadataQueue row exists.
func MetadataQueueExists(ctx context.Context, exec boil.ContextExecutor, transactionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"metadata_queue\" where \"transaction_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, transactionID)
	}
	row := exec.QueryRowContext(ctx, sql, transactionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if metadata_queue exists")
	}

	return exists, nil
}

// Exists checks if the MetadataQueue row exists.
func (o *MetadataQueue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MetadataQueueExists(ctx, exec, o.TransactionID)
}
