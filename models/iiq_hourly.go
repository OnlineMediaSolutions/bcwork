// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IiqHourly is an object representing the database table.
type IiqHourly struct {
	Time       time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	Dpid       string    `boil:"dpid" json:"dpid" toml:"dpid" yaml:"dpid"`
	Datacenter string    `boil:"datacenter" json:"datacenter" toml:"datacenter" yaml:"datacenter"`
	Request    int64     `boil:"request" json:"request" toml:"request" yaml:"request"`
	Response   int64     `boil:"response" json:"response" toml:"response" yaml:"response"`
	Impression int64     `boil:"impression" json:"impression" toml:"impression" yaml:"impression"`
	Revenue    float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`

	R *iiqHourlyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L iiqHourlyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IiqHourlyColumns = struct {
	Time       string
	Dpid       string
	Datacenter string
	Request    string
	Response   string
	Impression string
	Revenue    string
}{
	Time:       "time",
	Dpid:       "dpid",
	Datacenter: "datacenter",
	Request:    "request",
	Response:   "response",
	Impression: "impression",
	Revenue:    "revenue",
}

var IiqHourlyTableColumns = struct {
	Time       string
	Dpid       string
	Datacenter string
	Request    string
	Response   string
	Impression string
	Revenue    string
}{
	Time:       "iiq_hourly.time",
	Dpid:       "iiq_hourly.dpid",
	Datacenter: "iiq_hourly.datacenter",
	Request:    "iiq_hourly.request",
	Response:   "iiq_hourly.response",
	Impression: "iiq_hourly.impression",
	Revenue:    "iiq_hourly.revenue",
}

// Generated where

var IiqHourlyWhere = struct {
	Time       whereHelpertime_Time
	Dpid       whereHelperstring
	Datacenter whereHelperstring
	Request    whereHelperint64
	Response   whereHelperint64
	Impression whereHelperint64
	Revenue    whereHelperfloat64
}{
	Time:       whereHelpertime_Time{field: "\"iiq_hourly\".\"time\""},
	Dpid:       whereHelperstring{field: "\"iiq_hourly\".\"dpid\""},
	Datacenter: whereHelperstring{field: "\"iiq_hourly\".\"datacenter\""},
	Request:    whereHelperint64{field: "\"iiq_hourly\".\"request\""},
	Response:   whereHelperint64{field: "\"iiq_hourly\".\"response\""},
	Impression: whereHelperint64{field: "\"iiq_hourly\".\"impression\""},
	Revenue:    whereHelperfloat64{field: "\"iiq_hourly\".\"revenue\""},
}

// IiqHourlyRels is where relationship names are stored.
var IiqHourlyRels = struct {
}{}

// iiqHourlyR is where relationships are stored.
type iiqHourlyR struct {
}

// NewStruct creates a new relationship struct
func (*iiqHourlyR) NewStruct() *iiqHourlyR {
	return &iiqHourlyR{}
}

// iiqHourlyL is where Load methods for each relationship are stored.
type iiqHourlyL struct{}

var (
	iiqHourlyAllColumns            = []string{"time", "dpid", "datacenter", "request", "response", "impression", "revenue"}
	iiqHourlyColumnsWithoutDefault = []string{"time", "dpid"}
	iiqHourlyColumnsWithDefault    = []string{"datacenter", "request", "response", "impression", "revenue"}
	iiqHourlyPrimaryKeyColumns     = []string{"time", "dpid", "datacenter"}
	iiqHourlyGeneratedColumns      = []string{}
)

type (
	// IiqHourlySlice is an alias for a slice of pointers to IiqHourly.
	// This should almost always be used instead of []IiqHourly.
	IiqHourlySlice []*IiqHourly
	// IiqHourlyHook is the signature for custom IiqHourly hook methods
	IiqHourlyHook func(context.Context, boil.ContextExecutor, *IiqHourly) error

	iiqHourlyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	iiqHourlyType                 = reflect.TypeOf(&IiqHourly{})
	iiqHourlyMapping              = queries.MakeStructMapping(iiqHourlyType)
	iiqHourlyPrimaryKeyMapping, _ = queries.BindMapping(iiqHourlyType, iiqHourlyMapping, iiqHourlyPrimaryKeyColumns)
	iiqHourlyInsertCacheMut       sync.RWMutex
	iiqHourlyInsertCache          = make(map[string]insertCache)
	iiqHourlyUpdateCacheMut       sync.RWMutex
	iiqHourlyUpdateCache          = make(map[string]updateCache)
	iiqHourlyUpsertCacheMut       sync.RWMutex
	iiqHourlyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var iiqHourlyAfterSelectMu sync.Mutex
var iiqHourlyAfterSelectHooks []IiqHourlyHook

var iiqHourlyBeforeInsertMu sync.Mutex
var iiqHourlyBeforeInsertHooks []IiqHourlyHook
var iiqHourlyAfterInsertMu sync.Mutex
var iiqHourlyAfterInsertHooks []IiqHourlyHook

var iiqHourlyBeforeUpdateMu sync.Mutex
var iiqHourlyBeforeUpdateHooks []IiqHourlyHook
var iiqHourlyAfterUpdateMu sync.Mutex
var iiqHourlyAfterUpdateHooks []IiqHourlyHook

var iiqHourlyBeforeDeleteMu sync.Mutex
var iiqHourlyBeforeDeleteHooks []IiqHourlyHook
var iiqHourlyAfterDeleteMu sync.Mutex
var iiqHourlyAfterDeleteHooks []IiqHourlyHook

var iiqHourlyBeforeUpsertMu sync.Mutex
var iiqHourlyBeforeUpsertHooks []IiqHourlyHook
var iiqHourlyAfterUpsertMu sync.Mutex
var iiqHourlyAfterUpsertHooks []IiqHourlyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IiqHourly) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IiqHourly) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IiqHourly) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IiqHourly) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IiqHourly) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IiqHourly) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IiqHourly) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IiqHourly) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IiqHourly) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range iiqHourlyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIiqHourlyHook registers your hook function for all future operations.
func AddIiqHourlyHook(hookPoint boil.HookPoint, iiqHourlyHook IiqHourlyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		iiqHourlyAfterSelectMu.Lock()
		iiqHourlyAfterSelectHooks = append(iiqHourlyAfterSelectHooks, iiqHourlyHook)
		iiqHourlyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		iiqHourlyBeforeInsertMu.Lock()
		iiqHourlyBeforeInsertHooks = append(iiqHourlyBeforeInsertHooks, iiqHourlyHook)
		iiqHourlyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		iiqHourlyAfterInsertMu.Lock()
		iiqHourlyAfterInsertHooks = append(iiqHourlyAfterInsertHooks, iiqHourlyHook)
		iiqHourlyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		iiqHourlyBeforeUpdateMu.Lock()
		iiqHourlyBeforeUpdateHooks = append(iiqHourlyBeforeUpdateHooks, iiqHourlyHook)
		iiqHourlyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		iiqHourlyAfterUpdateMu.Lock()
		iiqHourlyAfterUpdateHooks = append(iiqHourlyAfterUpdateHooks, iiqHourlyHook)
		iiqHourlyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		iiqHourlyBeforeDeleteMu.Lock()
		iiqHourlyBeforeDeleteHooks = append(iiqHourlyBeforeDeleteHooks, iiqHourlyHook)
		iiqHourlyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		iiqHourlyAfterDeleteMu.Lock()
		iiqHourlyAfterDeleteHooks = append(iiqHourlyAfterDeleteHooks, iiqHourlyHook)
		iiqHourlyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		iiqHourlyBeforeUpsertMu.Lock()
		iiqHourlyBeforeUpsertHooks = append(iiqHourlyBeforeUpsertHooks, iiqHourlyHook)
		iiqHourlyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		iiqHourlyAfterUpsertMu.Lock()
		iiqHourlyAfterUpsertHooks = append(iiqHourlyAfterUpsertHooks, iiqHourlyHook)
		iiqHourlyAfterUpsertMu.Unlock()
	}
}

// One returns a single iiqHourly record from the query.
func (q iiqHourlyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IiqHourly, error) {
	o := &IiqHourly{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for iiq_hourly")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IiqHourly records from the query.
func (q iiqHourlyQuery) All(ctx context.Context, exec boil.ContextExecutor) (IiqHourlySlice, error) {
	var o []*IiqHourly

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IiqHourly slice")
	}

	if len(iiqHourlyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IiqHourly records in the query.
func (q iiqHourlyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count iiq_hourly rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q iiqHourlyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if iiq_hourly exists")
	}

	return count > 0, nil
}

// IiqHourlies retrieves all the records using an executor.
func IiqHourlies(mods ...qm.QueryMod) iiqHourlyQuery {
	mods = append(mods, qm.From("\"iiq_hourly\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"iiq_hourly\".*"})
	}

	return iiqHourlyQuery{q}
}

// FindIiqHourly retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIiqHourly(ctx context.Context, exec boil.ContextExecutor, time time.Time, dpid string, datacenter string, selectCols ...string) (*IiqHourly, error) {
	iiqHourlyObj := &IiqHourly{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"iiq_hourly\" where \"time\"=$1 AND \"dpid\"=$2 AND \"datacenter\"=$3", sel,
	)

	q := queries.Raw(query, time, dpid, datacenter)

	err := q.Bind(ctx, exec, iiqHourlyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from iiq_hourly")
	}

	if err = iiqHourlyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return iiqHourlyObj, err
	}

	return iiqHourlyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IiqHourly) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no iiq_hourly provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(iiqHourlyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	iiqHourlyInsertCacheMut.RLock()
	cache, cached := iiqHourlyInsertCache[key]
	iiqHourlyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			iiqHourlyAllColumns,
			iiqHourlyColumnsWithDefault,
			iiqHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(iiqHourlyType, iiqHourlyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(iiqHourlyType, iiqHourlyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"iiq_hourly\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"iiq_hourly\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into iiq_hourly")
	}

	if !cached {
		iiqHourlyInsertCacheMut.Lock()
		iiqHourlyInsertCache[key] = cache
		iiqHourlyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IiqHourly.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IiqHourly) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	iiqHourlyUpdateCacheMut.RLock()
	cache, cached := iiqHourlyUpdateCache[key]
	iiqHourlyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			iiqHourlyAllColumns,
			iiqHourlyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update iiq_hourly, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"iiq_hourly\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, iiqHourlyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(iiqHourlyType, iiqHourlyMapping, append(wl, iiqHourlyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update iiq_hourly row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for iiq_hourly")
	}

	if !cached {
		iiqHourlyUpdateCacheMut.Lock()
		iiqHourlyUpdateCache[key] = cache
		iiqHourlyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q iiqHourlyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for iiq_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for iiq_hourly")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IiqHourlySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), iiqHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"iiq_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, iiqHourlyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in iiqHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all iiqHourly")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IiqHourly) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no iiq_hourly provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(iiqHourlyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	iiqHourlyUpsertCacheMut.RLock()
	cache, cached := iiqHourlyUpsertCache[key]
	iiqHourlyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			iiqHourlyAllColumns,
			iiqHourlyColumnsWithDefault,
			iiqHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			iiqHourlyAllColumns,
			iiqHourlyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert iiq_hourly, could not build update column list")
		}

		ret := strmangle.SetComplement(iiqHourlyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(iiqHourlyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert iiq_hourly, could not build conflict column list")
			}

			conflict = make([]string, len(iiqHourlyPrimaryKeyColumns))
			copy(conflict, iiqHourlyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"iiq_hourly\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(iiqHourlyType, iiqHourlyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(iiqHourlyType, iiqHourlyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert iiq_hourly")
	}

	if !cached {
		iiqHourlyUpsertCacheMut.Lock()
		iiqHourlyUpsertCache[key] = cache
		iiqHourlyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IiqHourly record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IiqHourly) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IiqHourly provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), iiqHourlyPrimaryKeyMapping)
	sql := "DELETE FROM \"iiq_hourly\" WHERE \"time\"=$1 AND \"dpid\"=$2 AND \"datacenter\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from iiq_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for iiq_hourly")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q iiqHourlyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no iiqHourlyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from iiq_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for iiq_hourly")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IiqHourlySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(iiqHourlyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), iiqHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"iiq_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, iiqHourlyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from iiqHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for iiq_hourly")
	}

	if len(iiqHourlyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IiqHourly) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIiqHourly(ctx, exec, o.Time, o.Dpid, o.Datacenter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IiqHourlySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IiqHourlySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), iiqHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"iiq_hourly\".* FROM \"iiq_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, iiqHourlyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IiqHourlySlice")
	}

	*o = slice

	return nil
}

// IiqHourlyExists checks if the IiqHourly row exists.
func IiqHourlyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, dpid string, datacenter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"iiq_hourly\" where \"time\"=$1 AND \"dpid\"=$2 AND \"datacenter\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, dpid, datacenter)
	}
	row := exec.QueryRowContext(ctx, sql, time, dpid, datacenter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if iiq_hourly exists")
	}

	return exists, nil
}

// Exists checks if the IiqHourly row exists.
func (o *IiqHourly) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IiqHourlyExists(ctx, exec, o.Time, o.Dpid, o.Datacenter)
}
