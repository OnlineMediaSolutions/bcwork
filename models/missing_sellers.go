// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MissingSeller is an object representing the database table.
type MissingSeller struct {
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	URL             string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	Sellers         null.String `boil:"sellers" json:"sellers,omitempty" toml:"sellers" yaml:"sellers,omitempty"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Yesterdaybackup string      `boil:"yesterdaybackup" json:"yesterdaybackup" toml:"yesterdaybackup" yaml:"yesterdaybackup"`

	R *missingSellerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L missingSellerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MissingSellerColumns = struct {
	Name            string
	URL             string
	Sellers         string
	CreatedAt       string
	UpdatedAt       string
	Yesterdaybackup string
}{
	Name:            "name",
	URL:             "url",
	Sellers:         "sellers",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	Yesterdaybackup: "yesterdaybackup",
}

var MissingSellerTableColumns = struct {
	Name            string
	URL             string
	Sellers         string
	CreatedAt       string
	UpdatedAt       string
	Yesterdaybackup string
}{
	Name:            "missing_sellers.name",
	URL:             "missing_sellers.url",
	Sellers:         "missing_sellers.sellers",
	CreatedAt:       "missing_sellers.created_at",
	UpdatedAt:       "missing_sellers.updated_at",
	Yesterdaybackup: "missing_sellers.yesterdaybackup",
}

// Generated where

var MissingSellerWhere = struct {
	Name            whereHelperstring
	URL             whereHelperstring
	Sellers         whereHelpernull_String
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
	Yesterdaybackup whereHelperstring
}{
	Name:            whereHelperstring{field: "\"missing_sellers\".\"name\""},
	URL:             whereHelperstring{field: "\"missing_sellers\".\"url\""},
	Sellers:         whereHelpernull_String{field: "\"missing_sellers\".\"sellers\""},
	CreatedAt:       whereHelpernull_Time{field: "\"missing_sellers\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"missing_sellers\".\"updated_at\""},
	Yesterdaybackup: whereHelperstring{field: "\"missing_sellers\".\"yesterdaybackup\""},
}

// MissingSellerRels is where relationship names are stored.
var MissingSellerRels = struct {
}{}

// missingSellerR is where relationships are stored.
type missingSellerR struct {
}

// NewStruct creates a new relationship struct
func (*missingSellerR) NewStruct() *missingSellerR {
	return &missingSellerR{}
}

// missingSellerL is where Load methods for each relationship are stored.
type missingSellerL struct{}

var (
	missingSellerAllColumns            = []string{"name", "url", "sellers", "created_at", "updated_at", "yesterdaybackup"}
	missingSellerColumnsWithoutDefault = []string{"name", "url", "yesterdaybackup"}
	missingSellerColumnsWithDefault    = []string{"sellers", "created_at", "updated_at"}
	missingSellerPrimaryKeyColumns     = []string{"name"}
	missingSellerGeneratedColumns      = []string{}
)

type (
	// MissingSellerSlice is an alias for a slice of pointers to MissingSeller.
	// This should almost always be used instead of []MissingSeller.
	MissingSellerSlice []*MissingSeller
	// MissingSellerHook is the signature for custom MissingSeller hook methods
	MissingSellerHook func(context.Context, boil.ContextExecutor, *MissingSeller) error

	missingSellerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	missingSellerType                 = reflect.TypeOf(&MissingSeller{})
	missingSellerMapping              = queries.MakeStructMapping(missingSellerType)
	missingSellerPrimaryKeyMapping, _ = queries.BindMapping(missingSellerType, missingSellerMapping, missingSellerPrimaryKeyColumns)
	missingSellerInsertCacheMut       sync.RWMutex
	missingSellerInsertCache          = make(map[string]insertCache)
	missingSellerUpdateCacheMut       sync.RWMutex
	missingSellerUpdateCache          = make(map[string]updateCache)
	missingSellerUpsertCacheMut       sync.RWMutex
	missingSellerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var missingSellerAfterSelectMu sync.Mutex
var missingSellerAfterSelectHooks []MissingSellerHook

var missingSellerBeforeInsertMu sync.Mutex
var missingSellerBeforeInsertHooks []MissingSellerHook
var missingSellerAfterInsertMu sync.Mutex
var missingSellerAfterInsertHooks []MissingSellerHook

var missingSellerBeforeUpdateMu sync.Mutex
var missingSellerBeforeUpdateHooks []MissingSellerHook
var missingSellerAfterUpdateMu sync.Mutex
var missingSellerAfterUpdateHooks []MissingSellerHook

var missingSellerBeforeDeleteMu sync.Mutex
var missingSellerBeforeDeleteHooks []MissingSellerHook
var missingSellerAfterDeleteMu sync.Mutex
var missingSellerAfterDeleteHooks []MissingSellerHook

var missingSellerBeforeUpsertMu sync.Mutex
var missingSellerBeforeUpsertHooks []MissingSellerHook
var missingSellerAfterUpsertMu sync.Mutex
var missingSellerAfterUpsertHooks []MissingSellerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MissingSeller) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MissingSeller) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MissingSeller) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MissingSeller) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MissingSeller) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MissingSeller) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MissingSeller) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MissingSeller) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MissingSeller) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingSellerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMissingSellerHook registers your hook function for all future operations.
func AddMissingSellerHook(hookPoint boil.HookPoint, missingSellerHook MissingSellerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		missingSellerAfterSelectMu.Lock()
		missingSellerAfterSelectHooks = append(missingSellerAfterSelectHooks, missingSellerHook)
		missingSellerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		missingSellerBeforeInsertMu.Lock()
		missingSellerBeforeInsertHooks = append(missingSellerBeforeInsertHooks, missingSellerHook)
		missingSellerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		missingSellerAfterInsertMu.Lock()
		missingSellerAfterInsertHooks = append(missingSellerAfterInsertHooks, missingSellerHook)
		missingSellerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		missingSellerBeforeUpdateMu.Lock()
		missingSellerBeforeUpdateHooks = append(missingSellerBeforeUpdateHooks, missingSellerHook)
		missingSellerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		missingSellerAfterUpdateMu.Lock()
		missingSellerAfterUpdateHooks = append(missingSellerAfterUpdateHooks, missingSellerHook)
		missingSellerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		missingSellerBeforeDeleteMu.Lock()
		missingSellerBeforeDeleteHooks = append(missingSellerBeforeDeleteHooks, missingSellerHook)
		missingSellerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		missingSellerAfterDeleteMu.Lock()
		missingSellerAfterDeleteHooks = append(missingSellerAfterDeleteHooks, missingSellerHook)
		missingSellerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		missingSellerBeforeUpsertMu.Lock()
		missingSellerBeforeUpsertHooks = append(missingSellerBeforeUpsertHooks, missingSellerHook)
		missingSellerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		missingSellerAfterUpsertMu.Lock()
		missingSellerAfterUpsertHooks = append(missingSellerAfterUpsertHooks, missingSellerHook)
		missingSellerAfterUpsertMu.Unlock()
	}
}

// One returns a single missingSeller record from the query.
func (q missingSellerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MissingSeller, error) {
	o := &MissingSeller{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for missing_sellers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MissingSeller records from the query.
func (q missingSellerQuery) All(ctx context.Context, exec boil.ContextExecutor) (MissingSellerSlice, error) {
	var o []*MissingSeller

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MissingSeller slice")
	}

	if len(missingSellerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MissingSeller records in the query.
func (q missingSellerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count missing_sellers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q missingSellerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if missing_sellers exists")
	}

	return count > 0, nil
}

// MissingSellers retrieves all the records using an executor.
func MissingSellers(mods ...qm.QueryMod) missingSellerQuery {
	mods = append(mods, qm.From("\"missing_sellers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"missing_sellers\".*"})
	}

	return missingSellerQuery{q}
}

// FindMissingSeller retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMissingSeller(ctx context.Context, exec boil.ContextExecutor, name string, selectCols ...string) (*MissingSeller, error) {
	missingSellerObj := &MissingSeller{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"missing_sellers\" where \"name\"=$1", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(ctx, exec, missingSellerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from missing_sellers")
	}

	if err = missingSellerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return missingSellerObj, err
	}

	return missingSellerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MissingSeller) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no missing_sellers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(missingSellerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	missingSellerInsertCacheMut.RLock()
	cache, cached := missingSellerInsertCache[key]
	missingSellerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			missingSellerAllColumns,
			missingSellerColumnsWithDefault,
			missingSellerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(missingSellerType, missingSellerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(missingSellerType, missingSellerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"missing_sellers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"missing_sellers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into missing_sellers")
	}

	if !cached {
		missingSellerInsertCacheMut.Lock()
		missingSellerInsertCache[key] = cache
		missingSellerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MissingSeller.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MissingSeller) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	missingSellerUpdateCacheMut.RLock()
	cache, cached := missingSellerUpdateCache[key]
	missingSellerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			missingSellerAllColumns,
			missingSellerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update missing_sellers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"missing_sellers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, missingSellerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(missingSellerType, missingSellerMapping, append(wl, missingSellerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update missing_sellers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for missing_sellers")
	}

	if !cached {
		missingSellerUpdateCacheMut.Lock()
		missingSellerUpdateCache[key] = cache
		missingSellerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q missingSellerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for missing_sellers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for missing_sellers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MissingSellerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missingSellerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"missing_sellers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, missingSellerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in missingSeller slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all missingSeller")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MissingSeller) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no missing_sellers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(missingSellerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	missingSellerUpsertCacheMut.RLock()
	cache, cached := missingSellerUpsertCache[key]
	missingSellerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			missingSellerAllColumns,
			missingSellerColumnsWithDefault,
			missingSellerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			missingSellerAllColumns,
			missingSellerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert missing_sellers, could not build update column list")
		}

		ret := strmangle.SetComplement(missingSellerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(missingSellerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert missing_sellers, could not build conflict column list")
			}

			conflict = make([]string, len(missingSellerPrimaryKeyColumns))
			copy(conflict, missingSellerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"missing_sellers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(missingSellerType, missingSellerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(missingSellerType, missingSellerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert missing_sellers")
	}

	if !cached {
		missingSellerUpsertCacheMut.Lock()
		missingSellerUpsertCache[key] = cache
		missingSellerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MissingSeller record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MissingSeller) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MissingSeller provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), missingSellerPrimaryKeyMapping)
	sql := "DELETE FROM \"missing_sellers\" WHERE \"name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from missing_sellers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for missing_sellers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q missingSellerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no missingSellerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from missing_sellers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for missing_sellers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MissingSellerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(missingSellerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missingSellerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"missing_sellers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, missingSellerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from missingSeller slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for missing_sellers")
	}

	if len(missingSellerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MissingSeller) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMissingSeller(ctx, exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MissingSellerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MissingSellerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missingSellerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"missing_sellers\".* FROM \"missing_sellers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, missingSellerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MissingSellerSlice")
	}

	*o = slice

	return nil
}

// MissingSellerExists checks if the MissingSeller row exists.
func MissingSellerExists(ctx context.Context, exec boil.ContextExecutor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"missing_sellers\" where \"name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, name)
	}
	row := exec.QueryRowContext(ctx, sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if missing_sellers exists")
	}

	return exists, nil
}

// Exists checks if the MissingSeller row exists.
func (o *MissingSeller) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MissingSellerExists(ctx, exec, o.Name)
}
