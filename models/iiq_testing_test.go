// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIiqTestings(t *testing.T) {
	t.Parallel()

	query := IiqTestings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIiqTestingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIiqTestingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IiqTestings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIiqTestingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IiqTestingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIiqTestingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IiqTestingExists(ctx, tx, o.Time, o.DemandPartnerID)
	if err != nil {
		t.Errorf("Unable to check if IiqTesting exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IiqTestingExists to return true, but got false.")
	}
}

func testIiqTestingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	iiqTestingFound, err := FindIiqTesting(ctx, tx, o.Time, o.DemandPartnerID)
	if err != nil {
		t.Error(err)
	}

	if iiqTestingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIiqTestingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IiqTestings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIiqTestingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IiqTestings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIiqTestingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	iiqTestingOne := &IiqTesting{}
	iiqTestingTwo := &IiqTesting{}
	if err = randomize.Struct(seed, iiqTestingOne, iiqTestingDBTypes, false, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}
	if err = randomize.Struct(seed, iiqTestingTwo, iiqTestingDBTypes, false, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = iiqTestingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = iiqTestingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IiqTestings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIiqTestingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	iiqTestingOne := &IiqTesting{}
	iiqTestingTwo := &IiqTesting{}
	if err = randomize.Struct(seed, iiqTestingOne, iiqTestingDBTypes, false, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}
	if err = randomize.Struct(seed, iiqTestingTwo, iiqTestingDBTypes, false, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = iiqTestingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = iiqTestingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func iiqTestingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func iiqTestingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func iiqTestingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func iiqTestingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func iiqTestingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func iiqTestingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func iiqTestingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func iiqTestingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func iiqTestingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IiqTesting) error {
	*o = IiqTesting{}
	return nil
}

func testIiqTestingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IiqTesting{}
	o := &IiqTesting{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IiqTesting object: %s", err)
	}

	AddIiqTestingHook(boil.BeforeInsertHook, iiqTestingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	iiqTestingBeforeInsertHooks = []IiqTestingHook{}

	AddIiqTestingHook(boil.AfterInsertHook, iiqTestingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	iiqTestingAfterInsertHooks = []IiqTestingHook{}

	AddIiqTestingHook(boil.AfterSelectHook, iiqTestingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	iiqTestingAfterSelectHooks = []IiqTestingHook{}

	AddIiqTestingHook(boil.BeforeUpdateHook, iiqTestingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	iiqTestingBeforeUpdateHooks = []IiqTestingHook{}

	AddIiqTestingHook(boil.AfterUpdateHook, iiqTestingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	iiqTestingAfterUpdateHooks = []IiqTestingHook{}

	AddIiqTestingHook(boil.BeforeDeleteHook, iiqTestingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	iiqTestingBeforeDeleteHooks = []IiqTestingHook{}

	AddIiqTestingHook(boil.AfterDeleteHook, iiqTestingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	iiqTestingAfterDeleteHooks = []IiqTestingHook{}

	AddIiqTestingHook(boil.BeforeUpsertHook, iiqTestingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	iiqTestingBeforeUpsertHooks = []IiqTestingHook{}

	AddIiqTestingHook(boil.AfterUpsertHook, iiqTestingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	iiqTestingAfterUpsertHooks = []IiqTestingHook{}
}

func testIiqTestingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIiqTestingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(iiqTestingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIiqTestingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIiqTestingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IiqTestingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIiqTestingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IiqTestings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	iiqTestingDBTypes = map[string]string{`Time`: `timestamp without time zone`, `DemandPartnerID`: `character varying`, `IiqRequests`: `bigint`, `NonIiqRequests`: `bigint`, `IiqImpressions`: `bigint`, `NonIiqImpressions`: `bigint`}
	_                 = bytes.MinRead
)

func testIiqTestingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(iiqTestingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(iiqTestingAllColumns) == len(iiqTestingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIiqTestingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(iiqTestingAllColumns) == len(iiqTestingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IiqTesting{}
	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, iiqTestingDBTypes, true, iiqTestingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(iiqTestingAllColumns, iiqTestingPrimaryKeyColumns) {
		fields = iiqTestingAllColumns
	} else {
		fields = strmangle.SetComplement(
			iiqTestingAllColumns,
			iiqTestingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IiqTestingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIiqTestingsUpsert(t *testing.T) {
	t.Parallel()

	if len(iiqTestingAllColumns) == len(iiqTestingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IiqTesting{}
	if err = randomize.Struct(seed, &o, iiqTestingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IiqTesting: %s", err)
	}

	count, err := IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, iiqTestingDBTypes, false, iiqTestingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IiqTesting struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IiqTesting: %s", err)
	}

	count, err = IiqTestings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
