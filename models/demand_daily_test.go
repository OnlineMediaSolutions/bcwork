// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDemandDailies(t *testing.T) {
	t.Parallel()

	query := DemandDailies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDemandDailiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandDailiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DemandDailies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandDailiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DemandDailySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandDailiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DemandDailyExists(ctx, tx, o.Time, o.PublisherID, o.DemandPartnerID, o.Domain)
	if err != nil {
		t.Errorf("Unable to check if DemandDaily exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DemandDailyExists to return true, but got false.")
	}
}

func testDemandDailiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	demandDailyFound, err := FindDemandDaily(ctx, tx, o.Time, o.PublisherID, o.DemandPartnerID, o.Domain)
	if err != nil {
		t.Error(err)
	}

	if demandDailyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDemandDailiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DemandDailies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDemandDailiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DemandDailies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDemandDailiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	demandDailyOne := &DemandDaily{}
	demandDailyTwo := &DemandDaily{}
	if err = randomize.Struct(seed, demandDailyOne, demandDailyDBTypes, false, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}
	if err = randomize.Struct(seed, demandDailyTwo, demandDailyDBTypes, false, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = demandDailyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = demandDailyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DemandDailies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDemandDailiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	demandDailyOne := &DemandDaily{}
	demandDailyTwo := &DemandDaily{}
	if err = randomize.Struct(seed, demandDailyOne, demandDailyDBTypes, false, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}
	if err = randomize.Struct(seed, demandDailyTwo, demandDailyDBTypes, false, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = demandDailyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = demandDailyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func demandDailyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func demandDailyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func demandDailyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func demandDailyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func demandDailyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func demandDailyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func demandDailyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func demandDailyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func demandDailyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandDaily) error {
	*o = DemandDaily{}
	return nil
}

func testDemandDailiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DemandDaily{}
	o := &DemandDaily{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, demandDailyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DemandDaily object: %s", err)
	}

	AddDemandDailyHook(boil.BeforeInsertHook, demandDailyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	demandDailyBeforeInsertHooks = []DemandDailyHook{}

	AddDemandDailyHook(boil.AfterInsertHook, demandDailyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	demandDailyAfterInsertHooks = []DemandDailyHook{}

	AddDemandDailyHook(boil.AfterSelectHook, demandDailyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	demandDailyAfterSelectHooks = []DemandDailyHook{}

	AddDemandDailyHook(boil.BeforeUpdateHook, demandDailyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	demandDailyBeforeUpdateHooks = []DemandDailyHook{}

	AddDemandDailyHook(boil.AfterUpdateHook, demandDailyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	demandDailyAfterUpdateHooks = []DemandDailyHook{}

	AddDemandDailyHook(boil.BeforeDeleteHook, demandDailyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	demandDailyBeforeDeleteHooks = []DemandDailyHook{}

	AddDemandDailyHook(boil.AfterDeleteHook, demandDailyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	demandDailyAfterDeleteHooks = []DemandDailyHook{}

	AddDemandDailyHook(boil.BeforeUpsertHook, demandDailyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	demandDailyBeforeUpsertHooks = []DemandDailyHook{}

	AddDemandDailyHook(boil.AfterUpsertHook, demandDailyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	demandDailyAfterUpsertHooks = []DemandDailyHook{}
}

func testDemandDailiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDemandDailiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(demandDailyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDemandDailiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDemandDailiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DemandDailySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDemandDailiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DemandDailies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	demandDailyDBTypes = map[string]string{`Time`: `timestamp without time zone`, `DemandPartnerID`: `character varying`, `PublisherID`: `character varying`, `Domain`: `character varying`, `BidRequest`: `bigint`, `BidResponse`: `bigint`, `BidPrice`: `double precision`, `Impression`: `bigint`, `Revenue`: `double precision`, `DemandPartnerFee`: `double precision`, `DataFee`: `double precision`}
	_                  = bytes.MinRead
)

func testDemandDailiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(demandDailyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(demandDailyAllColumns) == len(demandDailyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDemandDailiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(demandDailyAllColumns) == len(demandDailyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DemandDaily{}
	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, demandDailyDBTypes, true, demandDailyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(demandDailyAllColumns, demandDailyPrimaryKeyColumns) {
		fields = demandDailyAllColumns
	} else {
		fields = strmangle.SetComplement(
			demandDailyAllColumns,
			demandDailyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DemandDailySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDemandDailiesUpsert(t *testing.T) {
	t.Parallel()

	if len(demandDailyAllColumns) == len(demandDailyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DemandDaily{}
	if err = randomize.Struct(seed, &o, demandDailyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DemandDaily: %s", err)
	}

	count, err := DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, demandDailyDBTypes, false, demandDailyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandDaily struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DemandDaily: %s", err)
	}

	count, err = DemandDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
