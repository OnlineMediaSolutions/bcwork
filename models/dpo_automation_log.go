// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DpoAutomationLog is an object representing the database table.
type DpoAutomationLog struct {
	Time       time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	EvalTime   time.Time `boil:"eval_time" json:"eval_time" toml:"eval_time" yaml:"eval_time"`
	Domain     string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Publisher  string    `boil:"publisher" json:"publisher" toml:"publisher" yaml:"publisher"`
	Os         string    `boil:"os" json:"os" toml:"os" yaml:"os"`
	Country    string    `boil:"country" json:"country" toml:"country" yaml:"country"`
	DP         string    `boil:"dp" json:"dp" toml:"dp" yaml:"dp"`
	BidRequest int       `boil:"bid_request" json:"bid_request" toml:"bid_request" yaml:"bid_request"`
	Revenue    float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	Erpm       float64   `boil:"erpm" json:"erpm" toml:"erpm" yaml:"erpm"`
	OldFactor  float64   `boil:"old_factor" json:"old_factor" toml:"old_factor" yaml:"old_factor"`
	NewFactor  float64   `boil:"new_factor" json:"new_factor" toml:"new_factor" yaml:"new_factor"`
	RespStatus int       `boil:"resp_status" json:"resp_status" toml:"resp_status" yaml:"resp_status"`

	R *dpoAutomationLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dpoAutomationLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DpoAutomationLogColumns = struct {
	Time       string
	EvalTime   string
	Domain     string
	Publisher  string
	Os         string
	Country    string
	DP         string
	BidRequest string
	Revenue    string
	Erpm       string
	OldFactor  string
	NewFactor  string
	RespStatus string
}{
	Time:       "time",
	EvalTime:   "eval_time",
	Domain:     "domain",
	Publisher:  "publisher",
	Os:         "os",
	Country:    "country",
	DP:         "dp",
	BidRequest: "bid_request",
	Revenue:    "revenue",
	Erpm:       "erpm",
	OldFactor:  "old_factor",
	NewFactor:  "new_factor",
	RespStatus: "resp_status",
}

var DpoAutomationLogTableColumns = struct {
	Time       string
	EvalTime   string
	Domain     string
	Publisher  string
	Os         string
	Country    string
	DP         string
	BidRequest string
	Revenue    string
	Erpm       string
	OldFactor  string
	NewFactor  string
	RespStatus string
}{
	Time:       "dpo_automation_log.time",
	EvalTime:   "dpo_automation_log.eval_time",
	Domain:     "dpo_automation_log.domain",
	Publisher:  "dpo_automation_log.publisher",
	Os:         "dpo_automation_log.os",
	Country:    "dpo_automation_log.country",
	DP:         "dpo_automation_log.dp",
	BidRequest: "dpo_automation_log.bid_request",
	Revenue:    "dpo_automation_log.revenue",
	Erpm:       "dpo_automation_log.erpm",
	OldFactor:  "dpo_automation_log.old_factor",
	NewFactor:  "dpo_automation_log.new_factor",
	RespStatus: "dpo_automation_log.resp_status",
}

// Generated where

var DpoAutomationLogWhere = struct {
	Time       whereHelpertime_Time
	EvalTime   whereHelpertime_Time
	Domain     whereHelperstring
	Publisher  whereHelperstring
	Os         whereHelperstring
	Country    whereHelperstring
	DP         whereHelperstring
	BidRequest whereHelperint
	Revenue    whereHelperfloat64
	Erpm       whereHelperfloat64
	OldFactor  whereHelperfloat64
	NewFactor  whereHelperfloat64
	RespStatus whereHelperint
}{
	Time:       whereHelpertime_Time{field: "\"dpo_automation_log\".\"time\""},
	EvalTime:   whereHelpertime_Time{field: "\"dpo_automation_log\".\"eval_time\""},
	Domain:     whereHelperstring{field: "\"dpo_automation_log\".\"domain\""},
	Publisher:  whereHelperstring{field: "\"dpo_automation_log\".\"publisher\""},
	Os:         whereHelperstring{field: "\"dpo_automation_log\".\"os\""},
	Country:    whereHelperstring{field: "\"dpo_automation_log\".\"country\""},
	DP:         whereHelperstring{field: "\"dpo_automation_log\".\"dp\""},
	BidRequest: whereHelperint{field: "\"dpo_automation_log\".\"bid_request\""},
	Revenue:    whereHelperfloat64{field: "\"dpo_automation_log\".\"revenue\""},
	Erpm:       whereHelperfloat64{field: "\"dpo_automation_log\".\"erpm\""},
	OldFactor:  whereHelperfloat64{field: "\"dpo_automation_log\".\"old_factor\""},
	NewFactor:  whereHelperfloat64{field: "\"dpo_automation_log\".\"new_factor\""},
	RespStatus: whereHelperint{field: "\"dpo_automation_log\".\"resp_status\""},
}

// DpoAutomationLogRels is where relationship names are stored.
var DpoAutomationLogRels = struct {
}{}

// dpoAutomationLogR is where relationships are stored.
type dpoAutomationLogR struct {
}

// NewStruct creates a new relationship struct
func (*dpoAutomationLogR) NewStruct() *dpoAutomationLogR {
	return &dpoAutomationLogR{}
}

// dpoAutomationLogL is where Load methods for each relationship are stored.
type dpoAutomationLogL struct{}

var (
	dpoAutomationLogAllColumns            = []string{"time", "eval_time", "domain", "publisher", "os", "country", "dp", "bid_request", "revenue", "erpm", "old_factor", "new_factor", "resp_status"}
	dpoAutomationLogColumnsWithoutDefault = []string{"time", "eval_time", "domain", "publisher", "os", "country", "dp", "bid_request", "revenue", "erpm", "old_factor", "new_factor", "resp_status"}
	dpoAutomationLogColumnsWithDefault    = []string{}
	dpoAutomationLogPrimaryKeyColumns     = []string{"time", "dp", "country", "publisher", "domain", "os"}
	dpoAutomationLogGeneratedColumns      = []string{}
)

type (
	// DpoAutomationLogSlice is an alias for a slice of pointers to DpoAutomationLog.
	// This should almost always be used instead of []DpoAutomationLog.
	DpoAutomationLogSlice []*DpoAutomationLog
	// DpoAutomationLogHook is the signature for custom DpoAutomationLog hook methods
	DpoAutomationLogHook func(context.Context, boil.ContextExecutor, *DpoAutomationLog) error

	dpoAutomationLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dpoAutomationLogType                 = reflect.TypeOf(&DpoAutomationLog{})
	dpoAutomationLogMapping              = queries.MakeStructMapping(dpoAutomationLogType)
	dpoAutomationLogPrimaryKeyMapping, _ = queries.BindMapping(dpoAutomationLogType, dpoAutomationLogMapping, dpoAutomationLogPrimaryKeyColumns)
	dpoAutomationLogInsertCacheMut       sync.RWMutex
	dpoAutomationLogInsertCache          = make(map[string]insertCache)
	dpoAutomationLogUpdateCacheMut       sync.RWMutex
	dpoAutomationLogUpdateCache          = make(map[string]updateCache)
	dpoAutomationLogUpsertCacheMut       sync.RWMutex
	dpoAutomationLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dpoAutomationLogAfterSelectMu sync.Mutex
var dpoAutomationLogAfterSelectHooks []DpoAutomationLogHook

var dpoAutomationLogBeforeInsertMu sync.Mutex
var dpoAutomationLogBeforeInsertHooks []DpoAutomationLogHook
var dpoAutomationLogAfterInsertMu sync.Mutex
var dpoAutomationLogAfterInsertHooks []DpoAutomationLogHook

var dpoAutomationLogBeforeUpdateMu sync.Mutex
var dpoAutomationLogBeforeUpdateHooks []DpoAutomationLogHook
var dpoAutomationLogAfterUpdateMu sync.Mutex
var dpoAutomationLogAfterUpdateHooks []DpoAutomationLogHook

var dpoAutomationLogBeforeDeleteMu sync.Mutex
var dpoAutomationLogBeforeDeleteHooks []DpoAutomationLogHook
var dpoAutomationLogAfterDeleteMu sync.Mutex
var dpoAutomationLogAfterDeleteHooks []DpoAutomationLogHook

var dpoAutomationLogBeforeUpsertMu sync.Mutex
var dpoAutomationLogBeforeUpsertHooks []DpoAutomationLogHook
var dpoAutomationLogAfterUpsertMu sync.Mutex
var dpoAutomationLogAfterUpsertHooks []DpoAutomationLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DpoAutomationLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DpoAutomationLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DpoAutomationLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DpoAutomationLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DpoAutomationLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DpoAutomationLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DpoAutomationLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DpoAutomationLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DpoAutomationLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dpoAutomationLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDpoAutomationLogHook registers your hook function for all future operations.
func AddDpoAutomationLogHook(hookPoint boil.HookPoint, dpoAutomationLogHook DpoAutomationLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dpoAutomationLogAfterSelectMu.Lock()
		dpoAutomationLogAfterSelectHooks = append(dpoAutomationLogAfterSelectHooks, dpoAutomationLogHook)
		dpoAutomationLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		dpoAutomationLogBeforeInsertMu.Lock()
		dpoAutomationLogBeforeInsertHooks = append(dpoAutomationLogBeforeInsertHooks, dpoAutomationLogHook)
		dpoAutomationLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		dpoAutomationLogAfterInsertMu.Lock()
		dpoAutomationLogAfterInsertHooks = append(dpoAutomationLogAfterInsertHooks, dpoAutomationLogHook)
		dpoAutomationLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		dpoAutomationLogBeforeUpdateMu.Lock()
		dpoAutomationLogBeforeUpdateHooks = append(dpoAutomationLogBeforeUpdateHooks, dpoAutomationLogHook)
		dpoAutomationLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		dpoAutomationLogAfterUpdateMu.Lock()
		dpoAutomationLogAfterUpdateHooks = append(dpoAutomationLogAfterUpdateHooks, dpoAutomationLogHook)
		dpoAutomationLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		dpoAutomationLogBeforeDeleteMu.Lock()
		dpoAutomationLogBeforeDeleteHooks = append(dpoAutomationLogBeforeDeleteHooks, dpoAutomationLogHook)
		dpoAutomationLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		dpoAutomationLogAfterDeleteMu.Lock()
		dpoAutomationLogAfterDeleteHooks = append(dpoAutomationLogAfterDeleteHooks, dpoAutomationLogHook)
		dpoAutomationLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		dpoAutomationLogBeforeUpsertMu.Lock()
		dpoAutomationLogBeforeUpsertHooks = append(dpoAutomationLogBeforeUpsertHooks, dpoAutomationLogHook)
		dpoAutomationLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		dpoAutomationLogAfterUpsertMu.Lock()
		dpoAutomationLogAfterUpsertHooks = append(dpoAutomationLogAfterUpsertHooks, dpoAutomationLogHook)
		dpoAutomationLogAfterUpsertMu.Unlock()
	}
}

// One returns a single dpoAutomationLog record from the query.
func (q dpoAutomationLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DpoAutomationLog, error) {
	o := &DpoAutomationLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dpo_automation_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DpoAutomationLog records from the query.
func (q dpoAutomationLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (DpoAutomationLogSlice, error) {
	var o []*DpoAutomationLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DpoAutomationLog slice")
	}

	if len(dpoAutomationLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DpoAutomationLog records in the query.
func (q dpoAutomationLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dpo_automation_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dpoAutomationLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dpo_automation_log exists")
	}

	return count > 0, nil
}

// DpoAutomationLogs retrieves all the records using an executor.
func DpoAutomationLogs(mods ...qm.QueryMod) dpoAutomationLogQuery {
	mods = append(mods, qm.From("\"dpo_automation_log\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dpo_automation_log\".*"})
	}

	return dpoAutomationLogQuery{q}
}

// FindDpoAutomationLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDpoAutomationLog(ctx context.Context, exec boil.ContextExecutor, time time.Time, dP string, country string, publisher string, domain string, os string, selectCols ...string) (*DpoAutomationLog, error) {
	dpoAutomationLogObj := &DpoAutomationLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dpo_automation_log\" where \"time\"=$1 AND \"dp\"=$2 AND \"country\"=$3 AND \"publisher\"=$4 AND \"domain\"=$5 AND \"os\"=$6", sel,
	)

	q := queries.Raw(query, time, dP, country, publisher, domain, os)

	err := q.Bind(ctx, exec, dpoAutomationLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dpo_automation_log")
	}

	if err = dpoAutomationLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dpoAutomationLogObj, err
	}

	return dpoAutomationLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DpoAutomationLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dpo_automation_log provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dpoAutomationLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dpoAutomationLogInsertCacheMut.RLock()
	cache, cached := dpoAutomationLogInsertCache[key]
	dpoAutomationLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dpoAutomationLogAllColumns,
			dpoAutomationLogColumnsWithDefault,
			dpoAutomationLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dpoAutomationLogType, dpoAutomationLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dpoAutomationLogType, dpoAutomationLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dpo_automation_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dpo_automation_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dpo_automation_log")
	}

	if !cached {
		dpoAutomationLogInsertCacheMut.Lock()
		dpoAutomationLogInsertCache[key] = cache
		dpoAutomationLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DpoAutomationLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DpoAutomationLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dpoAutomationLogUpdateCacheMut.RLock()
	cache, cached := dpoAutomationLogUpdateCache[key]
	dpoAutomationLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dpoAutomationLogAllColumns,
			dpoAutomationLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dpo_automation_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dpo_automation_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dpoAutomationLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dpoAutomationLogType, dpoAutomationLogMapping, append(wl, dpoAutomationLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dpo_automation_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dpo_automation_log")
	}

	if !cached {
		dpoAutomationLogUpdateCacheMut.Lock()
		dpoAutomationLogUpdateCache[key] = cache
		dpoAutomationLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dpoAutomationLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dpo_automation_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dpo_automation_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DpoAutomationLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpoAutomationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dpo_automation_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dpoAutomationLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dpoAutomationLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dpoAutomationLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DpoAutomationLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no dpo_automation_log provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dpoAutomationLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dpoAutomationLogUpsertCacheMut.RLock()
	cache, cached := dpoAutomationLogUpsertCache[key]
	dpoAutomationLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			dpoAutomationLogAllColumns,
			dpoAutomationLogColumnsWithDefault,
			dpoAutomationLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dpoAutomationLogAllColumns,
			dpoAutomationLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dpo_automation_log, could not build update column list")
		}

		ret := strmangle.SetComplement(dpoAutomationLogAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(dpoAutomationLogPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert dpo_automation_log, could not build conflict column list")
			}

			conflict = make([]string, len(dpoAutomationLogPrimaryKeyColumns))
			copy(conflict, dpoAutomationLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dpo_automation_log\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(dpoAutomationLogType, dpoAutomationLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dpoAutomationLogType, dpoAutomationLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dpo_automation_log")
	}

	if !cached {
		dpoAutomationLogUpsertCacheMut.Lock()
		dpoAutomationLogUpsertCache[key] = cache
		dpoAutomationLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DpoAutomationLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DpoAutomationLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DpoAutomationLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dpoAutomationLogPrimaryKeyMapping)
	sql := "DELETE FROM \"dpo_automation_log\" WHERE \"time\"=$1 AND \"dp\"=$2 AND \"country\"=$3 AND \"publisher\"=$4 AND \"domain\"=$5 AND \"os\"=$6"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dpo_automation_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dpo_automation_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dpoAutomationLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dpoAutomationLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dpo_automation_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dpo_automation_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DpoAutomationLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dpoAutomationLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpoAutomationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dpo_automation_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dpoAutomationLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dpoAutomationLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dpo_automation_log")
	}

	if len(dpoAutomationLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DpoAutomationLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDpoAutomationLog(ctx, exec, o.Time, o.DP, o.Country, o.Publisher, o.Domain, o.Os)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DpoAutomationLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DpoAutomationLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dpoAutomationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dpo_automation_log\".* FROM \"dpo_automation_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dpoAutomationLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DpoAutomationLogSlice")
	}

	*o = slice

	return nil
}

// DpoAutomationLogExists checks if the DpoAutomationLog row exists.
func DpoAutomationLogExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, dP string, country string, publisher string, domain string, os string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dpo_automation_log\" where \"time\"=$1 AND \"dp\"=$2 AND \"country\"=$3 AND \"publisher\"=$4 AND \"domain\"=$5 AND \"os\"=$6 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, dP, country, publisher, domain, os)
	}
	row := exec.QueryRowContext(ctx, sql, time, dP, country, publisher, domain, os)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dpo_automation_log exists")
	}

	return exists, nil
}

// Exists checks if the DpoAutomationLog row exists.
func (o *DpoAutomationLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DpoAutomationLogExists(ctx, exec, o.Time, o.DP, o.Country, o.Publisher, o.Domain, o.Os)
}
