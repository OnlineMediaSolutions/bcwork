// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNoDPResponseReports(t *testing.T) {
	t.Parallel()

	query := NoDPResponseReports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNoDPResponseReportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoDPResponseReportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NoDPResponseReports().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoDPResponseReportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NoDPResponseReportSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoDPResponseReportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NoDPResponseReportExists(ctx, tx, o.Time, o.DemandPartnerID, o.PublisherID, o.Domain)
	if err != nil {
		t.Errorf("Unable to check if NoDPResponseReport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NoDPResponseReportExists to return true, but got false.")
	}
}

func testNoDPResponseReportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	noDPResponseReportFound, err := FindNoDPResponseReport(ctx, tx, o.Time, o.DemandPartnerID, o.PublisherID, o.Domain)
	if err != nil {
		t.Error(err)
	}

	if noDPResponseReportFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNoDPResponseReportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NoDPResponseReports().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNoDPResponseReportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NoDPResponseReports().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNoDPResponseReportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	noDPResponseReportOne := &NoDPResponseReport{}
	noDPResponseReportTwo := &NoDPResponseReport{}
	if err = randomize.Struct(seed, noDPResponseReportOne, noDPResponseReportDBTypes, false, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}
	if err = randomize.Struct(seed, noDPResponseReportTwo, noDPResponseReportDBTypes, false, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = noDPResponseReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = noDPResponseReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NoDPResponseReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNoDPResponseReportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	noDPResponseReportOne := &NoDPResponseReport{}
	noDPResponseReportTwo := &NoDPResponseReport{}
	if err = randomize.Struct(seed, noDPResponseReportOne, noDPResponseReportDBTypes, false, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}
	if err = randomize.Struct(seed, noDPResponseReportTwo, noDPResponseReportDBTypes, false, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = noDPResponseReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = noDPResponseReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func noDPResponseReportBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func noDPResponseReportAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func noDPResponseReportAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func noDPResponseReportBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func noDPResponseReportAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func noDPResponseReportBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func noDPResponseReportAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func noDPResponseReportBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func noDPResponseReportAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NoDPResponseReport) error {
	*o = NoDPResponseReport{}
	return nil
}

func testNoDPResponseReportsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NoDPResponseReport{}
	o := &NoDPResponseReport{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport object: %s", err)
	}

	AddNoDPResponseReportHook(boil.BeforeInsertHook, noDPResponseReportBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportBeforeInsertHooks = []NoDPResponseReportHook{}

	AddNoDPResponseReportHook(boil.AfterInsertHook, noDPResponseReportAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportAfterInsertHooks = []NoDPResponseReportHook{}

	AddNoDPResponseReportHook(boil.AfterSelectHook, noDPResponseReportAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportAfterSelectHooks = []NoDPResponseReportHook{}

	AddNoDPResponseReportHook(boil.BeforeUpdateHook, noDPResponseReportBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportBeforeUpdateHooks = []NoDPResponseReportHook{}

	AddNoDPResponseReportHook(boil.AfterUpdateHook, noDPResponseReportAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportAfterUpdateHooks = []NoDPResponseReportHook{}

	AddNoDPResponseReportHook(boil.BeforeDeleteHook, noDPResponseReportBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportBeforeDeleteHooks = []NoDPResponseReportHook{}

	AddNoDPResponseReportHook(boil.AfterDeleteHook, noDPResponseReportAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportAfterDeleteHooks = []NoDPResponseReportHook{}

	AddNoDPResponseReportHook(boil.BeforeUpsertHook, noDPResponseReportBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportBeforeUpsertHooks = []NoDPResponseReportHook{}

	AddNoDPResponseReportHook(boil.AfterUpsertHook, noDPResponseReportAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	noDPResponseReportAfterUpsertHooks = []NoDPResponseReportHook{}
}

func testNoDPResponseReportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNoDPResponseReportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(noDPResponseReportColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNoDPResponseReportToOnePublisherUsingPublisher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NoDPResponseReport
	var foreign Publisher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, noDPResponseReportDBTypes, false, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PublisherID = foreign.PublisherID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Publisher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PublisherID != foreign.PublisherID {
		t.Errorf("want: %v, got %v", foreign.PublisherID, check.PublisherID)
	}

	ranAfterSelectHook := false
	AddPublisherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Publisher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := NoDPResponseReportSlice{&local}
	if err = local.L.LoadPublisher(ctx, tx, false, (*[]*NoDPResponseReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Publisher = nil
	if err = local.L.LoadPublisher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testNoDPResponseReportToOneSetOpPublisherUsingPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NoDPResponseReport
	var b, c Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, noDPResponseReportDBTypes, false, strmangle.SetComplement(noDPResponseReportPrimaryKeyColumns, noDPResponseReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Publisher{&b, &c} {
		err = a.SetPublisher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Publisher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NoDPResponseReports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PublisherID != x.PublisherID {
			t.Error("foreign key was wrong value", a.PublisherID)
		}

		if exists, err := NoDPResponseReportExists(ctx, tx, a.Time, a.DemandPartnerID, a.PublisherID, a.Domain); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testNoDPResponseReportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNoDPResponseReportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NoDPResponseReportSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNoDPResponseReportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NoDPResponseReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	noDPResponseReportDBTypes = map[string]string{`Time`: `character varying`, `DemandPartnerID`: `character varying`, `PublisherID`: `character varying`, `Domain`: `character varying`, `BidRequests`: `double precision`, `BidResponses`: `double precision`}
	_                         = bytes.MinRead
)

func testNoDPResponseReportsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(noDPResponseReportPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(noDPResponseReportAllColumns) == len(noDPResponseReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNoDPResponseReportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(noDPResponseReportAllColumns) == len(noDPResponseReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NoDPResponseReport{}
	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, noDPResponseReportDBTypes, true, noDPResponseReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(noDPResponseReportAllColumns, noDPResponseReportPrimaryKeyColumns) {
		fields = noDPResponseReportAllColumns
	} else {
		fields = strmangle.SetComplement(
			noDPResponseReportAllColumns,
			noDPResponseReportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NoDPResponseReportSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNoDPResponseReportsUpsert(t *testing.T) {
	t.Parallel()

	if len(noDPResponseReportAllColumns) == len(noDPResponseReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NoDPResponseReport{}
	if err = randomize.Struct(seed, &o, noDPResponseReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NoDPResponseReport: %s", err)
	}

	count, err := NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, noDPResponseReportDBTypes, false, noDPResponseReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NoDPResponseReport struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NoDPResponseReport: %s", err)
	}

	count, err = NoDPResponseReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
