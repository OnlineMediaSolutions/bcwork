// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NoDPResponseReport is an object representing the database table.
type NoDPResponseReport struct {
	Time            string  `boil:"time" json:"time" toml:"time" yaml:"time"`
	DemandPartnerID string  `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	PublisherID     string  `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain          string  `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	BidRequests     float64 `boil:"bid_requests" json:"bid_requests" toml:"bid_requests" yaml:"bid_requests"`

	R *noDPResponseReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L noDPResponseReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NoDPResponseReportColumns = struct {
	Time            string
	DemandPartnerID string
	PublisherID     string
	Domain          string
	BidRequests     string
}{
	Time:            "time",
	DemandPartnerID: "demand_partner_id",
	PublisherID:     "publisher_id",
	Domain:          "domain",
	BidRequests:     "bid_requests",
}

var NoDPResponseReportTableColumns = struct {
	Time            string
	DemandPartnerID string
	PublisherID     string
	Domain          string
	BidRequests     string
}{
	Time:            "no_dp_response_report.time",
	DemandPartnerID: "no_dp_response_report.demand_partner_id",
	PublisherID:     "no_dp_response_report.publisher_id",
	Domain:          "no_dp_response_report.domain",
	BidRequests:     "no_dp_response_report.bid_requests",
}

// Generated where

var NoDPResponseReportWhere = struct {
	Time            whereHelperstring
	DemandPartnerID whereHelperstring
	PublisherID     whereHelperstring
	Domain          whereHelperstring
	BidRequests     whereHelperfloat64
}{
	Time:            whereHelperstring{field: "\"no_dp_response_report\".\"time\""},
	DemandPartnerID: whereHelperstring{field: "\"no_dp_response_report\".\"demand_partner_id\""},
	PublisherID:     whereHelperstring{field: "\"no_dp_response_report\".\"publisher_id\""},
	Domain:          whereHelperstring{field: "\"no_dp_response_report\".\"domain\""},
	BidRequests:     whereHelperfloat64{field: "\"no_dp_response_report\".\"bid_requests\""},
}

// NoDPResponseReportRels is where relationship names are stored.
var NoDPResponseReportRels = struct {
}{}

// noDPResponseReportR is where relationships are stored.
type noDPResponseReportR struct {
}

// NewStruct creates a new relationship struct
func (*noDPResponseReportR) NewStruct() *noDPResponseReportR {
	return &noDPResponseReportR{}
}

// noDPResponseReportL is where Load methods for each relationship are stored.
type noDPResponseReportL struct{}

var (
	noDPResponseReportAllColumns            = []string{"time", "demand_partner_id", "publisher_id", "domain", "bid_requests"}
	noDPResponseReportColumnsWithoutDefault = []string{"time", "demand_partner_id", "publisher_id", "domain", "bid_requests"}
	noDPResponseReportColumnsWithDefault    = []string{}
	noDPResponseReportPrimaryKeyColumns     = []string{"time", "demand_partner_id", "publisher_id", "domain"}
	noDPResponseReportGeneratedColumns      = []string{}
)

type (
	// NoDPResponseReportSlice is an alias for a slice of pointers to NoDPResponseReport.
	// This should almost always be used instead of []NoDPResponseReport.
	NoDPResponseReportSlice []*NoDPResponseReport
	// NoDPResponseReportHook is the signature for custom NoDPResponseReport hook methods
	NoDPResponseReportHook func(context.Context, boil.ContextExecutor, *NoDPResponseReport) error

	noDPResponseReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	noDPResponseReportType                 = reflect.TypeOf(&NoDPResponseReport{})
	noDPResponseReportMapping              = queries.MakeStructMapping(noDPResponseReportType)
	noDPResponseReportPrimaryKeyMapping, _ = queries.BindMapping(noDPResponseReportType, noDPResponseReportMapping, noDPResponseReportPrimaryKeyColumns)
	noDPResponseReportInsertCacheMut       sync.RWMutex
	noDPResponseReportInsertCache          = make(map[string]insertCache)
	noDPResponseReportUpdateCacheMut       sync.RWMutex
	noDPResponseReportUpdateCache          = make(map[string]updateCache)
	noDPResponseReportUpsertCacheMut       sync.RWMutex
	noDPResponseReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var noDPResponseReportAfterSelectMu sync.Mutex
var noDPResponseReportAfterSelectHooks []NoDPResponseReportHook

var noDPResponseReportBeforeInsertMu sync.Mutex
var noDPResponseReportBeforeInsertHooks []NoDPResponseReportHook
var noDPResponseReportAfterInsertMu sync.Mutex
var noDPResponseReportAfterInsertHooks []NoDPResponseReportHook

var noDPResponseReportBeforeUpdateMu sync.Mutex
var noDPResponseReportBeforeUpdateHooks []NoDPResponseReportHook
var noDPResponseReportAfterUpdateMu sync.Mutex
var noDPResponseReportAfterUpdateHooks []NoDPResponseReportHook

var noDPResponseReportBeforeDeleteMu sync.Mutex
var noDPResponseReportBeforeDeleteHooks []NoDPResponseReportHook
var noDPResponseReportAfterDeleteMu sync.Mutex
var noDPResponseReportAfterDeleteHooks []NoDPResponseReportHook

var noDPResponseReportBeforeUpsertMu sync.Mutex
var noDPResponseReportBeforeUpsertHooks []NoDPResponseReportHook
var noDPResponseReportAfterUpsertMu sync.Mutex
var noDPResponseReportAfterUpsertHooks []NoDPResponseReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NoDPResponseReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NoDPResponseReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NoDPResponseReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NoDPResponseReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NoDPResponseReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NoDPResponseReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NoDPResponseReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NoDPResponseReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NoDPResponseReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noDPResponseReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNoDPResponseReportHook registers your hook function for all future operations.
func AddNoDPResponseReportHook(hookPoint boil.HookPoint, noDPResponseReportHook NoDPResponseReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		noDPResponseReportAfterSelectMu.Lock()
		noDPResponseReportAfterSelectHooks = append(noDPResponseReportAfterSelectHooks, noDPResponseReportHook)
		noDPResponseReportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		noDPResponseReportBeforeInsertMu.Lock()
		noDPResponseReportBeforeInsertHooks = append(noDPResponseReportBeforeInsertHooks, noDPResponseReportHook)
		noDPResponseReportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		noDPResponseReportAfterInsertMu.Lock()
		noDPResponseReportAfterInsertHooks = append(noDPResponseReportAfterInsertHooks, noDPResponseReportHook)
		noDPResponseReportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		noDPResponseReportBeforeUpdateMu.Lock()
		noDPResponseReportBeforeUpdateHooks = append(noDPResponseReportBeforeUpdateHooks, noDPResponseReportHook)
		noDPResponseReportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		noDPResponseReportAfterUpdateMu.Lock()
		noDPResponseReportAfterUpdateHooks = append(noDPResponseReportAfterUpdateHooks, noDPResponseReportHook)
		noDPResponseReportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		noDPResponseReportBeforeDeleteMu.Lock()
		noDPResponseReportBeforeDeleteHooks = append(noDPResponseReportBeforeDeleteHooks, noDPResponseReportHook)
		noDPResponseReportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		noDPResponseReportAfterDeleteMu.Lock()
		noDPResponseReportAfterDeleteHooks = append(noDPResponseReportAfterDeleteHooks, noDPResponseReportHook)
		noDPResponseReportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		noDPResponseReportBeforeUpsertMu.Lock()
		noDPResponseReportBeforeUpsertHooks = append(noDPResponseReportBeforeUpsertHooks, noDPResponseReportHook)
		noDPResponseReportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		noDPResponseReportAfterUpsertMu.Lock()
		noDPResponseReportAfterUpsertHooks = append(noDPResponseReportAfterUpsertHooks, noDPResponseReportHook)
		noDPResponseReportAfterUpsertMu.Unlock()
	}
}

// One returns a single noDPResponseReport record from the query.
func (q noDPResponseReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NoDPResponseReport, error) {
	o := &NoDPResponseReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for no_dp_response_report")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NoDPResponseReport records from the query.
func (q noDPResponseReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (NoDPResponseReportSlice, error) {
	var o []*NoDPResponseReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NoDPResponseReport slice")
	}

	if len(noDPResponseReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NoDPResponseReport records in the query.
func (q noDPResponseReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count no_dp_response_report rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q noDPResponseReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if no_dp_response_report exists")
	}

	return count > 0, nil
}

// NoDPResponseReports retrieves all the records using an executor.
func NoDPResponseReports(mods ...qm.QueryMod) noDPResponseReportQuery {
	mods = append(mods, qm.From("\"no_dp_response_report\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"no_dp_response_report\".*"})
	}

	return noDPResponseReportQuery{q}
}

// FindNoDPResponseReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNoDPResponseReport(ctx context.Context, exec boil.ContextExecutor, time string, demandPartnerID string, publisherID string, domain string, selectCols ...string) (*NoDPResponseReport, error) {
	noDPResponseReportObj := &NoDPResponseReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"no_dp_response_report\" where \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"publisher_id\"=$3 AND \"domain\"=$4", sel,
	)

	q := queries.Raw(query, time, demandPartnerID, publisherID, domain)

	err := q.Bind(ctx, exec, noDPResponseReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from no_dp_response_report")
	}

	if err = noDPResponseReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return noDPResponseReportObj, err
	}

	return noDPResponseReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NoDPResponseReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no no_dp_response_report provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noDPResponseReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	noDPResponseReportInsertCacheMut.RLock()
	cache, cached := noDPResponseReportInsertCache[key]
	noDPResponseReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			noDPResponseReportAllColumns,
			noDPResponseReportColumnsWithDefault,
			noDPResponseReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(noDPResponseReportType, noDPResponseReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(noDPResponseReportType, noDPResponseReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"no_dp_response_report\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"no_dp_response_report\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into no_dp_response_report")
	}

	if !cached {
		noDPResponseReportInsertCacheMut.Lock()
		noDPResponseReportInsertCache[key] = cache
		noDPResponseReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NoDPResponseReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NoDPResponseReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	noDPResponseReportUpdateCacheMut.RLock()
	cache, cached := noDPResponseReportUpdateCache[key]
	noDPResponseReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			noDPResponseReportAllColumns,
			noDPResponseReportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update no_dp_response_report, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"no_dp_response_report\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, noDPResponseReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(noDPResponseReportType, noDPResponseReportMapping, append(wl, noDPResponseReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update no_dp_response_report row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for no_dp_response_report")
	}

	if !cached {
		noDPResponseReportUpdateCacheMut.Lock()
		noDPResponseReportUpdateCache[key] = cache
		noDPResponseReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q noDPResponseReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for no_dp_response_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for no_dp_response_report")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NoDPResponseReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noDPResponseReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"no_dp_response_report\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, noDPResponseReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in noDPResponseReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all noDPResponseReport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NoDPResponseReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no no_dp_response_report provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noDPResponseReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	noDPResponseReportUpsertCacheMut.RLock()
	cache, cached := noDPResponseReportUpsertCache[key]
	noDPResponseReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			noDPResponseReportAllColumns,
			noDPResponseReportColumnsWithDefault,
			noDPResponseReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			noDPResponseReportAllColumns,
			noDPResponseReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert no_dp_response_report, could not build update column list")
		}

		ret := strmangle.SetComplement(noDPResponseReportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(noDPResponseReportPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert no_dp_response_report, could not build conflict column list")
			}

			conflict = make([]string, len(noDPResponseReportPrimaryKeyColumns))
			copy(conflict, noDPResponseReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"no_dp_response_report\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(noDPResponseReportType, noDPResponseReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(noDPResponseReportType, noDPResponseReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert no_dp_response_report")
	}

	if !cached {
		noDPResponseReportUpsertCacheMut.Lock()
		noDPResponseReportUpsertCache[key] = cache
		noDPResponseReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NoDPResponseReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NoDPResponseReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NoDPResponseReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), noDPResponseReportPrimaryKeyMapping)
	sql := "DELETE FROM \"no_dp_response_report\" WHERE \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"publisher_id\"=$3 AND \"domain\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from no_dp_response_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for no_dp_response_report")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q noDPResponseReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no noDPResponseReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from no_dp_response_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for no_dp_response_report")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NoDPResponseReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(noDPResponseReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noDPResponseReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"no_dp_response_report\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, noDPResponseReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from noDPResponseReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for no_dp_response_report")
	}

	if len(noDPResponseReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NoDPResponseReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNoDPResponseReport(ctx, exec, o.Time, o.DemandPartnerID, o.PublisherID, o.Domain)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoDPResponseReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NoDPResponseReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noDPResponseReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"no_dp_response_report\".* FROM \"no_dp_response_report\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, noDPResponseReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NoDPResponseReportSlice")
	}

	*o = slice

	return nil
}

// NoDPResponseReportExists checks if the NoDPResponseReport row exists.
func NoDPResponseReportExists(ctx context.Context, exec boil.ContextExecutor, time string, demandPartnerID string, publisherID string, domain string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"no_dp_response_report\" where \"time\"=$1 AND \"demand_partner_id\"=$2 AND \"publisher_id\"=$3 AND \"domain\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, demandPartnerID, publisherID, domain)
	}
	row := exec.QueryRowContext(ctx, sql, time, demandPartnerID, publisherID, domain)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if no_dp_response_report exists")
	}

	return exists, nil
}

// Exists checks if the NoDPResponseReport row exists.
func (o *NoDPResponseReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NoDPResponseReportExists(ctx, exec, o.Time, o.DemandPartnerID, o.PublisherID, o.Domain)
}
