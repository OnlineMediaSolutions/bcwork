// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDPAPIReports(t *testing.T) {
	t.Parallel()

	query := DPAPIReports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDPAPIReportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDPAPIReportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DPAPIReports().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDPAPIReportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DPAPIReportSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDPAPIReportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DPAPIReportExists(ctx, tx, o.DateStamp, o.DemandPartner, o.Domain)
	if err != nil {
		t.Errorf("Unable to check if DPAPIReport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DPAPIReportExists to return true, but got false.")
	}
}

func testDPAPIReportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dpAPIReportFound, err := FindDPAPIReport(ctx, tx, o.DateStamp, o.DemandPartner, o.Domain)
	if err != nil {
		t.Error(err)
	}

	if dpAPIReportFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDPAPIReportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DPAPIReports().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDPAPIReportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DPAPIReports().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDPAPIReportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dpAPIReportOne := &DPAPIReport{}
	dpAPIReportTwo := &DPAPIReport{}
	if err = randomize.Struct(seed, dpAPIReportOne, dpAPIReportDBTypes, false, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}
	if err = randomize.Struct(seed, dpAPIReportTwo, dpAPIReportDBTypes, false, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dpAPIReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dpAPIReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DPAPIReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDPAPIReportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dpAPIReportOne := &DPAPIReport{}
	dpAPIReportTwo := &DPAPIReport{}
	if err = randomize.Struct(seed, dpAPIReportOne, dpAPIReportDBTypes, false, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}
	if err = randomize.Struct(seed, dpAPIReportTwo, dpAPIReportDBTypes, false, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dpAPIReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dpAPIReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dpAPIReportBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func dpAPIReportAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func dpAPIReportAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func dpAPIReportBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func dpAPIReportAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func dpAPIReportBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func dpAPIReportAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func dpAPIReportBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func dpAPIReportAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DPAPIReport) error {
	*o = DPAPIReport{}
	return nil
}

func testDPAPIReportsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DPAPIReport{}
	o := &DPAPIReport{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DPAPIReport object: %s", err)
	}

	AddDPAPIReportHook(boil.BeforeInsertHook, dpAPIReportBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dpAPIReportBeforeInsertHooks = []DPAPIReportHook{}

	AddDPAPIReportHook(boil.AfterInsertHook, dpAPIReportAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dpAPIReportAfterInsertHooks = []DPAPIReportHook{}

	AddDPAPIReportHook(boil.AfterSelectHook, dpAPIReportAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dpAPIReportAfterSelectHooks = []DPAPIReportHook{}

	AddDPAPIReportHook(boil.BeforeUpdateHook, dpAPIReportBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dpAPIReportBeforeUpdateHooks = []DPAPIReportHook{}

	AddDPAPIReportHook(boil.AfterUpdateHook, dpAPIReportAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dpAPIReportAfterUpdateHooks = []DPAPIReportHook{}

	AddDPAPIReportHook(boil.BeforeDeleteHook, dpAPIReportBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dpAPIReportBeforeDeleteHooks = []DPAPIReportHook{}

	AddDPAPIReportHook(boil.AfterDeleteHook, dpAPIReportAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dpAPIReportAfterDeleteHooks = []DPAPIReportHook{}

	AddDPAPIReportHook(boil.BeforeUpsertHook, dpAPIReportBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dpAPIReportBeforeUpsertHooks = []DPAPIReportHook{}

	AddDPAPIReportHook(boil.AfterUpsertHook, dpAPIReportAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dpAPIReportAfterUpsertHooks = []DPAPIReportHook{}
}

func testDPAPIReportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDPAPIReportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dpAPIReportColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDPAPIReportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDPAPIReportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DPAPIReportSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDPAPIReportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DPAPIReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dpAPIReportDBTypes = map[string]string{`DateStamp`: `timestamp without time zone`, `DemandPartner`: `character varying`, `Domain`: `character varying`, `SoldImps`: `bigint`, `Revenue`: `numeric`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testDPAPIReportsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dpAPIReportPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dpAPIReportAllColumns) == len(dpAPIReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDPAPIReportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dpAPIReportAllColumns) == len(dpAPIReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DPAPIReport{}
	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dpAPIReportDBTypes, true, dpAPIReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dpAPIReportAllColumns, dpAPIReportPrimaryKeyColumns) {
		fields = dpAPIReportAllColumns
	} else {
		fields = strmangle.SetComplement(
			dpAPIReportAllColumns,
			dpAPIReportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DPAPIReportSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDPAPIReportsUpsert(t *testing.T) {
	t.Parallel()

	if len(dpAPIReportAllColumns) == len(dpAPIReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DPAPIReport{}
	if err = randomize.Struct(seed, &o, dpAPIReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DPAPIReport: %s", err)
	}

	count, err := DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dpAPIReportDBTypes, false, dpAPIReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DPAPIReport struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DPAPIReport: %s", err)
	}

	count, err = DPAPIReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
