// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserPlatformRoles(t *testing.T) {
	t.Parallel()

	query := UserPlatformRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserPlatformRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPlatformRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserPlatformRoles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPlatformRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserPlatformRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserPlatformRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserPlatformRoleExists(ctx, tx, o.UserID, o.RoleID)
	if err != nil {
		t.Errorf("Unable to check if UserPlatformRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserPlatformRoleExists to return true, but got false.")
	}
}

func testUserPlatformRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userPlatformRoleFound, err := FindUserPlatformRole(ctx, tx, o.UserID, o.RoleID)
	if err != nil {
		t.Error(err)
	}

	if userPlatformRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserPlatformRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserPlatformRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserPlatformRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserPlatformRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserPlatformRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userPlatformRoleOne := &UserPlatformRole{}
	userPlatformRoleTwo := &UserPlatformRole{}
	if err = randomize.Struct(seed, userPlatformRoleOne, userPlatformRoleDBTypes, false, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}
	if err = randomize.Struct(seed, userPlatformRoleTwo, userPlatformRoleDBTypes, false, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userPlatformRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userPlatformRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserPlatformRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserPlatformRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userPlatformRoleOne := &UserPlatformRole{}
	userPlatformRoleTwo := &UserPlatformRole{}
	if err = randomize.Struct(seed, userPlatformRoleOne, userPlatformRoleDBTypes, false, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}
	if err = randomize.Struct(seed, userPlatformRoleTwo, userPlatformRoleDBTypes, false, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userPlatformRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userPlatformRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userPlatformRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func userPlatformRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func userPlatformRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func userPlatformRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func userPlatformRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func userPlatformRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func userPlatformRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func userPlatformRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func userPlatformRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserPlatformRole) error {
	*o = UserPlatformRole{}
	return nil
}

func testUserPlatformRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserPlatformRole{}
	o := &UserPlatformRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole object: %s", err)
	}

	AddUserPlatformRoleHook(boil.BeforeInsertHook, userPlatformRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleBeforeInsertHooks = []UserPlatformRoleHook{}

	AddUserPlatformRoleHook(boil.AfterInsertHook, userPlatformRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleAfterInsertHooks = []UserPlatformRoleHook{}

	AddUserPlatformRoleHook(boil.AfterSelectHook, userPlatformRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleAfterSelectHooks = []UserPlatformRoleHook{}

	AddUserPlatformRoleHook(boil.BeforeUpdateHook, userPlatformRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleBeforeUpdateHooks = []UserPlatformRoleHook{}

	AddUserPlatformRoleHook(boil.AfterUpdateHook, userPlatformRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleAfterUpdateHooks = []UserPlatformRoleHook{}

	AddUserPlatformRoleHook(boil.BeforeDeleteHook, userPlatformRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleBeforeDeleteHooks = []UserPlatformRoleHook{}

	AddUserPlatformRoleHook(boil.AfterDeleteHook, userPlatformRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleAfterDeleteHooks = []UserPlatformRoleHook{}

	AddUserPlatformRoleHook(boil.BeforeUpsertHook, userPlatformRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleBeforeUpsertHooks = []UserPlatformRoleHook{}

	AddUserPlatformRoleHook(boil.AfterUpsertHook, userPlatformRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userPlatformRoleAfterUpsertHooks = []UserPlatformRoleHook{}
}

func testUserPlatformRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserPlatformRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userPlatformRoleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserPlatformRoleToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserPlatformRole
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userPlatformRoleDBTypes, false, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserPlatformRoleSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserPlatformRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserPlatformRoleToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserPlatformRole
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userPlatformRoleDBTypes, false, strmangle.SetComplement(userPlatformRolePrimaryKeyColumns, userPlatformRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserPlatformRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserPlatformRoleExists(ctx, tx, a.UserID, a.RoleID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserPlatformRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserPlatformRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserPlatformRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserPlatformRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserPlatformRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userPlatformRoleDBTypes = map[string]string{`UserID`: `character varying`, `RoleID`: `character varying`, `CreatedAt`: `timestamp without time zone`}
	_                       = bytes.MinRead
)

func testUserPlatformRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userPlatformRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userPlatformRoleAllColumns) == len(userPlatformRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserPlatformRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userPlatformRoleAllColumns) == len(userPlatformRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserPlatformRole{}
	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userPlatformRoleDBTypes, true, userPlatformRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userPlatformRoleAllColumns, userPlatformRolePrimaryKeyColumns) {
		fields = userPlatformRoleAllColumns
	} else {
		fields = strmangle.SetComplement(
			userPlatformRoleAllColumns,
			userPlatformRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserPlatformRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserPlatformRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(userPlatformRoleAllColumns) == len(userPlatformRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserPlatformRole{}
	if err = randomize.Struct(seed, &o, userPlatformRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserPlatformRole: %s", err)
	}

	count, err := UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userPlatformRoleDBTypes, false, userPlatformRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserPlatformRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserPlatformRole: %s", err)
	}

	count, err = UserPlatformRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
