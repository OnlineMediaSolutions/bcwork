// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGlobalFactors(t *testing.T) {
	t.Parallel()

	query := GlobalFactors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGlobalFactorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGlobalFactorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GlobalFactors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGlobalFactorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GlobalFactorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGlobalFactorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GlobalFactorExists(ctx, tx, o.Key, o.PublisherID)
	if err != nil {
		t.Errorf("Unable to check if GlobalFactor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GlobalFactorExists to return true, but got false.")
	}
}

func testGlobalFactorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	globalFactorFound, err := FindGlobalFactor(ctx, tx, o.Key, o.PublisherID)
	if err != nil {
		t.Error(err)
	}

	if globalFactorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGlobalFactorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GlobalFactors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGlobalFactorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GlobalFactors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGlobalFactorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	globalFactorOne := &GlobalFactor{}
	globalFactorTwo := &GlobalFactor{}
	if err = randomize.Struct(seed, globalFactorOne, globalFactorDBTypes, false, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}
	if err = randomize.Struct(seed, globalFactorTwo, globalFactorDBTypes, false, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = globalFactorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = globalFactorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GlobalFactors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGlobalFactorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	globalFactorOne := &GlobalFactor{}
	globalFactorTwo := &GlobalFactor{}
	if err = randomize.Struct(seed, globalFactorOne, globalFactorDBTypes, false, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}
	if err = randomize.Struct(seed, globalFactorTwo, globalFactorDBTypes, false, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = globalFactorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = globalFactorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func globalFactorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func globalFactorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func globalFactorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func globalFactorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func globalFactorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func globalFactorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func globalFactorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func globalFactorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func globalFactorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GlobalFactor) error {
	*o = GlobalFactor{}
	return nil
}

func testGlobalFactorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GlobalFactor{}
	o := &GlobalFactor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, globalFactorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GlobalFactor object: %s", err)
	}

	AddGlobalFactorHook(boil.BeforeInsertHook, globalFactorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	globalFactorBeforeInsertHooks = []GlobalFactorHook{}

	AddGlobalFactorHook(boil.AfterInsertHook, globalFactorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	globalFactorAfterInsertHooks = []GlobalFactorHook{}

	AddGlobalFactorHook(boil.AfterSelectHook, globalFactorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	globalFactorAfterSelectHooks = []GlobalFactorHook{}

	AddGlobalFactorHook(boil.BeforeUpdateHook, globalFactorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	globalFactorBeforeUpdateHooks = []GlobalFactorHook{}

	AddGlobalFactorHook(boil.AfterUpdateHook, globalFactorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	globalFactorAfterUpdateHooks = []GlobalFactorHook{}

	AddGlobalFactorHook(boil.BeforeDeleteHook, globalFactorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	globalFactorBeforeDeleteHooks = []GlobalFactorHook{}

	AddGlobalFactorHook(boil.AfterDeleteHook, globalFactorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	globalFactorAfterDeleteHooks = []GlobalFactorHook{}

	AddGlobalFactorHook(boil.BeforeUpsertHook, globalFactorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	globalFactorBeforeUpsertHooks = []GlobalFactorHook{}

	AddGlobalFactorHook(boil.AfterUpsertHook, globalFactorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	globalFactorAfterUpsertHooks = []GlobalFactorHook{}
}

func testGlobalFactorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGlobalFactorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(globalFactorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGlobalFactorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGlobalFactorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GlobalFactorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGlobalFactorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GlobalFactors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	globalFactorDBTypes = map[string]string{`Key`: `character varying`, `PublisherID`: `character varying`, `Value`: `double precision`, `UpdatedAt`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testGlobalFactorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(globalFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(globalFactorAllColumns) == len(globalFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGlobalFactorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(globalFactorAllColumns) == len(globalFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GlobalFactor{}
	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, globalFactorDBTypes, true, globalFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(globalFactorAllColumns, globalFactorPrimaryKeyColumns) {
		fields = globalFactorAllColumns
	} else {
		fields = strmangle.SetComplement(
			globalFactorAllColumns,
			globalFactorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GlobalFactorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGlobalFactorsUpsert(t *testing.T) {
	t.Parallel()

	if len(globalFactorAllColumns) == len(globalFactorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GlobalFactor{}
	if err = randomize.Struct(seed, &o, globalFactorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GlobalFactor: %s", err)
	}

	count, err := GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, globalFactorDBTypes, false, globalFactorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GlobalFactor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GlobalFactor: %s", err)
	}

	count, err = GlobalFactors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
