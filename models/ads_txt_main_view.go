// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AdsTXTMainView is an object representing the database table.
type AdsTXTMainView struct {
	ID                        null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	PublisherID               null.String       `boil:"publisher_id" json:"publisher_id,omitempty" toml:"publisher_id" yaml:"publisher_id,omitempty"`
	PublisherName             null.String       `boil:"publisher_name" json:"publisher_name,omitempty" toml:"publisher_name" yaml:"publisher_name,omitempty"`
	MirrorPublisherID         null.String       `boil:"mirror_publisher_id" json:"mirror_publisher_id,omitempty" toml:"mirror_publisher_id" yaml:"mirror_publisher_id,omitempty"`
	MirrorPublisherName       null.String       `boil:"mirror_publisher_name" json:"mirror_publisher_name,omitempty" toml:"mirror_publisher_name" yaml:"mirror_publisher_name,omitempty"`
	AccountManagerFullName    null.String       `boil:"account_manager_full_name" json:"account_manager_full_name,omitempty" toml:"account_manager_full_name" yaml:"account_manager_full_name,omitempty"`
	CampaignManagerFullName   null.String       `boil:"campaign_manager_full_name" json:"campaign_manager_full_name,omitempty" toml:"campaign_manager_full_name" yaml:"campaign_manager_full_name,omitempty"`
	DemandManagerFullName     null.String       `boil:"demand_manager_full_name" json:"demand_manager_full_name,omitempty" toml:"demand_manager_full_name" yaml:"demand_manager_full_name,omitempty"`
	Domain                    null.String       `boil:"domain" json:"domain,omitempty" toml:"domain" yaml:"domain,omitempty"`
	DemandPartnerID           null.String       `boil:"demand_partner_id" json:"demand_partner_id,omitempty" toml:"demand_partner_id" yaml:"demand_partner_id,omitempty"`
	DemandPartnerName         null.String       `boil:"demand_partner_name" json:"demand_partner_name,omitempty" toml:"demand_partner_name" yaml:"demand_partner_name,omitempty"`
	DemandPartnerNameExtended null.String       `boil:"demand_partner_name_extended" json:"demand_partner_name_extended,omitempty" toml:"demand_partner_name_extended" yaml:"demand_partner_name_extended,omitempty"`
	DemandPartnerConnectionID null.Int          `boil:"demand_partner_connection_id" json:"demand_partner_connection_id,omitempty" toml:"demand_partner_connection_id" yaml:"demand_partner_connection_id,omitempty"`
	MediaType                 types.StringArray `boil:"media_type" json:"media_type,omitempty" toml:"media_type" yaml:"media_type,omitempty"`
	IsApprovalNeeded          null.Bool         `boil:"is_approval_needed" json:"is_approval_needed,omitempty" toml:"is_approval_needed" yaml:"is_approval_needed,omitempty"`
	IsRequired                null.Bool         `boil:"is_required" json:"is_required,omitempty" toml:"is_required" yaml:"is_required,omitempty"`
	IsDemandPartnerActive     null.Bool         `boil:"is_demand_partner_active" json:"is_demand_partner_active,omitempty" toml:"is_demand_partner_active" yaml:"is_demand_partner_active,omitempty"`
	LastScannedAt             null.Time         `boil:"last_scanned_at" json:"last_scanned_at,omitempty" toml:"last_scanned_at" yaml:"last_scanned_at,omitempty"`
	ErrorMessage              null.String       `boil:"error_message" json:"error_message,omitempty" toml:"error_message" yaml:"error_message,omitempty"`
	AdsTXTLine                null.String       `boil:"ads_txt_line" json:"ads_txt_line,omitempty" toml:"ads_txt_line" yaml:"ads_txt_line,omitempty"`
	Status                    null.String       `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	DomainStatus              null.String       `boil:"domain_status" json:"domain_status,omitempty" toml:"domain_status" yaml:"domain_status,omitempty"`
	DemandStatus              null.String       `boil:"demand_status" json:"demand_status,omitempty" toml:"demand_status" yaml:"demand_status,omitempty"`
}

var AdsTXTMainViewColumns = struct {
	ID                        string
	PublisherID               string
	PublisherName             string
	MirrorPublisherID         string
	MirrorPublisherName       string
	AccountManagerFullName    string
	CampaignManagerFullName   string
	DemandManagerFullName     string
	Domain                    string
	DemandPartnerID           string
	DemandPartnerName         string
	DemandPartnerNameExtended string
	DemandPartnerConnectionID string
	MediaType                 string
	IsApprovalNeeded          string
	IsRequired                string
	IsDemandPartnerActive     string
	LastScannedAt             string
	ErrorMessage              string
	AdsTXTLine                string
	Status                    string
	DomainStatus              string
	DemandStatus              string
}{
	ID:                        "id",
	PublisherID:               "publisher_id",
	PublisherName:             "publisher_name",
	MirrorPublisherID:         "mirror_publisher_id",
	MirrorPublisherName:       "mirror_publisher_name",
	AccountManagerFullName:    "account_manager_full_name",
	CampaignManagerFullName:   "campaign_manager_full_name",
	DemandManagerFullName:     "demand_manager_full_name",
	Domain:                    "domain",
	DemandPartnerID:           "demand_partner_id",
	DemandPartnerName:         "demand_partner_name",
	DemandPartnerNameExtended: "demand_partner_name_extended",
	DemandPartnerConnectionID: "demand_partner_connection_id",
	MediaType:                 "media_type",
	IsApprovalNeeded:          "is_approval_needed",
	IsRequired:                "is_required",
	IsDemandPartnerActive:     "is_demand_partner_active",
	LastScannedAt:             "last_scanned_at",
	ErrorMessage:              "error_message",
	AdsTXTLine:                "ads_txt_line",
	Status:                    "status",
	DomainStatus:              "domain_status",
	DemandStatus:              "demand_status",
}

var AdsTXTMainViewTableColumns = struct {
	ID                        string
	PublisherID               string
	PublisherName             string
	MirrorPublisherID         string
	MirrorPublisherName       string
	AccountManagerFullName    string
	CampaignManagerFullName   string
	DemandManagerFullName     string
	Domain                    string
	DemandPartnerID           string
	DemandPartnerName         string
	DemandPartnerNameExtended string
	DemandPartnerConnectionID string
	MediaType                 string
	IsApprovalNeeded          string
	IsRequired                string
	IsDemandPartnerActive     string
	LastScannedAt             string
	ErrorMessage              string
	AdsTXTLine                string
	Status                    string
	DomainStatus              string
	DemandStatus              string
}{
	ID:                        "ads_txt_main_view.id",
	PublisherID:               "ads_txt_main_view.publisher_id",
	PublisherName:             "ads_txt_main_view.publisher_name",
	MirrorPublisherID:         "ads_txt_main_view.mirror_publisher_id",
	MirrorPublisherName:       "ads_txt_main_view.mirror_publisher_name",
	AccountManagerFullName:    "ads_txt_main_view.account_manager_full_name",
	CampaignManagerFullName:   "ads_txt_main_view.campaign_manager_full_name",
	DemandManagerFullName:     "ads_txt_main_view.demand_manager_full_name",
	Domain:                    "ads_txt_main_view.domain",
	DemandPartnerID:           "ads_txt_main_view.demand_partner_id",
	DemandPartnerName:         "ads_txt_main_view.demand_partner_name",
	DemandPartnerNameExtended: "ads_txt_main_view.demand_partner_name_extended",
	DemandPartnerConnectionID: "ads_txt_main_view.demand_partner_connection_id",
	MediaType:                 "ads_txt_main_view.media_type",
	IsApprovalNeeded:          "ads_txt_main_view.is_approval_needed",
	IsRequired:                "ads_txt_main_view.is_required",
	IsDemandPartnerActive:     "ads_txt_main_view.is_demand_partner_active",
	LastScannedAt:             "ads_txt_main_view.last_scanned_at",
	ErrorMessage:              "ads_txt_main_view.error_message",
	AdsTXTLine:                "ads_txt_main_view.ads_txt_line",
	Status:                    "ads_txt_main_view.status",
	DomainStatus:              "ads_txt_main_view.domain_status",
	DemandStatus:              "ads_txt_main_view.demand_status",
}

// Generated where

var AdsTXTMainViewWhere = struct {
	ID                        whereHelpernull_Int
	PublisherID               whereHelpernull_String
	PublisherName             whereHelpernull_String
	MirrorPublisherID         whereHelpernull_String
	MirrorPublisherName       whereHelpernull_String
	AccountManagerFullName    whereHelpernull_String
	CampaignManagerFullName   whereHelpernull_String
	DemandManagerFullName     whereHelpernull_String
	Domain                    whereHelpernull_String
	DemandPartnerID           whereHelpernull_String
	DemandPartnerName         whereHelpernull_String
	DemandPartnerNameExtended whereHelpernull_String
	DemandPartnerConnectionID whereHelpernull_Int
	MediaType                 whereHelpertypes_StringArray
	IsApprovalNeeded          whereHelpernull_Bool
	IsRequired                whereHelpernull_Bool
	IsDemandPartnerActive     whereHelpernull_Bool
	LastScannedAt             whereHelpernull_Time
	ErrorMessage              whereHelpernull_String
	AdsTXTLine                whereHelpernull_String
	Status                    whereHelpernull_String
	DomainStatus              whereHelpernull_String
	DemandStatus              whereHelpernull_String
}{
	ID:                        whereHelpernull_Int{field: "\"ads_txt_main_view\".\"id\""},
	PublisherID:               whereHelpernull_String{field: "\"ads_txt_main_view\".\"publisher_id\""},
	PublisherName:             whereHelpernull_String{field: "\"ads_txt_main_view\".\"publisher_name\""},
	MirrorPublisherID:         whereHelpernull_String{field: "\"ads_txt_main_view\".\"mirror_publisher_id\""},
	MirrorPublisherName:       whereHelpernull_String{field: "\"ads_txt_main_view\".\"mirror_publisher_name\""},
	AccountManagerFullName:    whereHelpernull_String{field: "\"ads_txt_main_view\".\"account_manager_full_name\""},
	CampaignManagerFullName:   whereHelpernull_String{field: "\"ads_txt_main_view\".\"campaign_manager_full_name\""},
	DemandManagerFullName:     whereHelpernull_String{field: "\"ads_txt_main_view\".\"demand_manager_full_name\""},
	Domain:                    whereHelpernull_String{field: "\"ads_txt_main_view\".\"domain\""},
	DemandPartnerID:           whereHelpernull_String{field: "\"ads_txt_main_view\".\"demand_partner_id\""},
	DemandPartnerName:         whereHelpernull_String{field: "\"ads_txt_main_view\".\"demand_partner_name\""},
	DemandPartnerNameExtended: whereHelpernull_String{field: "\"ads_txt_main_view\".\"demand_partner_name_extended\""},
	DemandPartnerConnectionID: whereHelpernull_Int{field: "\"ads_txt_main_view\".\"demand_partner_connection_id\""},
	MediaType:                 whereHelpertypes_StringArray{field: "\"ads_txt_main_view\".\"media_type\""},
	IsApprovalNeeded:          whereHelpernull_Bool{field: "\"ads_txt_main_view\".\"is_approval_needed\""},
	IsRequired:                whereHelpernull_Bool{field: "\"ads_txt_main_view\".\"is_required\""},
	IsDemandPartnerActive:     whereHelpernull_Bool{field: "\"ads_txt_main_view\".\"is_demand_partner_active\""},
	LastScannedAt:             whereHelpernull_Time{field: "\"ads_txt_main_view\".\"last_scanned_at\""},
	ErrorMessage:              whereHelpernull_String{field: "\"ads_txt_main_view\".\"error_message\""},
	AdsTXTLine:                whereHelpernull_String{field: "\"ads_txt_main_view\".\"ads_txt_line\""},
	Status:                    whereHelpernull_String{field: "\"ads_txt_main_view\".\"status\""},
	DomainStatus:              whereHelpernull_String{field: "\"ads_txt_main_view\".\"domain_status\""},
	DemandStatus:              whereHelpernull_String{field: "\"ads_txt_main_view\".\"demand_status\""},
}

var (
	adsTXTMainViewAllColumns            = []string{"id", "publisher_id", "publisher_name", "mirror_publisher_id", "mirror_publisher_name", "account_manager_full_name", "campaign_manager_full_name", "demand_manager_full_name", "domain", "demand_partner_id", "demand_partner_name", "demand_partner_name_extended", "demand_partner_connection_id", "media_type", "is_approval_needed", "is_required", "is_demand_partner_active", "last_scanned_at", "error_message", "ads_txt_line", "status", "domain_status", "demand_status"}
	adsTXTMainViewColumnsWithoutDefault = []string{}
	adsTXTMainViewColumnsWithDefault    = []string{"id", "publisher_id", "publisher_name", "mirror_publisher_id", "mirror_publisher_name", "account_manager_full_name", "campaign_manager_full_name", "demand_manager_full_name", "domain", "demand_partner_id", "demand_partner_name", "demand_partner_name_extended", "demand_partner_connection_id", "media_type", "is_approval_needed", "is_required", "is_demand_partner_active", "last_scanned_at", "error_message", "ads_txt_line", "status", "domain_status", "demand_status"}
	adsTXTMainViewPrimaryKeyColumns     = []string{}
	adsTXTMainViewGeneratedColumns      = []string{}
)

type (
	// AdsTXTMainViewSlice is an alias for a slice of pointers to AdsTXTMainView.
	// This should almost always be used instead of []AdsTXTMainView.
	AdsTXTMainViewSlice []*AdsTXTMainView
	// AdsTXTMainViewHook is the signature for custom AdsTXTMainView hook methods
	AdsTXTMainViewHook func(context.Context, boil.ContextExecutor, *AdsTXTMainView) error

	adsTXTMainViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adsTXTMainViewType           = reflect.TypeOf(&AdsTXTMainView{})
	adsTXTMainViewMapping        = queries.MakeStructMapping(adsTXTMainViewType)
	adsTXTMainViewInsertCacheMut sync.RWMutex
	adsTXTMainViewInsertCache    = make(map[string]insertCache)
	adsTXTMainViewUpdateCacheMut sync.RWMutex
	adsTXTMainViewUpdateCache    = make(map[string]updateCache)
	adsTXTMainViewUpsertCacheMut sync.RWMutex
	adsTXTMainViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var adsTXTMainViewAfterSelectMu sync.Mutex
var adsTXTMainViewAfterSelectHooks []AdsTXTMainViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdsTXTMainView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adsTXTMainViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdsTXTMainViewHook registers your hook function for all future operations.
func AddAdsTXTMainViewHook(hookPoint boil.HookPoint, adsTXTMainViewHook AdsTXTMainViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		adsTXTMainViewAfterSelectMu.Lock()
		adsTXTMainViewAfterSelectHooks = append(adsTXTMainViewAfterSelectHooks, adsTXTMainViewHook)
		adsTXTMainViewAfterSelectMu.Unlock()
	}
}

// One returns a single adsTXTMainView record from the query.
func (q adsTXTMainViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AdsTXTMainView, error) {
	o := &AdsTXTMainView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ads_txt_main_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AdsTXTMainView records from the query.
func (q adsTXTMainViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdsTXTMainViewSlice, error) {
	var o []*AdsTXTMainView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdsTXTMainView slice")
	}

	if len(adsTXTMainViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AdsTXTMainView records in the query.
func (q adsTXTMainViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ads_txt_main_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q adsTXTMainViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ads_txt_main_view exists")
	}

	return count > 0, nil
}

// AdsTXTMainViews retrieves all the records using an executor.
func AdsTXTMainViews(mods ...qm.QueryMod) adsTXTMainViewQuery {
	mods = append(mods, qm.From("\"ads_txt_main_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ads_txt_main_view\".*"})
	}

	return adsTXTMainViewQuery{q}
}
