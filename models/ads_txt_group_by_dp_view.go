// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AdsTXTGroupByDPView is an object representing the database table.
type AdsTXTGroupByDPView struct {
	ID                        null.Int64        `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	PublisherID               null.String       `boil:"publisher_id" json:"publisher_id,omitempty" toml:"publisher_id" yaml:"publisher_id,omitempty"`
	PublisherName             null.String       `boil:"publisher_name" json:"publisher_name,omitempty" toml:"publisher_name" yaml:"publisher_name,omitempty"`
	MirrorPublisherID         null.String       `boil:"mirror_publisher_id" json:"mirror_publisher_id,omitempty" toml:"mirror_publisher_id" yaml:"mirror_publisher_id,omitempty"`
	MirrorPublisherName       null.String       `boil:"mirror_publisher_name" json:"mirror_publisher_name,omitempty" toml:"mirror_publisher_name" yaml:"mirror_publisher_name,omitempty"`
	AccountManagerFullName    null.String       `boil:"account_manager_full_name" json:"account_manager_full_name,omitempty" toml:"account_manager_full_name" yaml:"account_manager_full_name,omitempty"`
	CampaignManagerFullName   null.String       `boil:"campaign_manager_full_name" json:"campaign_manager_full_name,omitempty" toml:"campaign_manager_full_name" yaml:"campaign_manager_full_name,omitempty"`
	DemandManagerFullName     null.String       `boil:"demand_manager_full_name" json:"demand_manager_full_name,omitempty" toml:"demand_manager_full_name" yaml:"demand_manager_full_name,omitempty"`
	Domain                    null.String       `boil:"domain" json:"domain,omitempty" toml:"domain" yaml:"domain,omitempty"`
	DomainStatus              null.String       `boil:"domain_status" json:"domain_status,omitempty" toml:"domain_status" yaml:"domain_status,omitempty"`
	DemandPartnerID           null.String       `boil:"demand_partner_id" json:"demand_partner_id,omitempty" toml:"demand_partner_id" yaml:"demand_partner_id,omitempty"`
	DemandPartnerName         null.String       `boil:"demand_partner_name" json:"demand_partner_name,omitempty" toml:"demand_partner_name" yaml:"demand_partner_name,omitempty"`
	DemandPartnerNameExtended null.String       `boil:"demand_partner_name_extended" json:"demand_partner_name_extended,omitempty" toml:"demand_partner_name_extended" yaml:"demand_partner_name_extended,omitempty"`
	DemandPartnerConnectionID null.Int          `boil:"demand_partner_connection_id" json:"demand_partner_connection_id,omitempty" toml:"demand_partner_connection_id" yaml:"demand_partner_connection_id,omitempty"`
	MediaType                 types.StringArray `boil:"media_type" json:"media_type,omitempty" toml:"media_type" yaml:"media_type,omitempty"`
	DemandStatus              null.String       `boil:"demand_status" json:"demand_status,omitempty" toml:"demand_status" yaml:"demand_status,omitempty"`
	Added                     null.Int64        `boil:"added" json:"added,omitempty" toml:"added" yaml:"added,omitempty"`
	Total                     null.Int64        `boil:"total" json:"total,omitempty" toml:"total" yaml:"total,omitempty"`
	DPEnabled                 null.Bool         `boil:"dp_enabled" json:"dp_enabled,omitempty" toml:"dp_enabled" yaml:"dp_enabled,omitempty"`
	LastScannedAt             null.Time         `boil:"last_scanned_at" json:"last_scanned_at,omitempty" toml:"last_scanned_at" yaml:"last_scanned_at,omitempty"`
	GroupedLinesRaw           null.JSON         `boil:"grouped_lines_raw" json:"grouped_lines_raw,omitempty" toml:"grouped_lines_raw" yaml:"grouped_lines_raw,omitempty"`
}

var AdsTXTGroupByDPViewColumns = struct {
	ID                        string
	PublisherID               string
	PublisherName             string
	MirrorPublisherID         string
	MirrorPublisherName       string
	AccountManagerFullName    string
	CampaignManagerFullName   string
	DemandManagerFullName     string
	Domain                    string
	DomainStatus              string
	DemandPartnerID           string
	DemandPartnerName         string
	DemandPartnerNameExtended string
	DemandPartnerConnectionID string
	MediaType                 string
	DemandStatus              string
	Added                     string
	Total                     string
	DPEnabled                 string
	LastScannedAt             string
	GroupedLinesRaw           string
}{
	ID:                        "id",
	PublisherID:               "publisher_id",
	PublisherName:             "publisher_name",
	MirrorPublisherID:         "mirror_publisher_id",
	MirrorPublisherName:       "mirror_publisher_name",
	AccountManagerFullName:    "account_manager_full_name",
	CampaignManagerFullName:   "campaign_manager_full_name",
	DemandManagerFullName:     "demand_manager_full_name",
	Domain:                    "domain",
	DomainStatus:              "domain_status",
	DemandPartnerID:           "demand_partner_id",
	DemandPartnerName:         "demand_partner_name",
	DemandPartnerNameExtended: "demand_partner_name_extended",
	DemandPartnerConnectionID: "demand_partner_connection_id",
	MediaType:                 "media_type",
	DemandStatus:              "demand_status",
	Added:                     "added",
	Total:                     "total",
	DPEnabled:                 "dp_enabled",
	LastScannedAt:             "last_scanned_at",
	GroupedLinesRaw:           "grouped_lines_raw",
}

var AdsTXTGroupByDPViewTableColumns = struct {
	ID                        string
	PublisherID               string
	PublisherName             string
	MirrorPublisherID         string
	MirrorPublisherName       string
	AccountManagerFullName    string
	CampaignManagerFullName   string
	DemandManagerFullName     string
	Domain                    string
	DomainStatus              string
	DemandPartnerID           string
	DemandPartnerName         string
	DemandPartnerNameExtended string
	DemandPartnerConnectionID string
	MediaType                 string
	DemandStatus              string
	Added                     string
	Total                     string
	DPEnabled                 string
	LastScannedAt             string
	GroupedLinesRaw           string
}{
	ID:                        "ads_txt_group_by_dp_view.id",
	PublisherID:               "ads_txt_group_by_dp_view.publisher_id",
	PublisherName:             "ads_txt_group_by_dp_view.publisher_name",
	MirrorPublisherID:         "ads_txt_group_by_dp_view.mirror_publisher_id",
	MirrorPublisherName:       "ads_txt_group_by_dp_view.mirror_publisher_name",
	AccountManagerFullName:    "ads_txt_group_by_dp_view.account_manager_full_name",
	CampaignManagerFullName:   "ads_txt_group_by_dp_view.campaign_manager_full_name",
	DemandManagerFullName:     "ads_txt_group_by_dp_view.demand_manager_full_name",
	Domain:                    "ads_txt_group_by_dp_view.domain",
	DomainStatus:              "ads_txt_group_by_dp_view.domain_status",
	DemandPartnerID:           "ads_txt_group_by_dp_view.demand_partner_id",
	DemandPartnerName:         "ads_txt_group_by_dp_view.demand_partner_name",
	DemandPartnerNameExtended: "ads_txt_group_by_dp_view.demand_partner_name_extended",
	DemandPartnerConnectionID: "ads_txt_group_by_dp_view.demand_partner_connection_id",
	MediaType:                 "ads_txt_group_by_dp_view.media_type",
	DemandStatus:              "ads_txt_group_by_dp_view.demand_status",
	Added:                     "ads_txt_group_by_dp_view.added",
	Total:                     "ads_txt_group_by_dp_view.total",
	DPEnabled:                 "ads_txt_group_by_dp_view.dp_enabled",
	LastScannedAt:             "ads_txt_group_by_dp_view.last_scanned_at",
	GroupedLinesRaw:           "ads_txt_group_by_dp_view.grouped_lines_raw",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AdsTXTGroupByDPViewWhere = struct {
	ID                        whereHelpernull_Int64
	PublisherID               whereHelpernull_String
	PublisherName             whereHelpernull_String
	MirrorPublisherID         whereHelpernull_String
	MirrorPublisherName       whereHelpernull_String
	AccountManagerFullName    whereHelpernull_String
	CampaignManagerFullName   whereHelpernull_String
	DemandManagerFullName     whereHelpernull_String
	Domain                    whereHelpernull_String
	DomainStatus              whereHelpernull_String
	DemandPartnerID           whereHelpernull_String
	DemandPartnerName         whereHelpernull_String
	DemandPartnerNameExtended whereHelpernull_String
	DemandPartnerConnectionID whereHelpernull_Int
	MediaType                 whereHelpertypes_StringArray
	DemandStatus              whereHelpernull_String
	Added                     whereHelpernull_Int64
	Total                     whereHelpernull_Int64
	DPEnabled                 whereHelpernull_Bool
	LastScannedAt             whereHelpernull_Time
	GroupedLinesRaw           whereHelpernull_JSON
}{
	ID:                        whereHelpernull_Int64{field: "\"ads_txt_group_by_dp_view\".\"id\""},
	PublisherID:               whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"publisher_id\""},
	PublisherName:             whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"publisher_name\""},
	MirrorPublisherID:         whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"mirror_publisher_id\""},
	MirrorPublisherName:       whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"mirror_publisher_name\""},
	AccountManagerFullName:    whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"account_manager_full_name\""},
	CampaignManagerFullName:   whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"campaign_manager_full_name\""},
	DemandManagerFullName:     whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_manager_full_name\""},
	Domain:                    whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"domain\""},
	DomainStatus:              whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"domain_status\""},
	DemandPartnerID:           whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_partner_id\""},
	DemandPartnerName:         whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_partner_name\""},
	DemandPartnerNameExtended: whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_partner_name_extended\""},
	DemandPartnerConnectionID: whereHelpernull_Int{field: "\"ads_txt_group_by_dp_view\".\"demand_partner_connection_id\""},
	MediaType:                 whereHelpertypes_StringArray{field: "\"ads_txt_group_by_dp_view\".\"media_type\""},
	DemandStatus:              whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_status\""},
	Added:                     whereHelpernull_Int64{field: "\"ads_txt_group_by_dp_view\".\"added\""},
	Total:                     whereHelpernull_Int64{field: "\"ads_txt_group_by_dp_view\".\"total\""},
	DPEnabled:                 whereHelpernull_Bool{field: "\"ads_txt_group_by_dp_view\".\"dp_enabled\""},
	LastScannedAt:             whereHelpernull_Time{field: "\"ads_txt_group_by_dp_view\".\"last_scanned_at\""},
	GroupedLinesRaw:           whereHelpernull_JSON{field: "\"ads_txt_group_by_dp_view\".\"grouped_lines_raw\""},
}

var (
	adsTXTGroupByDPViewAllColumns            = []string{"id", "publisher_id", "publisher_name", "mirror_publisher_id", "mirror_publisher_name", "account_manager_full_name", "campaign_manager_full_name", "demand_manager_full_name", "domain", "domain_status", "demand_partner_id", "demand_partner_name", "demand_partner_name_extended", "demand_partner_connection_id", "media_type", "demand_status", "added", "total", "dp_enabled", "last_scanned_at", "grouped_lines_raw"}
	adsTXTGroupByDPViewColumnsWithoutDefault = []string{}
	adsTXTGroupByDPViewColumnsWithDefault    = []string{"id", "publisher_id", "publisher_name", "mirror_publisher_id", "mirror_publisher_name", "account_manager_full_name", "campaign_manager_full_name", "demand_manager_full_name", "domain", "domain_status", "demand_partner_id", "demand_partner_name", "demand_partner_name_extended", "demand_partner_connection_id", "media_type", "demand_status", "added", "total", "dp_enabled", "last_scanned_at", "grouped_lines_raw"}
	adsTXTGroupByDPViewPrimaryKeyColumns     = []string{}
	adsTXTGroupByDPViewGeneratedColumns      = []string{}
)

type (
	// AdsTXTGroupByDPViewSlice is an alias for a slice of pointers to AdsTXTGroupByDPView.
	// This should almost always be used instead of []AdsTXTGroupByDPView.
	AdsTXTGroupByDPViewSlice []*AdsTXTGroupByDPView
	// AdsTXTGroupByDPViewHook is the signature for custom AdsTXTGroupByDPView hook methods
	AdsTXTGroupByDPViewHook func(context.Context, boil.ContextExecutor, *AdsTXTGroupByDPView) error

	adsTXTGroupByDPViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adsTXTGroupByDPViewType           = reflect.TypeOf(&AdsTXTGroupByDPView{})
	adsTXTGroupByDPViewMapping        = queries.MakeStructMapping(adsTXTGroupByDPViewType)
	adsTXTGroupByDPViewInsertCacheMut sync.RWMutex
	adsTXTGroupByDPViewInsertCache    = make(map[string]insertCache)
	adsTXTGroupByDPViewUpdateCacheMut sync.RWMutex
	adsTXTGroupByDPViewUpdateCache    = make(map[string]updateCache)
	adsTXTGroupByDPViewUpsertCacheMut sync.RWMutex
	adsTXTGroupByDPViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var adsTXTGroupByDPViewAfterSelectMu sync.Mutex
var adsTXTGroupByDPViewAfterSelectHooks []AdsTXTGroupByDPViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdsTXTGroupByDPView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adsTXTGroupByDPViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdsTXTGroupByDPViewHook registers your hook function for all future operations.
func AddAdsTXTGroupByDPViewHook(hookPoint boil.HookPoint, adsTXTGroupByDPViewHook AdsTXTGroupByDPViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		adsTXTGroupByDPViewAfterSelectMu.Lock()
		adsTXTGroupByDPViewAfterSelectHooks = append(adsTXTGroupByDPViewAfterSelectHooks, adsTXTGroupByDPViewHook)
		adsTXTGroupByDPViewAfterSelectMu.Unlock()
	}
}

// One returns a single adsTXTGroupByDPView record from the query.
func (q adsTXTGroupByDPViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AdsTXTGroupByDPView, error) {
	o := &AdsTXTGroupByDPView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ads_txt_group_by_dp_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AdsTXTGroupByDPView records from the query.
func (q adsTXTGroupByDPViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdsTXTGroupByDPViewSlice, error) {
	var o []*AdsTXTGroupByDPView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdsTXTGroupByDPView slice")
	}

	if len(adsTXTGroupByDPViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AdsTXTGroupByDPView records in the query.
func (q adsTXTGroupByDPViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ads_txt_group_by_dp_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q adsTXTGroupByDPViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ads_txt_group_by_dp_view exists")
	}

	return count > 0, nil
}

// AdsTXTGroupByDPViews retrieves all the records using an executor.
func AdsTXTGroupByDPViews(mods ...qm.QueryMod) adsTXTGroupByDPViewQuery {
	mods = append(mods, qm.From("\"ads_txt_group_by_dp_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ads_txt_group_by_dp_view\".*"})
	}

	return adsTXTGroupByDPViewQuery{q}
}
