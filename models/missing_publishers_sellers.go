// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MissingPublishersSeller is an object representing the database table.
type MissingPublishersSeller struct {
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	URL       string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	Sellers   null.String `boil:"sellers" json:"sellers,omitempty" toml:"sellers" yaml:"sellers,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *missingPublishersSellerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L missingPublishersSellerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MissingPublishersSellerColumns = struct {
	Name      string
	URL       string
	Sellers   string
	CreatedAt string
	UpdatedAt string
}{
	Name:      "name",
	URL:       "url",
	Sellers:   "sellers",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var MissingPublishersSellerTableColumns = struct {
	Name      string
	URL       string
	Sellers   string
	CreatedAt string
	UpdatedAt string
}{
	Name:      "missing_publishers_sellers.name",
	URL:       "missing_publishers_sellers.url",
	Sellers:   "missing_publishers_sellers.sellers",
	CreatedAt: "missing_publishers_sellers.created_at",
	UpdatedAt: "missing_publishers_sellers.updated_at",
}

// Generated where

var MissingPublishersSellerWhere = struct {
	Name      whereHelperstring
	URL       whereHelperstring
	Sellers   whereHelpernull_String
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	Name:      whereHelperstring{field: "\"missing_publishers_sellers\".\"name\""},
	URL:       whereHelperstring{field: "\"missing_publishers_sellers\".\"url\""},
	Sellers:   whereHelpernull_String{field: "\"missing_publishers_sellers\".\"sellers\""},
	CreatedAt: whereHelpernull_Time{field: "\"missing_publishers_sellers\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"missing_publishers_sellers\".\"updated_at\""},
}

// MissingPublishersSellerRels is where relationship names are stored.
var MissingPublishersSellerRels = struct {
}{}

// missingPublishersSellerR is where relationships are stored.
type missingPublishersSellerR struct {
}

// NewStruct creates a new relationship struct
func (*missingPublishersSellerR) NewStruct() *missingPublishersSellerR {
	return &missingPublishersSellerR{}
}

// missingPublishersSellerL is where Load methods for each relationship are stored.
type missingPublishersSellerL struct{}

var (
	missingPublishersSellerAllColumns            = []string{"name", "url", "sellers", "created_at", "updated_at"}
	missingPublishersSellerColumnsWithoutDefault = []string{"name", "url"}
	missingPublishersSellerColumnsWithDefault    = []string{"sellers", "created_at", "updated_at"}
	missingPublishersSellerPrimaryKeyColumns     = []string{"name"}
	missingPublishersSellerGeneratedColumns      = []string{}
)

type (
	// MissingPublishersSellerSlice is an alias for a slice of pointers to MissingPublishersSeller.
	// This should almost always be used instead of []MissingPublishersSeller.
	MissingPublishersSellerSlice []*MissingPublishersSeller
	// MissingPublishersSellerHook is the signature for custom MissingPublishersSeller hook methods
	MissingPublishersSellerHook func(context.Context, boil.ContextExecutor, *MissingPublishersSeller) error

	missingPublishersSellerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	missingPublishersSellerType                 = reflect.TypeOf(&MissingPublishersSeller{})
	missingPublishersSellerMapping              = queries.MakeStructMapping(missingPublishersSellerType)
	missingPublishersSellerPrimaryKeyMapping, _ = queries.BindMapping(missingPublishersSellerType, missingPublishersSellerMapping, missingPublishersSellerPrimaryKeyColumns)
	missingPublishersSellerInsertCacheMut       sync.RWMutex
	missingPublishersSellerInsertCache          = make(map[string]insertCache)
	missingPublishersSellerUpdateCacheMut       sync.RWMutex
	missingPublishersSellerUpdateCache          = make(map[string]updateCache)
	missingPublishersSellerUpsertCacheMut       sync.RWMutex
	missingPublishersSellerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var missingPublishersSellerAfterSelectMu sync.Mutex
var missingPublishersSellerAfterSelectHooks []MissingPublishersSellerHook

var missingPublishersSellerBeforeInsertMu sync.Mutex
var missingPublishersSellerBeforeInsertHooks []MissingPublishersSellerHook
var missingPublishersSellerAfterInsertMu sync.Mutex
var missingPublishersSellerAfterInsertHooks []MissingPublishersSellerHook

var missingPublishersSellerBeforeUpdateMu sync.Mutex
var missingPublishersSellerBeforeUpdateHooks []MissingPublishersSellerHook
var missingPublishersSellerAfterUpdateMu sync.Mutex
var missingPublishersSellerAfterUpdateHooks []MissingPublishersSellerHook

var missingPublishersSellerBeforeDeleteMu sync.Mutex
var missingPublishersSellerBeforeDeleteHooks []MissingPublishersSellerHook
var missingPublishersSellerAfterDeleteMu sync.Mutex
var missingPublishersSellerAfterDeleteHooks []MissingPublishersSellerHook

var missingPublishersSellerBeforeUpsertMu sync.Mutex
var missingPublishersSellerBeforeUpsertHooks []MissingPublishersSellerHook
var missingPublishersSellerAfterUpsertMu sync.Mutex
var missingPublishersSellerAfterUpsertHooks []MissingPublishersSellerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MissingPublishersSeller) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MissingPublishersSeller) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MissingPublishersSeller) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MissingPublishersSeller) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MissingPublishersSeller) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MissingPublishersSeller) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MissingPublishersSeller) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MissingPublishersSeller) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MissingPublishersSeller) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missingPublishersSellerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMissingPublishersSellerHook registers your hook function for all future operations.
func AddMissingPublishersSellerHook(hookPoint boil.HookPoint, missingPublishersSellerHook MissingPublishersSellerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		missingPublishersSellerAfterSelectMu.Lock()
		missingPublishersSellerAfterSelectHooks = append(missingPublishersSellerAfterSelectHooks, missingPublishersSellerHook)
		missingPublishersSellerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		missingPublishersSellerBeforeInsertMu.Lock()
		missingPublishersSellerBeforeInsertHooks = append(missingPublishersSellerBeforeInsertHooks, missingPublishersSellerHook)
		missingPublishersSellerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		missingPublishersSellerAfterInsertMu.Lock()
		missingPublishersSellerAfterInsertHooks = append(missingPublishersSellerAfterInsertHooks, missingPublishersSellerHook)
		missingPublishersSellerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		missingPublishersSellerBeforeUpdateMu.Lock()
		missingPublishersSellerBeforeUpdateHooks = append(missingPublishersSellerBeforeUpdateHooks, missingPublishersSellerHook)
		missingPublishersSellerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		missingPublishersSellerAfterUpdateMu.Lock()
		missingPublishersSellerAfterUpdateHooks = append(missingPublishersSellerAfterUpdateHooks, missingPublishersSellerHook)
		missingPublishersSellerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		missingPublishersSellerBeforeDeleteMu.Lock()
		missingPublishersSellerBeforeDeleteHooks = append(missingPublishersSellerBeforeDeleteHooks, missingPublishersSellerHook)
		missingPublishersSellerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		missingPublishersSellerAfterDeleteMu.Lock()
		missingPublishersSellerAfterDeleteHooks = append(missingPublishersSellerAfterDeleteHooks, missingPublishersSellerHook)
		missingPublishersSellerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		missingPublishersSellerBeforeUpsertMu.Lock()
		missingPublishersSellerBeforeUpsertHooks = append(missingPublishersSellerBeforeUpsertHooks, missingPublishersSellerHook)
		missingPublishersSellerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		missingPublishersSellerAfterUpsertMu.Lock()
		missingPublishersSellerAfterUpsertHooks = append(missingPublishersSellerAfterUpsertHooks, missingPublishersSellerHook)
		missingPublishersSellerAfterUpsertMu.Unlock()
	}
}

// One returns a single missingPublishersSeller record from the query.
func (q missingPublishersSellerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MissingPublishersSeller, error) {
	o := &MissingPublishersSeller{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for missing_publishers_sellers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MissingPublishersSeller records from the query.
func (q missingPublishersSellerQuery) All(ctx context.Context, exec boil.ContextExecutor) (MissingPublishersSellerSlice, error) {
	var o []*MissingPublishersSeller

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MissingPublishersSeller slice")
	}

	if len(missingPublishersSellerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MissingPublishersSeller records in the query.
func (q missingPublishersSellerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count missing_publishers_sellers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q missingPublishersSellerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if missing_publishers_sellers exists")
	}

	return count > 0, nil
}

// MissingPublishersSellers retrieves all the records using an executor.
func MissingPublishersSellers(mods ...qm.QueryMod) missingPublishersSellerQuery {
	mods = append(mods, qm.From("\"missing_publishers_sellers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"missing_publishers_sellers\".*"})
	}

	return missingPublishersSellerQuery{q}
}

// FindMissingPublishersSeller retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMissingPublishersSeller(ctx context.Context, exec boil.ContextExecutor, name string, selectCols ...string) (*MissingPublishersSeller, error) {
	missingPublishersSellerObj := &MissingPublishersSeller{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"missing_publishers_sellers\" where \"name\"=$1", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(ctx, exec, missingPublishersSellerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from missing_publishers_sellers")
	}

	if err = missingPublishersSellerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return missingPublishersSellerObj, err
	}

	return missingPublishersSellerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MissingPublishersSeller) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no missing_publishers_sellers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(missingPublishersSellerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	missingPublishersSellerInsertCacheMut.RLock()
	cache, cached := missingPublishersSellerInsertCache[key]
	missingPublishersSellerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			missingPublishersSellerAllColumns,
			missingPublishersSellerColumnsWithDefault,
			missingPublishersSellerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(missingPublishersSellerType, missingPublishersSellerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(missingPublishersSellerType, missingPublishersSellerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"missing_publishers_sellers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"missing_publishers_sellers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into missing_publishers_sellers")
	}

	if !cached {
		missingPublishersSellerInsertCacheMut.Lock()
		missingPublishersSellerInsertCache[key] = cache
		missingPublishersSellerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MissingPublishersSeller.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MissingPublishersSeller) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	missingPublishersSellerUpdateCacheMut.RLock()
	cache, cached := missingPublishersSellerUpdateCache[key]
	missingPublishersSellerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			missingPublishersSellerAllColumns,
			missingPublishersSellerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update missing_publishers_sellers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"missing_publishers_sellers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, missingPublishersSellerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(missingPublishersSellerType, missingPublishersSellerMapping, append(wl, missingPublishersSellerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update missing_publishers_sellers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for missing_publishers_sellers")
	}

	if !cached {
		missingPublishersSellerUpdateCacheMut.Lock()
		missingPublishersSellerUpdateCache[key] = cache
		missingPublishersSellerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q missingPublishersSellerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for missing_publishers_sellers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for missing_publishers_sellers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MissingPublishersSellerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missingPublishersSellerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"missing_publishers_sellers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, missingPublishersSellerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in missingPublishersSeller slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all missingPublishersSeller")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MissingPublishersSeller) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no missing_publishers_sellers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(missingPublishersSellerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	missingPublishersSellerUpsertCacheMut.RLock()
	cache, cached := missingPublishersSellerUpsertCache[key]
	missingPublishersSellerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			missingPublishersSellerAllColumns,
			missingPublishersSellerColumnsWithDefault,
			missingPublishersSellerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			missingPublishersSellerAllColumns,
			missingPublishersSellerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert missing_publishers_sellers, could not build update column list")
		}

		ret := strmangle.SetComplement(missingPublishersSellerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(missingPublishersSellerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert missing_publishers_sellers, could not build conflict column list")
			}

			conflict = make([]string, len(missingPublishersSellerPrimaryKeyColumns))
			copy(conflict, missingPublishersSellerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"missing_publishers_sellers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(missingPublishersSellerType, missingPublishersSellerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(missingPublishersSellerType, missingPublishersSellerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert missing_publishers_sellers")
	}

	if !cached {
		missingPublishersSellerUpsertCacheMut.Lock()
		missingPublishersSellerUpsertCache[key] = cache
		missingPublishersSellerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MissingPublishersSeller record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MissingPublishersSeller) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MissingPublishersSeller provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), missingPublishersSellerPrimaryKeyMapping)
	sql := "DELETE FROM \"missing_publishers_sellers\" WHERE \"name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from missing_publishers_sellers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for missing_publishers_sellers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q missingPublishersSellerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no missingPublishersSellerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from missing_publishers_sellers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for missing_publishers_sellers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MissingPublishersSellerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(missingPublishersSellerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missingPublishersSellerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"missing_publishers_sellers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, missingPublishersSellerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from missingPublishersSeller slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for missing_publishers_sellers")
	}

	if len(missingPublishersSellerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MissingPublishersSeller) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMissingPublishersSeller(ctx, exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MissingPublishersSellerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MissingPublishersSellerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missingPublishersSellerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"missing_publishers_sellers\".* FROM \"missing_publishers_sellers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, missingPublishersSellerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MissingPublishersSellerSlice")
	}

	*o = slice

	return nil
}

// MissingPublishersSellerExists checks if the MissingPublishersSeller row exists.
func MissingPublishersSellerExists(ctx context.Context, exec boil.ContextExecutor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"missing_publishers_sellers\" where \"name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, name)
	}
	row := exec.QueryRowContext(ctx, sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if missing_publishers_sellers exists")
	}

	return exists, nil
}

// Exists checks if the MissingPublishersSeller row exists.
func (o *MissingPublishersSeller) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MissingPublishersSellerExists(ctx, exec, o.Name)
}
