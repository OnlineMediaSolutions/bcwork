// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPublisherDailies(t *testing.T) {
	t.Parallel()

	query := PublisherDailies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPublisherDailiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherDailiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PublisherDailies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherDailiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherDailySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherDailiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PublisherDailyExists(ctx, tx, o.Time, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType)
	if err != nil {
		t.Errorf("Unable to check if PublisherDaily exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublisherDailyExists to return true, but got false.")
	}
}

func testPublisherDailiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	publisherDailyFound, err := FindPublisherDaily(ctx, tx, o.Time, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType)
	if err != nil {
		t.Error(err)
	}

	if publisherDailyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPublisherDailiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PublisherDailies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPublisherDailiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PublisherDailies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublisherDailiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherDailyOne := &PublisherDaily{}
	publisherDailyTwo := &PublisherDaily{}
	if err = randomize.Struct(seed, publisherDailyOne, publisherDailyDBTypes, false, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherDailyTwo, publisherDailyDBTypes, false, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherDailyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherDailyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherDailies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublisherDailiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publisherDailyOne := &PublisherDaily{}
	publisherDailyTwo := &PublisherDaily{}
	if err = randomize.Struct(seed, publisherDailyOne, publisherDailyDBTypes, false, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherDailyTwo, publisherDailyDBTypes, false, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherDailyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherDailyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func publisherDailyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func publisherDailyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func publisherDailyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func publisherDailyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func publisherDailyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func publisherDailyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func publisherDailyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func publisherDailyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func publisherDailyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDaily) error {
	*o = PublisherDaily{}
	return nil
}

func testPublisherDailiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PublisherDaily{}
	o := &PublisherDaily{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PublisherDaily object: %s", err)
	}

	AddPublisherDailyHook(boil.BeforeInsertHook, publisherDailyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	publisherDailyBeforeInsertHooks = []PublisherDailyHook{}

	AddPublisherDailyHook(boil.AfterInsertHook, publisherDailyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	publisherDailyAfterInsertHooks = []PublisherDailyHook{}

	AddPublisherDailyHook(boil.AfterSelectHook, publisherDailyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	publisherDailyAfterSelectHooks = []PublisherDailyHook{}

	AddPublisherDailyHook(boil.BeforeUpdateHook, publisherDailyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	publisherDailyBeforeUpdateHooks = []PublisherDailyHook{}

	AddPublisherDailyHook(boil.AfterUpdateHook, publisherDailyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	publisherDailyAfterUpdateHooks = []PublisherDailyHook{}

	AddPublisherDailyHook(boil.BeforeDeleteHook, publisherDailyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	publisherDailyBeforeDeleteHooks = []PublisherDailyHook{}

	AddPublisherDailyHook(boil.AfterDeleteHook, publisherDailyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	publisherDailyAfterDeleteHooks = []PublisherDailyHook{}

	AddPublisherDailyHook(boil.BeforeUpsertHook, publisherDailyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	publisherDailyBeforeUpsertHooks = []PublisherDailyHook{}

	AddPublisherDailyHook(boil.AfterUpsertHook, publisherDailyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	publisherDailyAfterUpsertHooks = []PublisherDailyHook{}
}

func testPublisherDailiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherDailiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(publisherDailyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherDailiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherDailiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherDailySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherDailiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherDailies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publisherDailyDBTypes = map[string]string{`Time`: `timestamp without time zone`, `PublisherID`: `character varying`, `Domain`: `character varying`, `Os`: `character varying`, `Country`: `character varying`, `DeviceType`: `character varying`, `BidRequests`: `bigint`, `BidResponses`: `bigint`, `BidPriceCount`: `bigint`, `BidPriceTotal`: `double precision`, `PublisherImpressions`: `bigint`, `DemandImpressions`: `bigint`, `MissedOpportunities`: `bigint`, `SupplyTotal`: `double precision`, `DemandTotal`: `double precision`, `DemandPartnerFee`: `double precision`}
	_                     = bytes.MinRead
)

func testPublisherDailiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(publisherDailyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(publisherDailyAllColumns) == len(publisherDailyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPublisherDailiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publisherDailyAllColumns) == len(publisherDailyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDaily{}
	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherDailyDBTypes, true, publisherDailyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publisherDailyAllColumns, publisherDailyPrimaryKeyColumns) {
		fields = publisherDailyAllColumns
	} else {
		fields = strmangle.SetComplement(
			publisherDailyAllColumns,
			publisherDailyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PublisherDailySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPublisherDailiesUpsert(t *testing.T) {
	t.Parallel()

	if len(publisherDailyAllColumns) == len(publisherDailyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PublisherDaily{}
	if err = randomize.Struct(seed, &o, publisherDailyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherDaily: %s", err)
	}

	count, err := PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, publisherDailyDBTypes, false, publisherDailyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherDaily struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherDaily: %s", err)
	}

	count, err = PublisherDailies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
