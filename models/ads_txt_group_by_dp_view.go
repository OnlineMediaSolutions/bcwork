// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AdsTXTGroupByDPView is an object representing the database table.
type AdsTXTGroupByDPView struct {
	ID                        null.Int          `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	PublisherID               null.String       `boil:"publisher_id" json:"publisher_id,omitempty" toml:"publisher_id" yaml:"publisher_id,omitempty"`
	Domain                    null.String       `boil:"domain" json:"domain,omitempty" toml:"domain" yaml:"domain,omitempty"`
	DomainStatus              null.String       `boil:"domain_status" json:"domain_status,omitempty" toml:"domain_status" yaml:"domain_status,omitempty"`
	DemandPartnerID           null.String       `boil:"demand_partner_id" json:"demand_partner_id,omitempty" toml:"demand_partner_id" yaml:"demand_partner_id,omitempty"`
	DemandPartnerName         null.String       `boil:"demand_partner_name" json:"demand_partner_name,omitempty" toml:"demand_partner_name" yaml:"demand_partner_name,omitempty"`
	DemandPartnerConnectionID null.Int          `boil:"demand_partner_connection_id" json:"demand_partner_connection_id,omitempty" toml:"demand_partner_connection_id" yaml:"demand_partner_connection_id,omitempty"`
	MediaType                 types.StringArray `boil:"media_type" json:"media_type,omitempty" toml:"media_type" yaml:"media_type,omitempty"`
	DemandPartnerNameExtended null.String       `boil:"demand_partner_name_extended" json:"demand_partner_name_extended,omitempty" toml:"demand_partner_name_extended" yaml:"demand_partner_name_extended,omitempty"`
	DemandManagerID           null.Int          `boil:"demand_manager_id" json:"demand_manager_id,omitempty" toml:"demand_manager_id" yaml:"demand_manager_id,omitempty"`
	DemandStatus              null.String       `boil:"demand_status" json:"demand_status,omitempty" toml:"demand_status" yaml:"demand_status,omitempty"`
	Status                    null.String       `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	IsApprovalNeeded          null.Bool         `boil:"is_approval_needed" json:"is_approval_needed,omitempty" toml:"is_approval_needed" yaml:"is_approval_needed,omitempty"`
	IsRequired                null.Bool         `boil:"is_required" json:"is_required,omitempty" toml:"is_required" yaml:"is_required,omitempty"`
	IsDemandPartnerActive     null.Bool         `boil:"is_demand_partner_active" json:"is_demand_partner_active,omitempty" toml:"is_demand_partner_active" yaml:"is_demand_partner_active,omitempty"`
	AdsTXTLine                null.String       `boil:"ads_txt_line" json:"ads_txt_line,omitempty" toml:"ads_txt_line" yaml:"ads_txt_line,omitempty"`
	LastScannedAt             null.Time         `boil:"last_scanned_at" json:"last_scanned_at,omitempty" toml:"last_scanned_at" yaml:"last_scanned_at,omitempty"`
	ErrorMessage              null.String       `boil:"error_message" json:"error_message,omitempty" toml:"error_message" yaml:"error_message,omitempty"`
	PublisherName             null.String       `boil:"publisher_name" json:"publisher_name,omitempty" toml:"publisher_name" yaml:"publisher_name,omitempty"`
	AccountManagerID          null.String       `boil:"account_manager_id" json:"account_manager_id,omitempty" toml:"account_manager_id" yaml:"account_manager_id,omitempty"`
	CampaignManagerID         null.String       `boil:"campaign_manager_id" json:"campaign_manager_id,omitempty" toml:"campaign_manager_id" yaml:"campaign_manager_id,omitempty"`
	Added                     null.Int64        `boil:"added" json:"added,omitempty" toml:"added" yaml:"added,omitempty"`
	Total                     null.Int64        `boil:"total" json:"total,omitempty" toml:"total" yaml:"total,omitempty"`
	IsReadyToGoLive           null.Bool         `boil:"is_ready_to_go_live" json:"is_ready_to_go_live,omitempty" toml:"is_ready_to_go_live" yaml:"is_ready_to_go_live,omitempty"`
}

var AdsTXTGroupByDPViewColumns = struct {
	ID                        string
	PublisherID               string
	Domain                    string
	DomainStatus              string
	DemandPartnerID           string
	DemandPartnerName         string
	DemandPartnerConnectionID string
	MediaType                 string
	DemandPartnerNameExtended string
	DemandManagerID           string
	DemandStatus              string
	Status                    string
	IsApprovalNeeded          string
	IsRequired                string
	IsDemandPartnerActive     string
	AdsTXTLine                string
	LastScannedAt             string
	ErrorMessage              string
	PublisherName             string
	AccountManagerID          string
	CampaignManagerID         string
	Added                     string
	Total                     string
	IsReadyToGoLive           string
}{
	ID:                        "id",
	PublisherID:               "publisher_id",
	Domain:                    "domain",
	DomainStatus:              "domain_status",
	DemandPartnerID:           "demand_partner_id",
	DemandPartnerName:         "demand_partner_name",
	DemandPartnerConnectionID: "demand_partner_connection_id",
	MediaType:                 "media_type",
	DemandPartnerNameExtended: "demand_partner_name_extended",
	DemandManagerID:           "demand_manager_id",
	DemandStatus:              "demand_status",
	Status:                    "status",
	IsApprovalNeeded:          "is_approval_needed",
	IsRequired:                "is_required",
	IsDemandPartnerActive:     "is_demand_partner_active",
	AdsTXTLine:                "ads_txt_line",
	LastScannedAt:             "last_scanned_at",
	ErrorMessage:              "error_message",
	PublisherName:             "publisher_name",
	AccountManagerID:          "account_manager_id",
	CampaignManagerID:         "campaign_manager_id",
	Added:                     "added",
	Total:                     "total",
	IsReadyToGoLive:           "is_ready_to_go_live",
}

var AdsTXTGroupByDPViewTableColumns = struct {
	ID                        string
	PublisherID               string
	Domain                    string
	DomainStatus              string
	DemandPartnerID           string
	DemandPartnerName         string
	DemandPartnerConnectionID string
	MediaType                 string
	DemandPartnerNameExtended string
	DemandManagerID           string
	DemandStatus              string
	Status                    string
	IsApprovalNeeded          string
	IsRequired                string
	IsDemandPartnerActive     string
	AdsTXTLine                string
	LastScannedAt             string
	ErrorMessage              string
	PublisherName             string
	AccountManagerID          string
	CampaignManagerID         string
	Added                     string
	Total                     string
	IsReadyToGoLive           string
}{
	ID:                        "ads_txt_group_by_dp_view.id",
	PublisherID:               "ads_txt_group_by_dp_view.publisher_id",
	Domain:                    "ads_txt_group_by_dp_view.domain",
	DomainStatus:              "ads_txt_group_by_dp_view.domain_status",
	DemandPartnerID:           "ads_txt_group_by_dp_view.demand_partner_id",
	DemandPartnerName:         "ads_txt_group_by_dp_view.demand_partner_name",
	DemandPartnerConnectionID: "ads_txt_group_by_dp_view.demand_partner_connection_id",
	MediaType:                 "ads_txt_group_by_dp_view.media_type",
	DemandPartnerNameExtended: "ads_txt_group_by_dp_view.demand_partner_name_extended",
	DemandManagerID:           "ads_txt_group_by_dp_view.demand_manager_id",
	DemandStatus:              "ads_txt_group_by_dp_view.demand_status",
	Status:                    "ads_txt_group_by_dp_view.status",
	IsApprovalNeeded:          "ads_txt_group_by_dp_view.is_approval_needed",
	IsRequired:                "ads_txt_group_by_dp_view.is_required",
	IsDemandPartnerActive:     "ads_txt_group_by_dp_view.is_demand_partner_active",
	AdsTXTLine:                "ads_txt_group_by_dp_view.ads_txt_line",
	LastScannedAt:             "ads_txt_group_by_dp_view.last_scanned_at",
	ErrorMessage:              "ads_txt_group_by_dp_view.error_message",
	PublisherName:             "ads_txt_group_by_dp_view.publisher_name",
	AccountManagerID:          "ads_txt_group_by_dp_view.account_manager_id",
	CampaignManagerID:         "ads_txt_group_by_dp_view.campaign_manager_id",
	Added:                     "ads_txt_group_by_dp_view.added",
	Total:                     "ads_txt_group_by_dp_view.total",
	IsReadyToGoLive:           "ads_txt_group_by_dp_view.is_ready_to_go_live",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AdsTXTGroupByDPViewWhere = struct {
	ID                        whereHelpernull_Int
	PublisherID               whereHelpernull_String
	Domain                    whereHelpernull_String
	DomainStatus              whereHelpernull_String
	DemandPartnerID           whereHelpernull_String
	DemandPartnerName         whereHelpernull_String
	DemandPartnerConnectionID whereHelpernull_Int
	MediaType                 whereHelpertypes_StringArray
	DemandPartnerNameExtended whereHelpernull_String
	DemandManagerID           whereHelpernull_Int
	DemandStatus              whereHelpernull_String
	Status                    whereHelpernull_String
	IsApprovalNeeded          whereHelpernull_Bool
	IsRequired                whereHelpernull_Bool
	IsDemandPartnerActive     whereHelpernull_Bool
	AdsTXTLine                whereHelpernull_String
	LastScannedAt             whereHelpernull_Time
	ErrorMessage              whereHelpernull_String
	PublisherName             whereHelpernull_String
	AccountManagerID          whereHelpernull_String
	CampaignManagerID         whereHelpernull_String
	Added                     whereHelpernull_Int64
	Total                     whereHelpernull_Int64
	IsReadyToGoLive           whereHelpernull_Bool
}{
	ID:                        whereHelpernull_Int{field: "\"ads_txt_group_by_dp_view\".\"id\""},
	PublisherID:               whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"publisher_id\""},
	Domain:                    whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"domain\""},
	DomainStatus:              whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"domain_status\""},
	DemandPartnerID:           whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_partner_id\""},
	DemandPartnerName:         whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_partner_name\""},
	DemandPartnerConnectionID: whereHelpernull_Int{field: "\"ads_txt_group_by_dp_view\".\"demand_partner_connection_id\""},
	MediaType:                 whereHelpertypes_StringArray{field: "\"ads_txt_group_by_dp_view\".\"media_type\""},
	DemandPartnerNameExtended: whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_partner_name_extended\""},
	DemandManagerID:           whereHelpernull_Int{field: "\"ads_txt_group_by_dp_view\".\"demand_manager_id\""},
	DemandStatus:              whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"demand_status\""},
	Status:                    whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"status\""},
	IsApprovalNeeded:          whereHelpernull_Bool{field: "\"ads_txt_group_by_dp_view\".\"is_approval_needed\""},
	IsRequired:                whereHelpernull_Bool{field: "\"ads_txt_group_by_dp_view\".\"is_required\""},
	IsDemandPartnerActive:     whereHelpernull_Bool{field: "\"ads_txt_group_by_dp_view\".\"is_demand_partner_active\""},
	AdsTXTLine:                whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"ads_txt_line\""},
	LastScannedAt:             whereHelpernull_Time{field: "\"ads_txt_group_by_dp_view\".\"last_scanned_at\""},
	ErrorMessage:              whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"error_message\""},
	PublisherName:             whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"publisher_name\""},
	AccountManagerID:          whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"account_manager_id\""},
	CampaignManagerID:         whereHelpernull_String{field: "\"ads_txt_group_by_dp_view\".\"campaign_manager_id\""},
	Added:                     whereHelpernull_Int64{field: "\"ads_txt_group_by_dp_view\".\"added\""},
	Total:                     whereHelpernull_Int64{field: "\"ads_txt_group_by_dp_view\".\"total\""},
	IsReadyToGoLive:           whereHelpernull_Bool{field: "\"ads_txt_group_by_dp_view\".\"is_ready_to_go_live\""},
}

var (
	adsTXTGroupByDPViewAllColumns            = []string{"id", "publisher_id", "domain", "domain_status", "demand_partner_id", "demand_partner_name", "demand_partner_connection_id", "media_type", "demand_partner_name_extended", "demand_manager_id", "demand_status", "status", "is_approval_needed", "is_required", "is_demand_partner_active", "ads_txt_line", "last_scanned_at", "error_message", "publisher_name", "account_manager_id", "campaign_manager_id", "added", "total", "is_ready_to_go_live"}
	adsTXTGroupByDPViewColumnsWithoutDefault = []string{}
	adsTXTGroupByDPViewColumnsWithDefault    = []string{"id", "publisher_id", "domain", "domain_status", "demand_partner_id", "demand_partner_name", "demand_partner_connection_id", "media_type", "demand_partner_name_extended", "demand_manager_id", "demand_status", "status", "is_approval_needed", "is_required", "is_demand_partner_active", "ads_txt_line", "last_scanned_at", "error_message", "publisher_name", "account_manager_id", "campaign_manager_id", "added", "total", "is_ready_to_go_live"}
	adsTXTGroupByDPViewPrimaryKeyColumns     = []string{}
	adsTXTGroupByDPViewGeneratedColumns      = []string{}
)

type (
	// AdsTXTGroupByDPViewSlice is an alias for a slice of pointers to AdsTXTGroupByDPView.
	// This should almost always be used instead of []AdsTXTGroupByDPView.
	AdsTXTGroupByDPViewSlice []*AdsTXTGroupByDPView
	// AdsTXTGroupByDPViewHook is the signature for custom AdsTXTGroupByDPView hook methods
	AdsTXTGroupByDPViewHook func(context.Context, boil.ContextExecutor, *AdsTXTGroupByDPView) error

	adsTXTGroupByDPViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adsTXTGroupByDPViewType           = reflect.TypeOf(&AdsTXTGroupByDPView{})
	adsTXTGroupByDPViewMapping        = queries.MakeStructMapping(adsTXTGroupByDPViewType)
	adsTXTGroupByDPViewInsertCacheMut sync.RWMutex
	adsTXTGroupByDPViewInsertCache    = make(map[string]insertCache)
	adsTXTGroupByDPViewUpdateCacheMut sync.RWMutex
	adsTXTGroupByDPViewUpdateCache    = make(map[string]updateCache)
	adsTXTGroupByDPViewUpsertCacheMut sync.RWMutex
	adsTXTGroupByDPViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var adsTXTGroupByDPViewAfterSelectMu sync.Mutex
var adsTXTGroupByDPViewAfterSelectHooks []AdsTXTGroupByDPViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdsTXTGroupByDPView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adsTXTGroupByDPViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdsTXTGroupByDPViewHook registers your hook function for all future operations.
func AddAdsTXTGroupByDPViewHook(hookPoint boil.HookPoint, adsTXTGroupByDPViewHook AdsTXTGroupByDPViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		adsTXTGroupByDPViewAfterSelectMu.Lock()
		adsTXTGroupByDPViewAfterSelectHooks = append(adsTXTGroupByDPViewAfterSelectHooks, adsTXTGroupByDPViewHook)
		adsTXTGroupByDPViewAfterSelectMu.Unlock()
	}
}

// One returns a single adsTXTGroupByDPView record from the query.
func (q adsTXTGroupByDPViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AdsTXTGroupByDPView, error) {
	o := &AdsTXTGroupByDPView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ads_txt_group_by_dp_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AdsTXTGroupByDPView records from the query.
func (q adsTXTGroupByDPViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdsTXTGroupByDPViewSlice, error) {
	var o []*AdsTXTGroupByDPView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdsTXTGroupByDPView slice")
	}

	if len(adsTXTGroupByDPViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AdsTXTGroupByDPView records in the query.
func (q adsTXTGroupByDPViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ads_txt_group_by_dp_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q adsTXTGroupByDPViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ads_txt_group_by_dp_view exists")
	}

	return count > 0, nil
}

// AdsTXTGroupByDPViews retrieves all the records using an executor.
func AdsTXTGroupByDPViews(mods ...qm.QueryMod) adsTXTGroupByDPViewQuery {
	mods = append(mods, qm.From("\"ads_txt_group_by_dp_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ads_txt_group_by_dp_view\".*"})
	}

	return adsTXTGroupByDPViewQuery{q}
}
