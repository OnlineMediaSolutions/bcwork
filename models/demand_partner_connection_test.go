// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDemandPartnerConnections(t *testing.T) {
	t.Parallel()

	query := DemandPartnerConnections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDemandPartnerConnectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandPartnerConnectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DemandPartnerConnections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandPartnerConnectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DemandPartnerConnectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandPartnerConnectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DemandPartnerConnectionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DemandPartnerConnection exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DemandPartnerConnectionExists to return true, but got false.")
	}
}

func testDemandPartnerConnectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	demandPartnerConnectionFound, err := FindDemandPartnerConnection(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if demandPartnerConnectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDemandPartnerConnectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DemandPartnerConnections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDemandPartnerConnectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DemandPartnerConnections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDemandPartnerConnectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	demandPartnerConnectionOne := &DemandPartnerConnection{}
	demandPartnerConnectionTwo := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, demandPartnerConnectionOne, demandPartnerConnectionDBTypes, false, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}
	if err = randomize.Struct(seed, demandPartnerConnectionTwo, demandPartnerConnectionDBTypes, false, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = demandPartnerConnectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = demandPartnerConnectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DemandPartnerConnections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDemandPartnerConnectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	demandPartnerConnectionOne := &DemandPartnerConnection{}
	demandPartnerConnectionTwo := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, demandPartnerConnectionOne, demandPartnerConnectionDBTypes, false, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}
	if err = randomize.Struct(seed, demandPartnerConnectionTwo, demandPartnerConnectionDBTypes, false, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = demandPartnerConnectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = demandPartnerConnectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func demandPartnerConnectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func demandPartnerConnectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func demandPartnerConnectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func demandPartnerConnectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func demandPartnerConnectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func demandPartnerConnectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func demandPartnerConnectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func demandPartnerConnectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func demandPartnerConnectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DemandPartnerConnection) error {
	*o = DemandPartnerConnection{}
	return nil
}

func testDemandPartnerConnectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DemandPartnerConnection{}
	o := &DemandPartnerConnection{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection object: %s", err)
	}

	AddDemandPartnerConnectionHook(boil.BeforeInsertHook, demandPartnerConnectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionBeforeInsertHooks = []DemandPartnerConnectionHook{}

	AddDemandPartnerConnectionHook(boil.AfterInsertHook, demandPartnerConnectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionAfterInsertHooks = []DemandPartnerConnectionHook{}

	AddDemandPartnerConnectionHook(boil.AfterSelectHook, demandPartnerConnectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionAfterSelectHooks = []DemandPartnerConnectionHook{}

	AddDemandPartnerConnectionHook(boil.BeforeUpdateHook, demandPartnerConnectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionBeforeUpdateHooks = []DemandPartnerConnectionHook{}

	AddDemandPartnerConnectionHook(boil.AfterUpdateHook, demandPartnerConnectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionAfterUpdateHooks = []DemandPartnerConnectionHook{}

	AddDemandPartnerConnectionHook(boil.BeforeDeleteHook, demandPartnerConnectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionBeforeDeleteHooks = []DemandPartnerConnectionHook{}

	AddDemandPartnerConnectionHook(boil.AfterDeleteHook, demandPartnerConnectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionAfterDeleteHooks = []DemandPartnerConnectionHook{}

	AddDemandPartnerConnectionHook(boil.BeforeUpsertHook, demandPartnerConnectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionBeforeUpsertHooks = []DemandPartnerConnectionHook{}

	AddDemandPartnerConnectionHook(boil.AfterUpsertHook, demandPartnerConnectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	demandPartnerConnectionAfterUpsertHooks = []DemandPartnerConnectionHook{}
}

func testDemandPartnerConnectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDemandPartnerConnectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(demandPartnerConnectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDemandPartnerConnectionToOneDpoUsingDemandPartner(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DemandPartnerConnection
	var foreign Dpo

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, demandPartnerConnectionDBTypes, false, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dpoDBTypes, false, dpoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dpo struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DemandPartnerID = foreign.DemandPartnerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DemandPartner().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DemandPartnerID != foreign.DemandPartnerID {
		t.Errorf("want: %v, got %v", foreign.DemandPartnerID, check.DemandPartnerID)
	}

	ranAfterSelectHook := false
	AddDpoHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Dpo) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DemandPartnerConnectionSlice{&local}
	if err = local.L.LoadDemandPartner(ctx, tx, false, (*[]*DemandPartnerConnection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DemandPartner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DemandPartner = nil
	if err = local.L.LoadDemandPartner(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DemandPartner == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDemandPartnerConnectionToOneSetOpDpoUsingDemandPartner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DemandPartnerConnection
	var b, c Dpo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, demandPartnerConnectionDBTypes, false, strmangle.SetComplement(demandPartnerConnectionPrimaryKeyColumns, demandPartnerConnectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dpoDBTypes, false, strmangle.SetComplement(dpoPrimaryKeyColumns, dpoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dpoDBTypes, false, strmangle.SetComplement(dpoPrimaryKeyColumns, dpoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dpo{&b, &c} {
		err = a.SetDemandPartner(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DemandPartner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DemandPartnerDemandPartnerConnections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DemandPartnerID != x.DemandPartnerID {
			t.Error("foreign key was wrong value", a.DemandPartnerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DemandPartnerID))
		reflect.Indirect(reflect.ValueOf(&a.DemandPartnerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DemandPartnerID != x.DemandPartnerID {
			t.Error("foreign key was wrong value", a.DemandPartnerID, x.DemandPartnerID)
		}
	}
}

func testDemandPartnerConnectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDemandPartnerConnectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DemandPartnerConnectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDemandPartnerConnectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DemandPartnerConnections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	demandPartnerConnectionDBTypes = map[string]string{`ID`: `integer`, `DemandPartnerID`: `character varying`, `PublisherAccount`: `character varying`, `IntegrationType`: `ARRAYcharacter varying`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Active`: `boolean`}
	_                              = bytes.MinRead
)

func testDemandPartnerConnectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(demandPartnerConnectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(demandPartnerConnectionAllColumns) == len(demandPartnerConnectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDemandPartnerConnectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(demandPartnerConnectionAllColumns) == len(demandPartnerConnectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DemandPartnerConnection{}
	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, demandPartnerConnectionDBTypes, true, demandPartnerConnectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(demandPartnerConnectionAllColumns, demandPartnerConnectionPrimaryKeyColumns) {
		fields = demandPartnerConnectionAllColumns
	} else {
		fields = strmangle.SetComplement(
			demandPartnerConnectionAllColumns,
			demandPartnerConnectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DemandPartnerConnectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDemandPartnerConnectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(demandPartnerConnectionAllColumns) == len(demandPartnerConnectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DemandPartnerConnection{}
	if err = randomize.Struct(seed, &o, demandPartnerConnectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DemandPartnerConnection: %s", err)
	}

	count, err := DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, demandPartnerConnectionDBTypes, false, demandPartnerConnectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DemandPartnerConnection struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DemandPartnerConnection: %s", err)
	}

	count, err = DemandPartnerConnections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
