// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BidCashing is an object representing the database table.
type BidCashing struct {
	Publisher       string      `boil:"publisher" json:"publisher" toml:"publisher" yaml:"publisher"`
	Domain          string      `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Country         null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Device          null.String `boil:"device" json:"device,omitempty" toml:"device" yaml:"device,omitempty"`
	BidCashing      int16       `boil:"bid_cashing" json:"bid_cashing" toml:"bid_cashing" yaml:"bid_cashing"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	RuleID          string      `boil:"rule_id" json:"rule_id" toml:"rule_id" yaml:"rule_id"`
	DemandPartnerID string      `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	Browser         null.String `boil:"browser" json:"browser,omitempty" toml:"browser" yaml:"browser,omitempty"`
	Os              null.String `boil:"os" json:"os,omitempty" toml:"os" yaml:"os,omitempty"`
	PlacementType   null.String `boil:"placement_type" json:"placement_type,omitempty" toml:"placement_type" yaml:"placement_type,omitempty"`

	R *bidCashingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bidCashingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BidCashingColumns = struct {
	Publisher       string
	Domain          string
	Country         string
	Device          string
	BidCashing      string
	CreatedAt       string
	UpdatedAt       string
	RuleID          string
	DemandPartnerID string
	Browser         string
	Os              string
	PlacementType   string
}{
	Publisher:       "publisher",
	Domain:          "domain",
	Country:         "country",
	Device:          "device",
	BidCashing:      "bid_cashing",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	RuleID:          "rule_id",
	DemandPartnerID: "demand_partner_id",
	Browser:         "browser",
	Os:              "os",
	PlacementType:   "placement_type",
}

var BidCashingTableColumns = struct {
	Publisher       string
	Domain          string
	Country         string
	Device          string
	BidCashing      string
	CreatedAt       string
	UpdatedAt       string
	RuleID          string
	DemandPartnerID string
	Browser         string
	Os              string
	PlacementType   string
}{
	Publisher:       "bid_cashing.publisher",
	Domain:          "bid_cashing.domain",
	Country:         "bid_cashing.country",
	Device:          "bid_cashing.device",
	BidCashing:      "bid_cashing.bid_cashing",
	CreatedAt:       "bid_cashing.created_at",
	UpdatedAt:       "bid_cashing.updated_at",
	RuleID:          "bid_cashing.rule_id",
	DemandPartnerID: "bid_cashing.demand_partner_id",
	Browser:         "bid_cashing.browser",
	Os:              "bid_cashing.os",
	PlacementType:   "bid_cashing.placement_type",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BidCashingWhere = struct {
	Publisher       whereHelperstring
	Domain          whereHelperstring
	Country         whereHelpernull_String
	Device          whereHelpernull_String
	BidCashing      whereHelperint16
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpernull_Time
	RuleID          whereHelperstring
	DemandPartnerID whereHelperstring
	Browser         whereHelpernull_String
	Os              whereHelpernull_String
	PlacementType   whereHelpernull_String
}{
	Publisher:       whereHelperstring{field: "\"bid_cashing\".\"publisher\""},
	Domain:          whereHelperstring{field: "\"bid_cashing\".\"domain\""},
	Country:         whereHelpernull_String{field: "\"bid_cashing\".\"country\""},
	Device:          whereHelpernull_String{field: "\"bid_cashing\".\"device\""},
	BidCashing:      whereHelperint16{field: "\"bid_cashing\".\"bid_cashing\""},
	CreatedAt:       whereHelpertime_Time{field: "\"bid_cashing\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"bid_cashing\".\"updated_at\""},
	RuleID:          whereHelperstring{field: "\"bid_cashing\".\"rule_id\""},
	DemandPartnerID: whereHelperstring{field: "\"bid_cashing\".\"demand_partner_id\""},
	Browser:         whereHelpernull_String{field: "\"bid_cashing\".\"browser\""},
	Os:              whereHelpernull_String{field: "\"bid_cashing\".\"os\""},
	PlacementType:   whereHelpernull_String{field: "\"bid_cashing\".\"placement_type\""},
}

// BidCashingRels is where relationship names are stored.
var BidCashingRels = struct {
	BidCashingPublisher string
}{
	BidCashingPublisher: "BidCashingPublisher",
}

// bidCashingR is where relationships are stored.
type bidCashingR struct {
	BidCashingPublisher *Publisher `boil:"BidCashingPublisher" json:"BidCashingPublisher" toml:"BidCashingPublisher" yaml:"BidCashingPublisher"`
}

// NewStruct creates a new relationship struct
func (*bidCashingR) NewStruct() *bidCashingR {
	return &bidCashingR{}
}

func (r *bidCashingR) GetBidCashingPublisher() *Publisher {
	if r == nil {
		return nil
	}
	return r.BidCashingPublisher
}

// bidCashingL is where Load methods for each relationship are stored.
type bidCashingL struct{}

var (
	bidCashingAllColumns            = []string{"publisher", "domain", "country", "device", "bid_cashing", "created_at", "updated_at", "rule_id", "demand_partner_id", "browser", "os", "placement_type"}
	bidCashingColumnsWithoutDefault = []string{"publisher", "domain", "bid_cashing", "created_at", "rule_id"}
	bidCashingColumnsWithDefault    = []string{"country", "device", "updated_at", "demand_partner_id", "browser", "os", "placement_type"}
	bidCashingPrimaryKeyColumns     = []string{"rule_id"}
	bidCashingGeneratedColumns      = []string{}
)

type (
	// BidCashingSlice is an alias for a slice of pointers to BidCashing.
	// This should almost always be used instead of []BidCashing.
	BidCashingSlice []*BidCashing
	// BidCashingHook is the signature for custom BidCashing hook methods
	BidCashingHook func(context.Context, boil.ContextExecutor, *BidCashing) error

	bidCashingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bidCashingType                 = reflect.TypeOf(&BidCashing{})
	bidCashingMapping              = queries.MakeStructMapping(bidCashingType)
	bidCashingPrimaryKeyMapping, _ = queries.BindMapping(bidCashingType, bidCashingMapping, bidCashingPrimaryKeyColumns)
	bidCashingInsertCacheMut       sync.RWMutex
	bidCashingInsertCache          = make(map[string]insertCache)
	bidCashingUpdateCacheMut       sync.RWMutex
	bidCashingUpdateCache          = make(map[string]updateCache)
	bidCashingUpsertCacheMut       sync.RWMutex
	bidCashingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bidCashingAfterSelectMu sync.Mutex
var bidCashingAfterSelectHooks []BidCashingHook

var bidCashingBeforeInsertMu sync.Mutex
var bidCashingBeforeInsertHooks []BidCashingHook
var bidCashingAfterInsertMu sync.Mutex
var bidCashingAfterInsertHooks []BidCashingHook

var bidCashingBeforeUpdateMu sync.Mutex
var bidCashingBeforeUpdateHooks []BidCashingHook
var bidCashingAfterUpdateMu sync.Mutex
var bidCashingAfterUpdateHooks []BidCashingHook

var bidCashingBeforeDeleteMu sync.Mutex
var bidCashingBeforeDeleteHooks []BidCashingHook
var bidCashingAfterDeleteMu sync.Mutex
var bidCashingAfterDeleteHooks []BidCashingHook

var bidCashingBeforeUpsertMu sync.Mutex
var bidCashingBeforeUpsertHooks []BidCashingHook
var bidCashingAfterUpsertMu sync.Mutex
var bidCashingAfterUpsertHooks []BidCashingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BidCashing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BidCashing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BidCashing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BidCashing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BidCashing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BidCashing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BidCashing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BidCashing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BidCashing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bidCashingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBidCashingHook registers your hook function for all future operations.
func AddBidCashingHook(hookPoint boil.HookPoint, bidCashingHook BidCashingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bidCashingAfterSelectMu.Lock()
		bidCashingAfterSelectHooks = append(bidCashingAfterSelectHooks, bidCashingHook)
		bidCashingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bidCashingBeforeInsertMu.Lock()
		bidCashingBeforeInsertHooks = append(bidCashingBeforeInsertHooks, bidCashingHook)
		bidCashingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bidCashingAfterInsertMu.Lock()
		bidCashingAfterInsertHooks = append(bidCashingAfterInsertHooks, bidCashingHook)
		bidCashingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bidCashingBeforeUpdateMu.Lock()
		bidCashingBeforeUpdateHooks = append(bidCashingBeforeUpdateHooks, bidCashingHook)
		bidCashingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bidCashingAfterUpdateMu.Lock()
		bidCashingAfterUpdateHooks = append(bidCashingAfterUpdateHooks, bidCashingHook)
		bidCashingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bidCashingBeforeDeleteMu.Lock()
		bidCashingBeforeDeleteHooks = append(bidCashingBeforeDeleteHooks, bidCashingHook)
		bidCashingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bidCashingAfterDeleteMu.Lock()
		bidCashingAfterDeleteHooks = append(bidCashingAfterDeleteHooks, bidCashingHook)
		bidCashingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bidCashingBeforeUpsertMu.Lock()
		bidCashingBeforeUpsertHooks = append(bidCashingBeforeUpsertHooks, bidCashingHook)
		bidCashingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bidCashingAfterUpsertMu.Lock()
		bidCashingAfterUpsertHooks = append(bidCashingAfterUpsertHooks, bidCashingHook)
		bidCashingAfterUpsertMu.Unlock()
	}
}

// One returns a single bidCashing record from the query.
func (q bidCashingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BidCashing, error) {
	o := &BidCashing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bid_cashing")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BidCashing records from the query.
func (q bidCashingQuery) All(ctx context.Context, exec boil.ContextExecutor) (BidCashingSlice, error) {
	var o []*BidCashing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BidCashing slice")
	}

	if len(bidCashingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BidCashing records in the query.
func (q bidCashingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bid_cashing rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bidCashingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bid_cashing exists")
	}

	return count > 0, nil
}

// BidCashingPublisher pointed to by the foreign key.
func (o *BidCashing) BidCashingPublisher(mods ...qm.QueryMod) publisherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"publisher_id\" = ?", o.Publisher),
	}

	queryMods = append(queryMods, mods...)

	return Publishers(queryMods...)
}

// LoadBidCashingPublisher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bidCashingL) LoadBidCashingPublisher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBidCashing interface{}, mods queries.Applicator) error {
	var slice []*BidCashing
	var object *BidCashing

	if singular {
		var ok bool
		object, ok = maybeBidCashing.(*BidCashing)
		if !ok {
			object = new(BidCashing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBidCashing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBidCashing))
			}
		}
	} else {
		s, ok := maybeBidCashing.(*[]*BidCashing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBidCashing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBidCashing))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bidCashingR{}
		}
		args[object.Publisher] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bidCashingR{}
			}

			args[obj.Publisher] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`publisher`),
		qm.WhereIn(`publisher.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Publisher")
	}

	var resultSlice []*Publisher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Publisher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for publisher")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publisher")
	}

	if len(publisherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BidCashingPublisher = foreign
		if foreign.R == nil {
			foreign.R = &publisherR{}
		}
		foreign.R.BidCashings = append(foreign.R.BidCashings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Publisher == foreign.PublisherID {
				local.R.BidCashingPublisher = foreign
				if foreign.R == nil {
					foreign.R = &publisherR{}
				}
				foreign.R.BidCashings = append(foreign.R.BidCashings, local)
				break
			}
		}
	}

	return nil
}

// SetBidCashingPublisher of the bidCashing to the related item.
// Sets o.R.BidCashingPublisher to related.
// Adds o to related.R.BidCashings.
func (o *BidCashing) SetBidCashingPublisher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Publisher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bid_cashing\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"publisher"}),
		strmangle.WhereClause("\"", "\"", 2, bidCashingPrimaryKeyColumns),
	)
	values := []interface{}{related.PublisherID, o.RuleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Publisher = related.PublisherID
	if o.R == nil {
		o.R = &bidCashingR{
			BidCashingPublisher: related,
		}
	} else {
		o.R.BidCashingPublisher = related
	}

	if related.R == nil {
		related.R = &publisherR{
			BidCashings: BidCashingSlice{o},
		}
	} else {
		related.R.BidCashings = append(related.R.BidCashings, o)
	}

	return nil
}

// BidCashings retrieves all the records using an executor.
func BidCashings(mods ...qm.QueryMod) bidCashingQuery {
	mods = append(mods, qm.From("\"bid_cashing\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bid_cashing\".*"})
	}

	return bidCashingQuery{q}
}

// FindBidCashing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBidCashing(ctx context.Context, exec boil.ContextExecutor, ruleID string, selectCols ...string) (*BidCashing, error) {
	bidCashingObj := &BidCashing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bid_cashing\" where \"rule_id\"=$1", sel,
	)

	q := queries.Raw(query, ruleID)

	err := q.Bind(ctx, exec, bidCashingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bid_cashing")
	}

	if err = bidCashingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bidCashingObj, err
	}

	return bidCashingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BidCashing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bid_cashing provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bidCashingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bidCashingInsertCacheMut.RLock()
	cache, cached := bidCashingInsertCache[key]
	bidCashingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bidCashingAllColumns,
			bidCashingColumnsWithDefault,
			bidCashingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bidCashingType, bidCashingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bidCashingType, bidCashingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bid_cashing\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bid_cashing\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bid_cashing")
	}

	if !cached {
		bidCashingInsertCacheMut.Lock()
		bidCashingInsertCache[key] = cache
		bidCashingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BidCashing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BidCashing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bidCashingUpdateCacheMut.RLock()
	cache, cached := bidCashingUpdateCache[key]
	bidCashingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bidCashingAllColumns,
			bidCashingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bid_cashing, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bid_cashing\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bidCashingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bidCashingType, bidCashingMapping, append(wl, bidCashingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bid_cashing row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bid_cashing")
	}

	if !cached {
		bidCashingUpdateCacheMut.Lock()
		bidCashingUpdateCache[key] = cache
		bidCashingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bidCashingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bid_cashing")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bid_cashing")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BidCashingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bidCashingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bid_cashing\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bidCashingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bidCashing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bidCashing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BidCashing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no bid_cashing provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bidCashingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bidCashingUpsertCacheMut.RLock()
	cache, cached := bidCashingUpsertCache[key]
	bidCashingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bidCashingAllColumns,
			bidCashingColumnsWithDefault,
			bidCashingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bidCashingAllColumns,
			bidCashingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bid_cashing, could not build update column list")
		}

		ret := strmangle.SetComplement(bidCashingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(bidCashingPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert bid_cashing, could not build conflict column list")
			}

			conflict = make([]string, len(bidCashingPrimaryKeyColumns))
			copy(conflict, bidCashingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bid_cashing\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(bidCashingType, bidCashingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bidCashingType, bidCashingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bid_cashing")
	}

	if !cached {
		bidCashingUpsertCacheMut.Lock()
		bidCashingUpsertCache[key] = cache
		bidCashingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BidCashing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BidCashing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BidCashing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bidCashingPrimaryKeyMapping)
	sql := "DELETE FROM \"bid_cashing\" WHERE \"rule_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bid_cashing")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bid_cashing")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bidCashingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bidCashingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bid_cashing")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bid_cashing")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BidCashingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bidCashingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bidCashingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bid_cashing\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bidCashingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bidCashing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bid_cashing")
	}

	if len(bidCashingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BidCashing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBidCashing(ctx, exec, o.RuleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BidCashingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BidCashingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bidCashingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bid_cashing\".* FROM \"bid_cashing\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bidCashingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BidCashingSlice")
	}

	*o = slice

	return nil
}

// BidCashingExists checks if the BidCashing row exists.
func BidCashingExists(ctx context.Context, exec boil.ContextExecutor, ruleID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bid_cashing\" where \"rule_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ruleID)
	}
	row := exec.QueryRowContext(ctx, sql, ruleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bid_cashing exists")
	}

	return exists, nil
}

// Exists checks if the BidCashing row exists.
func (o *BidCashing) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BidCashingExists(ctx, exec, o.RuleID)
}
