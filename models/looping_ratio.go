// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LoopingRatio is an object representing the database table.
type LoopingRatio struct {
	Publisher       string      `boil:"publisher" json:"publisher" toml:"publisher" yaml:"publisher"`
	Domain          string      `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Country         null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Device          null.String `boil:"device" json:"device,omitempty" toml:"device" yaml:"device,omitempty"`
	LoopingRatio    int16       `boil:"looping_ratio" json:"looping_ratio" toml:"looping_ratio" yaml:"looping_ratio"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	RuleID          string      `boil:"rule_id" json:"rule_id" toml:"rule_id" yaml:"rule_id"`
	DemandPartnerID string      `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	Browser         null.String `boil:"browser" json:"browser,omitempty" toml:"browser" yaml:"browser,omitempty"`
	Os              null.String `boil:"os" json:"os,omitempty" toml:"os" yaml:"os,omitempty"`
	PlacementType   null.String `boil:"placement_type" json:"placement_type,omitempty" toml:"placement_type" yaml:"placement_type,omitempty"`

	R *loopingRatioR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L loopingRatioL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LoopingRatioColumns = struct {
	Publisher       string
	Domain          string
	Country         string
	Device          string
	LoopingRatio    string
	CreatedAt       string
	UpdatedAt       string
	RuleID          string
	DemandPartnerID string
	Browser         string
	Os              string
	PlacementType   string
}{
	Publisher:       "publisher",
	Domain:          "domain",
	Country:         "country",
	Device:          "device",
	LoopingRatio:    "looping_ratio",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	RuleID:          "rule_id",
	DemandPartnerID: "demand_partner_id",
	Browser:         "browser",
	Os:              "os",
	PlacementType:   "placement_type",
}

var LoopingRatioTableColumns = struct {
	Publisher       string
	Domain          string
	Country         string
	Device          string
	LoopingRatio    string
	CreatedAt       string
	UpdatedAt       string
	RuleID          string
	DemandPartnerID string
	Browser         string
	Os              string
	PlacementType   string
}{
	Publisher:       "looping_ratio.publisher",
	Domain:          "looping_ratio.domain",
	Country:         "looping_ratio.country",
	Device:          "looping_ratio.device",
	LoopingRatio:    "looping_ratio.looping_ratio",
	CreatedAt:       "looping_ratio.created_at",
	UpdatedAt:       "looping_ratio.updated_at",
	RuleID:          "looping_ratio.rule_id",
	DemandPartnerID: "looping_ratio.demand_partner_id",
	Browser:         "looping_ratio.browser",
	Os:              "looping_ratio.os",
	PlacementType:   "looping_ratio.placement_type",
}

// Generated where

var LoopingRatioWhere = struct {
	Publisher       whereHelperstring
	Domain          whereHelperstring
	Country         whereHelpernull_String
	Device          whereHelpernull_String
	LoopingRatio    whereHelperint16
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpernull_Time
	RuleID          whereHelperstring
	DemandPartnerID whereHelperstring
	Browser         whereHelpernull_String
	Os              whereHelpernull_String
	PlacementType   whereHelpernull_String
}{
	Publisher:       whereHelperstring{field: "\"looping_ratio\".\"publisher\""},
	Domain:          whereHelperstring{field: "\"looping_ratio\".\"domain\""},
	Country:         whereHelpernull_String{field: "\"looping_ratio\".\"country\""},
	Device:          whereHelpernull_String{field: "\"looping_ratio\".\"device\""},
	LoopingRatio:    whereHelperint16{field: "\"looping_ratio\".\"looping_ratio\""},
	CreatedAt:       whereHelpertime_Time{field: "\"looping_ratio\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"looping_ratio\".\"updated_at\""},
	RuleID:          whereHelperstring{field: "\"looping_ratio\".\"rule_id\""},
	DemandPartnerID: whereHelperstring{field: "\"looping_ratio\".\"demand_partner_id\""},
	Browser:         whereHelpernull_String{field: "\"looping_ratio\".\"browser\""},
	Os:              whereHelpernull_String{field: "\"looping_ratio\".\"os\""},
	PlacementType:   whereHelpernull_String{field: "\"looping_ratio\".\"placement_type\""},
}

// LoopingRatioRels is where relationship names are stored.
var LoopingRatioRels = struct {
	LoopingRatioPublisher string
}{
	LoopingRatioPublisher: "LoopingRatioPublisher",
}

// loopingRatioR is where relationships are stored.
type loopingRatioR struct {
	LoopingRatioPublisher *Publisher `boil:"LoopingRatioPublisher" json:"LoopingRatioPublisher" toml:"LoopingRatioPublisher" yaml:"LoopingRatioPublisher"`
}

// NewStruct creates a new relationship struct
func (*loopingRatioR) NewStruct() *loopingRatioR {
	return &loopingRatioR{}
}

func (r *loopingRatioR) GetLoopingRatioPublisher() *Publisher {
	if r == nil {
		return nil
	}
	return r.LoopingRatioPublisher
}

// loopingRatioL is where Load methods for each relationship are stored.
type loopingRatioL struct{}

var (
	loopingRatioAllColumns            = []string{"publisher", "domain", "country", "device", "looping_ratio", "created_at", "updated_at", "rule_id", "demand_partner_id", "browser", "os", "placement_type"}
	loopingRatioColumnsWithoutDefault = []string{"publisher", "domain", "looping_ratio", "created_at", "rule_id"}
	loopingRatioColumnsWithDefault    = []string{"country", "device", "updated_at", "demand_partner_id", "browser", "os", "placement_type"}
	loopingRatioPrimaryKeyColumns     = []string{"rule_id"}
	loopingRatioGeneratedColumns      = []string{}
)

type (
	// LoopingRatioSlice is an alias for a slice of pointers to LoopingRatio.
	// This should almost always be used instead of []LoopingRatio.
	LoopingRatioSlice []*LoopingRatio
	// LoopingRatioHook is the signature for custom LoopingRatio hook methods
	LoopingRatioHook func(context.Context, boil.ContextExecutor, *LoopingRatio) error

	loopingRatioQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	loopingRatioType                 = reflect.TypeOf(&LoopingRatio{})
	loopingRatioMapping              = queries.MakeStructMapping(loopingRatioType)
	loopingRatioPrimaryKeyMapping, _ = queries.BindMapping(loopingRatioType, loopingRatioMapping, loopingRatioPrimaryKeyColumns)
	loopingRatioInsertCacheMut       sync.RWMutex
	loopingRatioInsertCache          = make(map[string]insertCache)
	loopingRatioUpdateCacheMut       sync.RWMutex
	loopingRatioUpdateCache          = make(map[string]updateCache)
	loopingRatioUpsertCacheMut       sync.RWMutex
	loopingRatioUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var loopingRatioAfterSelectMu sync.Mutex
var loopingRatioAfterSelectHooks []LoopingRatioHook

var loopingRatioBeforeInsertMu sync.Mutex
var loopingRatioBeforeInsertHooks []LoopingRatioHook
var loopingRatioAfterInsertMu sync.Mutex
var loopingRatioAfterInsertHooks []LoopingRatioHook

var loopingRatioBeforeUpdateMu sync.Mutex
var loopingRatioBeforeUpdateHooks []LoopingRatioHook
var loopingRatioAfterUpdateMu sync.Mutex
var loopingRatioAfterUpdateHooks []LoopingRatioHook

var loopingRatioBeforeDeleteMu sync.Mutex
var loopingRatioBeforeDeleteHooks []LoopingRatioHook
var loopingRatioAfterDeleteMu sync.Mutex
var loopingRatioAfterDeleteHooks []LoopingRatioHook

var loopingRatioBeforeUpsertMu sync.Mutex
var loopingRatioBeforeUpsertHooks []LoopingRatioHook
var loopingRatioAfterUpsertMu sync.Mutex
var loopingRatioAfterUpsertHooks []LoopingRatioHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LoopingRatio) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LoopingRatio) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LoopingRatio) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LoopingRatio) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LoopingRatio) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LoopingRatio) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LoopingRatio) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LoopingRatio) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LoopingRatio) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loopingRatioAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLoopingRatioHook registers your hook function for all future operations.
func AddLoopingRatioHook(hookPoint boil.HookPoint, loopingRatioHook LoopingRatioHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		loopingRatioAfterSelectMu.Lock()
		loopingRatioAfterSelectHooks = append(loopingRatioAfterSelectHooks, loopingRatioHook)
		loopingRatioAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		loopingRatioBeforeInsertMu.Lock()
		loopingRatioBeforeInsertHooks = append(loopingRatioBeforeInsertHooks, loopingRatioHook)
		loopingRatioBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		loopingRatioAfterInsertMu.Lock()
		loopingRatioAfterInsertHooks = append(loopingRatioAfterInsertHooks, loopingRatioHook)
		loopingRatioAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		loopingRatioBeforeUpdateMu.Lock()
		loopingRatioBeforeUpdateHooks = append(loopingRatioBeforeUpdateHooks, loopingRatioHook)
		loopingRatioBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		loopingRatioAfterUpdateMu.Lock()
		loopingRatioAfterUpdateHooks = append(loopingRatioAfterUpdateHooks, loopingRatioHook)
		loopingRatioAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		loopingRatioBeforeDeleteMu.Lock()
		loopingRatioBeforeDeleteHooks = append(loopingRatioBeforeDeleteHooks, loopingRatioHook)
		loopingRatioBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		loopingRatioAfterDeleteMu.Lock()
		loopingRatioAfterDeleteHooks = append(loopingRatioAfterDeleteHooks, loopingRatioHook)
		loopingRatioAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		loopingRatioBeforeUpsertMu.Lock()
		loopingRatioBeforeUpsertHooks = append(loopingRatioBeforeUpsertHooks, loopingRatioHook)
		loopingRatioBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		loopingRatioAfterUpsertMu.Lock()
		loopingRatioAfterUpsertHooks = append(loopingRatioAfterUpsertHooks, loopingRatioHook)
		loopingRatioAfterUpsertMu.Unlock()
	}
}

// One returns a single loopingRatio record from the query.
func (q loopingRatioQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LoopingRatio, error) {
	o := &LoopingRatio{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for looping_ratio")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LoopingRatio records from the query.
func (q loopingRatioQuery) All(ctx context.Context, exec boil.ContextExecutor) (LoopingRatioSlice, error) {
	var o []*LoopingRatio

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LoopingRatio slice")
	}

	if len(loopingRatioAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LoopingRatio records in the query.
func (q loopingRatioQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count looping_ratio rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q loopingRatioQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if looping_ratio exists")
	}

	return count > 0, nil
}

// LoopingRatioPublisher pointed to by the foreign key.
func (o *LoopingRatio) LoopingRatioPublisher(mods ...qm.QueryMod) publisherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"publisher_id\" = ?", o.Publisher),
	}

	queryMods = append(queryMods, mods...)

	return Publishers(queryMods...)
}

// LoadLoopingRatioPublisher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (loopingRatioL) LoadLoopingRatioPublisher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLoopingRatio interface{}, mods queries.Applicator) error {
	var slice []*LoopingRatio
	var object *LoopingRatio

	if singular {
		var ok bool
		object, ok = maybeLoopingRatio.(*LoopingRatio)
		if !ok {
			object = new(LoopingRatio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLoopingRatio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLoopingRatio))
			}
		}
	} else {
		s, ok := maybeLoopingRatio.(*[]*LoopingRatio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLoopingRatio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLoopingRatio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &loopingRatioR{}
		}
		args[object.Publisher] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loopingRatioR{}
			}

			args[obj.Publisher] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`publisher`),
		qm.WhereIn(`publisher.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Publisher")
	}

	var resultSlice []*Publisher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Publisher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for publisher")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publisher")
	}

	if len(publisherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LoopingRatioPublisher = foreign
		if foreign.R == nil {
			foreign.R = &publisherR{}
		}
		foreign.R.LoopingRatios = append(foreign.R.LoopingRatios, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Publisher == foreign.PublisherID {
				local.R.LoopingRatioPublisher = foreign
				if foreign.R == nil {
					foreign.R = &publisherR{}
				}
				foreign.R.LoopingRatios = append(foreign.R.LoopingRatios, local)
				break
			}
		}
	}

	return nil
}

// SetLoopingRatioPublisher of the loopingRatio to the related item.
// Sets o.R.LoopingRatioPublisher to related.
// Adds o to related.R.LoopingRatios.
func (o *LoopingRatio) SetLoopingRatioPublisher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Publisher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"looping_ratio\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"publisher"}),
		strmangle.WhereClause("\"", "\"", 2, loopingRatioPrimaryKeyColumns),
	)
	values := []interface{}{related.PublisherID, o.RuleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Publisher = related.PublisherID
	if o.R == nil {
		o.R = &loopingRatioR{
			LoopingRatioPublisher: related,
		}
	} else {
		o.R.LoopingRatioPublisher = related
	}

	if related.R == nil {
		related.R = &publisherR{
			LoopingRatios: LoopingRatioSlice{o},
		}
	} else {
		related.R.LoopingRatios = append(related.R.LoopingRatios, o)
	}

	return nil
}

// LoopingRatios retrieves all the records using an executor.
func LoopingRatios(mods ...qm.QueryMod) loopingRatioQuery {
	mods = append(mods, qm.From("\"looping_ratio\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"looping_ratio\".*"})
	}

	return loopingRatioQuery{q}
}

// FindLoopingRatio retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLoopingRatio(ctx context.Context, exec boil.ContextExecutor, ruleID string, selectCols ...string) (*LoopingRatio, error) {
	loopingRatioObj := &LoopingRatio{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"looping_ratio\" where \"rule_id\"=$1", sel,
	)

	q := queries.Raw(query, ruleID)

	err := q.Bind(ctx, exec, loopingRatioObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from looping_ratio")
	}

	if err = loopingRatioObj.doAfterSelectHooks(ctx, exec); err != nil {
		return loopingRatioObj, err
	}

	return loopingRatioObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LoopingRatio) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no looping_ratio provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loopingRatioColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	loopingRatioInsertCacheMut.RLock()
	cache, cached := loopingRatioInsertCache[key]
	loopingRatioInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			loopingRatioAllColumns,
			loopingRatioColumnsWithDefault,
			loopingRatioColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(loopingRatioType, loopingRatioMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(loopingRatioType, loopingRatioMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"looping_ratio\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"looping_ratio\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into looping_ratio")
	}

	if !cached {
		loopingRatioInsertCacheMut.Lock()
		loopingRatioInsertCache[key] = cache
		loopingRatioInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LoopingRatio.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LoopingRatio) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	loopingRatioUpdateCacheMut.RLock()
	cache, cached := loopingRatioUpdateCache[key]
	loopingRatioUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			loopingRatioAllColumns,
			loopingRatioPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update looping_ratio, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"looping_ratio\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, loopingRatioPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(loopingRatioType, loopingRatioMapping, append(wl, loopingRatioPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update looping_ratio row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for looping_ratio")
	}

	if !cached {
		loopingRatioUpdateCacheMut.Lock()
		loopingRatioUpdateCache[key] = cache
		loopingRatioUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q loopingRatioQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for looping_ratio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for looping_ratio")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LoopingRatioSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loopingRatioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"looping_ratio\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, loopingRatioPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in loopingRatio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all loopingRatio")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LoopingRatio) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no looping_ratio provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loopingRatioColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	loopingRatioUpsertCacheMut.RLock()
	cache, cached := loopingRatioUpsertCache[key]
	loopingRatioUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			loopingRatioAllColumns,
			loopingRatioColumnsWithDefault,
			loopingRatioColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			loopingRatioAllColumns,
			loopingRatioPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert looping_ratio, could not build update column list")
		}

		ret := strmangle.SetComplement(loopingRatioAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(loopingRatioPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert looping_ratio, could not build conflict column list")
			}

			conflict = make([]string, len(loopingRatioPrimaryKeyColumns))
			copy(conflict, loopingRatioPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"looping_ratio\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(loopingRatioType, loopingRatioMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(loopingRatioType, loopingRatioMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert looping_ratio")
	}

	if !cached {
		loopingRatioUpsertCacheMut.Lock()
		loopingRatioUpsertCache[key] = cache
		loopingRatioUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LoopingRatio record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LoopingRatio) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LoopingRatio provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), loopingRatioPrimaryKeyMapping)
	sql := "DELETE FROM \"looping_ratio\" WHERE \"rule_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from looping_ratio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for looping_ratio")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q loopingRatioQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no loopingRatioQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from looping_ratio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for looping_ratio")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LoopingRatioSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(loopingRatioBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loopingRatioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"looping_ratio\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, loopingRatioPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from loopingRatio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for looping_ratio")
	}

	if len(loopingRatioAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LoopingRatio) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLoopingRatio(ctx, exec, o.RuleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LoopingRatioSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LoopingRatioSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loopingRatioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"looping_ratio\".* FROM \"looping_ratio\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, loopingRatioPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LoopingRatioSlice")
	}

	*o = slice

	return nil
}

// LoopingRatioExists checks if the LoopingRatio row exists.
func LoopingRatioExists(ctx context.Context, exec boil.ContextExecutor, ruleID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"looping_ratio\" where \"rule_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ruleID)
	}
	row := exec.QueryRowContext(ctx, sql, ruleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if looping_ratio exists")
	}

	return exists, nil
}

// Exists checks if the LoopingRatio row exists.
func (o *LoopingRatio) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LoopingRatioExists(ctx, exec, o.RuleID)
}
