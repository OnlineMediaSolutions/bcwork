// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ImpressionLogDaily is an object representing the database table.
type ImpressionLogDaily struct {
	Time              time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	PublisherID       string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	DemandPartnerID   string    `boil:"demand_partner_id" json:"demand_partner_id" toml:"demand_partner_id" yaml:"demand_partner_id"`
	Domain            string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Os                string    `boil:"os" json:"os" toml:"os" yaml:"os"`
	Country           string    `boil:"country" json:"country" toml:"country" yaml:"country"`
	DeviceType        string    `boil:"device_type" json:"device_type" toml:"device_type" yaml:"device_type"`
	Size              string    `boil:"size" json:"size" toml:"size" yaml:"size"`
	IsFirst           bool      `boil:"is_first" json:"is_first" toml:"is_first" yaml:"is_first"`
	HadFollowup       bool      `boil:"had_followup" json:"had_followup" toml:"had_followup" yaml:"had_followup"`
	SoldImpressions   int64     `boil:"sold_impressions" json:"sold_impressions" toml:"sold_impressions" yaml:"sold_impressions"`
	PubImpressions    int64     `boil:"pub_impressions" json:"pub_impressions" toml:"pub_impressions" yaml:"pub_impressions"`
	Cost              float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Revenue           float64   `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	DemandPartnerFees float64   `boil:"demand_partner_fees" json:"demand_partner_fees" toml:"demand_partner_fees" yaml:"demand_partner_fees"`

	R *impressionLogDailyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L impressionLogDailyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImpressionLogDailyColumns = struct {
	Time              string
	PublisherID       string
	DemandPartnerID   string
	Domain            string
	Os                string
	Country           string
	DeviceType        string
	Size              string
	IsFirst           string
	HadFollowup       string
	SoldImpressions   string
	PubImpressions    string
	Cost              string
	Revenue           string
	DemandPartnerFees string
}{
	Time:              "time",
	PublisherID:       "publisher_id",
	DemandPartnerID:   "demand_partner_id",
	Domain:            "domain",
	Os:                "os",
	Country:           "country",
	DeviceType:        "device_type",
	Size:              "size",
	IsFirst:           "is_first",
	HadFollowup:       "had_followup",
	SoldImpressions:   "sold_impressions",
	PubImpressions:    "pub_impressions",
	Cost:              "cost",
	Revenue:           "revenue",
	DemandPartnerFees: "demand_partner_fees",
}

var ImpressionLogDailyTableColumns = struct {
	Time              string
	PublisherID       string
	DemandPartnerID   string
	Domain            string
	Os                string
	Country           string
	DeviceType        string
	Size              string
	IsFirst           string
	HadFollowup       string
	SoldImpressions   string
	PubImpressions    string
	Cost              string
	Revenue           string
	DemandPartnerFees string
}{
	Time:              "impression_log_daily.time",
	PublisherID:       "impression_log_daily.publisher_id",
	DemandPartnerID:   "impression_log_daily.demand_partner_id",
	Domain:            "impression_log_daily.domain",
	Os:                "impression_log_daily.os",
	Country:           "impression_log_daily.country",
	DeviceType:        "impression_log_daily.device_type",
	Size:              "impression_log_daily.size",
	IsFirst:           "impression_log_daily.is_first",
	HadFollowup:       "impression_log_daily.had_followup",
	SoldImpressions:   "impression_log_daily.sold_impressions",
	PubImpressions:    "impression_log_daily.pub_impressions",
	Cost:              "impression_log_daily.cost",
	Revenue:           "impression_log_daily.revenue",
	DemandPartnerFees: "impression_log_daily.demand_partner_fees",
}

// Generated where

var ImpressionLogDailyWhere = struct {
	Time              whereHelpertime_Time
	PublisherID       whereHelperstring
	DemandPartnerID   whereHelperstring
	Domain            whereHelperstring
	Os                whereHelperstring
	Country           whereHelperstring
	DeviceType        whereHelperstring
	Size              whereHelperstring
	IsFirst           whereHelperbool
	HadFollowup       whereHelperbool
	SoldImpressions   whereHelperint64
	PubImpressions    whereHelperint64
	Cost              whereHelperfloat64
	Revenue           whereHelperfloat64
	DemandPartnerFees whereHelperfloat64
}{
	Time:              whereHelpertime_Time{field: "\"impression_log_daily\".\"time\""},
	PublisherID:       whereHelperstring{field: "\"impression_log_daily\".\"publisher_id\""},
	DemandPartnerID:   whereHelperstring{field: "\"impression_log_daily\".\"demand_partner_id\""},
	Domain:            whereHelperstring{field: "\"impression_log_daily\".\"domain\""},
	Os:                whereHelperstring{field: "\"impression_log_daily\".\"os\""},
	Country:           whereHelperstring{field: "\"impression_log_daily\".\"country\""},
	DeviceType:        whereHelperstring{field: "\"impression_log_daily\".\"device_type\""},
	Size:              whereHelperstring{field: "\"impression_log_daily\".\"size\""},
	IsFirst:           whereHelperbool{field: "\"impression_log_daily\".\"is_first\""},
	HadFollowup:       whereHelperbool{field: "\"impression_log_daily\".\"had_followup\""},
	SoldImpressions:   whereHelperint64{field: "\"impression_log_daily\".\"sold_impressions\""},
	PubImpressions:    whereHelperint64{field: "\"impression_log_daily\".\"pub_impressions\""},
	Cost:              whereHelperfloat64{field: "\"impression_log_daily\".\"cost\""},
	Revenue:           whereHelperfloat64{field: "\"impression_log_daily\".\"revenue\""},
	DemandPartnerFees: whereHelperfloat64{field: "\"impression_log_daily\".\"demand_partner_fees\""},
}

// ImpressionLogDailyRels is where relationship names are stored.
var ImpressionLogDailyRels = struct {
}{}

// impressionLogDailyR is where relationships are stored.
type impressionLogDailyR struct {
}

// NewStruct creates a new relationship struct
func (*impressionLogDailyR) NewStruct() *impressionLogDailyR {
	return &impressionLogDailyR{}
}

// impressionLogDailyL is where Load methods for each relationship are stored.
type impressionLogDailyL struct{}

var (
	impressionLogDailyAllColumns            = []string{"time", "publisher_id", "demand_partner_id", "domain", "os", "country", "device_type", "size", "is_first", "had_followup", "sold_impressions", "pub_impressions", "cost", "revenue", "demand_partner_fees"}
	impressionLogDailyColumnsWithoutDefault = []string{"time", "publisher_id", "demand_partner_id", "is_first", "had_followup"}
	impressionLogDailyColumnsWithDefault    = []string{"domain", "os", "country", "device_type", "size", "sold_impressions", "pub_impressions", "cost", "revenue", "demand_partner_fees"}
	impressionLogDailyPrimaryKeyColumns     = []string{"time", "publisher_id", "demand_partner_id", "domain", "os", "country", "device_type", "size", "is_first", "had_followup"}
	impressionLogDailyGeneratedColumns      = []string{}
)

type (
	// ImpressionLogDailySlice is an alias for a slice of pointers to ImpressionLogDaily.
	// This should almost always be used instead of []ImpressionLogDaily.
	ImpressionLogDailySlice []*ImpressionLogDaily
	// ImpressionLogDailyHook is the signature for custom ImpressionLogDaily hook methods
	ImpressionLogDailyHook func(context.Context, boil.ContextExecutor, *ImpressionLogDaily) error

	impressionLogDailyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	impressionLogDailyType                 = reflect.TypeOf(&ImpressionLogDaily{})
	impressionLogDailyMapping              = queries.MakeStructMapping(impressionLogDailyType)
	impressionLogDailyPrimaryKeyMapping, _ = queries.BindMapping(impressionLogDailyType, impressionLogDailyMapping, impressionLogDailyPrimaryKeyColumns)
	impressionLogDailyInsertCacheMut       sync.RWMutex
	impressionLogDailyInsertCache          = make(map[string]insertCache)
	impressionLogDailyUpdateCacheMut       sync.RWMutex
	impressionLogDailyUpdateCache          = make(map[string]updateCache)
	impressionLogDailyUpsertCacheMut       sync.RWMutex
	impressionLogDailyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var impressionLogDailyAfterSelectMu sync.Mutex
var impressionLogDailyAfterSelectHooks []ImpressionLogDailyHook

var impressionLogDailyBeforeInsertMu sync.Mutex
var impressionLogDailyBeforeInsertHooks []ImpressionLogDailyHook
var impressionLogDailyAfterInsertMu sync.Mutex
var impressionLogDailyAfterInsertHooks []ImpressionLogDailyHook

var impressionLogDailyBeforeUpdateMu sync.Mutex
var impressionLogDailyBeforeUpdateHooks []ImpressionLogDailyHook
var impressionLogDailyAfterUpdateMu sync.Mutex
var impressionLogDailyAfterUpdateHooks []ImpressionLogDailyHook

var impressionLogDailyBeforeDeleteMu sync.Mutex
var impressionLogDailyBeforeDeleteHooks []ImpressionLogDailyHook
var impressionLogDailyAfterDeleteMu sync.Mutex
var impressionLogDailyAfterDeleteHooks []ImpressionLogDailyHook

var impressionLogDailyBeforeUpsertMu sync.Mutex
var impressionLogDailyBeforeUpsertHooks []ImpressionLogDailyHook
var impressionLogDailyAfterUpsertMu sync.Mutex
var impressionLogDailyAfterUpsertHooks []ImpressionLogDailyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ImpressionLogDaily) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ImpressionLogDaily) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ImpressionLogDaily) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ImpressionLogDaily) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ImpressionLogDaily) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ImpressionLogDaily) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ImpressionLogDaily) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ImpressionLogDaily) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ImpressionLogDaily) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range impressionLogDailyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImpressionLogDailyHook registers your hook function for all future operations.
func AddImpressionLogDailyHook(hookPoint boil.HookPoint, impressionLogDailyHook ImpressionLogDailyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		impressionLogDailyAfterSelectMu.Lock()
		impressionLogDailyAfterSelectHooks = append(impressionLogDailyAfterSelectHooks, impressionLogDailyHook)
		impressionLogDailyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		impressionLogDailyBeforeInsertMu.Lock()
		impressionLogDailyBeforeInsertHooks = append(impressionLogDailyBeforeInsertHooks, impressionLogDailyHook)
		impressionLogDailyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		impressionLogDailyAfterInsertMu.Lock()
		impressionLogDailyAfterInsertHooks = append(impressionLogDailyAfterInsertHooks, impressionLogDailyHook)
		impressionLogDailyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		impressionLogDailyBeforeUpdateMu.Lock()
		impressionLogDailyBeforeUpdateHooks = append(impressionLogDailyBeforeUpdateHooks, impressionLogDailyHook)
		impressionLogDailyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		impressionLogDailyAfterUpdateMu.Lock()
		impressionLogDailyAfterUpdateHooks = append(impressionLogDailyAfterUpdateHooks, impressionLogDailyHook)
		impressionLogDailyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		impressionLogDailyBeforeDeleteMu.Lock()
		impressionLogDailyBeforeDeleteHooks = append(impressionLogDailyBeforeDeleteHooks, impressionLogDailyHook)
		impressionLogDailyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		impressionLogDailyAfterDeleteMu.Lock()
		impressionLogDailyAfterDeleteHooks = append(impressionLogDailyAfterDeleteHooks, impressionLogDailyHook)
		impressionLogDailyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		impressionLogDailyBeforeUpsertMu.Lock()
		impressionLogDailyBeforeUpsertHooks = append(impressionLogDailyBeforeUpsertHooks, impressionLogDailyHook)
		impressionLogDailyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		impressionLogDailyAfterUpsertMu.Lock()
		impressionLogDailyAfterUpsertHooks = append(impressionLogDailyAfterUpsertHooks, impressionLogDailyHook)
		impressionLogDailyAfterUpsertMu.Unlock()
	}
}

// One returns a single impressionLogDaily record from the query.
func (q impressionLogDailyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ImpressionLogDaily, error) {
	o := &ImpressionLogDaily{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for impression_log_daily")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ImpressionLogDaily records from the query.
func (q impressionLogDailyQuery) All(ctx context.Context, exec boil.ContextExecutor) (ImpressionLogDailySlice, error) {
	var o []*ImpressionLogDaily

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ImpressionLogDaily slice")
	}

	if len(impressionLogDailyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ImpressionLogDaily records in the query.
func (q impressionLogDailyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count impression_log_daily rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q impressionLogDailyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if impression_log_daily exists")
	}

	return count > 0, nil
}

// ImpressionLogDailies retrieves all the records using an executor.
func ImpressionLogDailies(mods ...qm.QueryMod) impressionLogDailyQuery {
	mods = append(mods, qm.From("\"impression_log_daily\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"impression_log_daily\".*"})
	}

	return impressionLogDailyQuery{q}
}

// FindImpressionLogDaily retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImpressionLogDaily(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, demandPartnerID string, domain string, os string, country string, deviceType string, size string, isFirst bool, hadFollowup bool, selectCols ...string) (*ImpressionLogDaily, error) {
	impressionLogDailyObj := &ImpressionLogDaily{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"impression_log_daily\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4 AND \"os\"=$5 AND \"country\"=$6 AND \"device_type\"=$7 AND \"size\"=$8 AND \"is_first\"=$9 AND \"had_followup\"=$10", sel,
	)

	q := queries.Raw(query, time, publisherID, demandPartnerID, domain, os, country, deviceType, size, isFirst, hadFollowup)

	err := q.Bind(ctx, exec, impressionLogDailyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from impression_log_daily")
	}

	if err = impressionLogDailyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return impressionLogDailyObj, err
	}

	return impressionLogDailyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ImpressionLogDaily) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no impression_log_daily provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(impressionLogDailyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	impressionLogDailyInsertCacheMut.RLock()
	cache, cached := impressionLogDailyInsertCache[key]
	impressionLogDailyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			impressionLogDailyAllColumns,
			impressionLogDailyColumnsWithDefault,
			impressionLogDailyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(impressionLogDailyType, impressionLogDailyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(impressionLogDailyType, impressionLogDailyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"impression_log_daily\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"impression_log_daily\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into impression_log_daily")
	}

	if !cached {
		impressionLogDailyInsertCacheMut.Lock()
		impressionLogDailyInsertCache[key] = cache
		impressionLogDailyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ImpressionLogDaily.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ImpressionLogDaily) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	impressionLogDailyUpdateCacheMut.RLock()
	cache, cached := impressionLogDailyUpdateCache[key]
	impressionLogDailyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			impressionLogDailyAllColumns,
			impressionLogDailyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update impression_log_daily, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"impression_log_daily\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, impressionLogDailyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(impressionLogDailyType, impressionLogDailyMapping, append(wl, impressionLogDailyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update impression_log_daily row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for impression_log_daily")
	}

	if !cached {
		impressionLogDailyUpdateCacheMut.Lock()
		impressionLogDailyUpdateCache[key] = cache
		impressionLogDailyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q impressionLogDailyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for impression_log_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for impression_log_daily")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImpressionLogDailySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), impressionLogDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"impression_log_daily\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, impressionLogDailyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in impressionLogDaily slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all impressionLogDaily")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ImpressionLogDaily) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no impression_log_daily provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(impressionLogDailyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	impressionLogDailyUpsertCacheMut.RLock()
	cache, cached := impressionLogDailyUpsertCache[key]
	impressionLogDailyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			impressionLogDailyAllColumns,
			impressionLogDailyColumnsWithDefault,
			impressionLogDailyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			impressionLogDailyAllColumns,
			impressionLogDailyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert impression_log_daily, could not build update column list")
		}

		ret := strmangle.SetComplement(impressionLogDailyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(impressionLogDailyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert impression_log_daily, could not build conflict column list")
			}

			conflict = make([]string, len(impressionLogDailyPrimaryKeyColumns))
			copy(conflict, impressionLogDailyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"impression_log_daily\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(impressionLogDailyType, impressionLogDailyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(impressionLogDailyType, impressionLogDailyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert impression_log_daily")
	}

	if !cached {
		impressionLogDailyUpsertCacheMut.Lock()
		impressionLogDailyUpsertCache[key] = cache
		impressionLogDailyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ImpressionLogDaily record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ImpressionLogDaily) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ImpressionLogDaily provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), impressionLogDailyPrimaryKeyMapping)
	sql := "DELETE FROM \"impression_log_daily\" WHERE \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4 AND \"os\"=$5 AND \"country\"=$6 AND \"device_type\"=$7 AND \"size\"=$8 AND \"is_first\"=$9 AND \"had_followup\"=$10"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from impression_log_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for impression_log_daily")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q impressionLogDailyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no impressionLogDailyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from impression_log_daily")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for impression_log_daily")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImpressionLogDailySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(impressionLogDailyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), impressionLogDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"impression_log_daily\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, impressionLogDailyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from impressionLogDaily slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for impression_log_daily")
	}

	if len(impressionLogDailyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ImpressionLogDaily) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImpressionLogDaily(ctx, exec, o.Time, o.PublisherID, o.DemandPartnerID, o.Domain, o.Os, o.Country, o.DeviceType, o.Size, o.IsFirst, o.HadFollowup)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImpressionLogDailySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImpressionLogDailySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), impressionLogDailyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"impression_log_daily\".* FROM \"impression_log_daily\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, impressionLogDailyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ImpressionLogDailySlice")
	}

	*o = slice

	return nil
}

// ImpressionLogDailyExists checks if the ImpressionLogDaily row exists.
func ImpressionLogDailyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, demandPartnerID string, domain string, os string, country string, deviceType string, size string, isFirst bool, hadFollowup bool) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"impression_log_daily\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"demand_partner_id\"=$3 AND \"domain\"=$4 AND \"os\"=$5 AND \"country\"=$6 AND \"device_type\"=$7 AND \"size\"=$8 AND \"is_first\"=$9 AND \"had_followup\"=$10 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, publisherID, demandPartnerID, domain, os, country, deviceType, size, isFirst, hadFollowup)
	}
	row := exec.QueryRowContext(ctx, sql, time, publisherID, demandPartnerID, domain, os, country, deviceType, size, isFirst, hadFollowup)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if impression_log_daily exists")
	}

	return exists, nil
}

// Exists checks if the ImpressionLogDaily row exists.
func (o *ImpressionLogDaily) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ImpressionLogDailyExists(ctx, exec, o.Time, o.PublisherID, o.DemandPartnerID, o.Domain, o.Os, o.Country, o.DeviceType, o.Size, o.IsFirst, o.HadFollowup)
}
