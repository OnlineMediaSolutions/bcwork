// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PublisherHourly is an object representing the database table.
type PublisherHourly struct {
	Time                 time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`
	PublisherID          string    `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	Domain               string    `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`
	Os                   string    `boil:"os" json:"os" toml:"os" yaml:"os"`
	Country              string    `boil:"country" json:"country" toml:"country" yaml:"country"`
	DeviceType           string    `boil:"device_type" json:"device_type" toml:"device_type" yaml:"device_type"`
	BidRequests          int64     `boil:"bid_requests" json:"bid_requests" toml:"bid_requests" yaml:"bid_requests"`
	BidResponses         int64     `boil:"bid_responses" json:"bid_responses" toml:"bid_responses" yaml:"bid_responses"`
	BidPriceCount        int64     `boil:"bid_price_count" json:"bid_price_count" toml:"bid_price_count" yaml:"bid_price_count"`
	BidPriceTotal        float64   `boil:"bid_price_total" json:"bid_price_total" toml:"bid_price_total" yaml:"bid_price_total"`
	PublisherImpressions int64     `boil:"publisher_impressions" json:"publisher_impressions" toml:"publisher_impressions" yaml:"publisher_impressions"`
	DemandImpressions    int64     `boil:"demand_impressions" json:"demand_impressions" toml:"demand_impressions" yaml:"demand_impressions"`
	MissedOpportunities  int64     `boil:"missed_opportunities" json:"missed_opportunities" toml:"missed_opportunities" yaml:"missed_opportunities"`
	SupplyTotal          float64   `boil:"supply_total" json:"supply_total" toml:"supply_total" yaml:"supply_total"`
	DemandTotal          float64   `boil:"demand_total" json:"demand_total" toml:"demand_total" yaml:"demand_total"`
	DemandPartnerFee     float64   `boil:"demand_partner_fee" json:"demand_partner_fee" toml:"demand_partner_fee" yaml:"demand_partner_fee"`

	R *publisherHourlyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publisherHourlyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublisherHourlyColumns = struct {
	Time                 string
	PublisherID          string
	Domain               string
	Os                   string
	Country              string
	DeviceType           string
	BidRequests          string
	BidResponses         string
	BidPriceCount        string
	BidPriceTotal        string
	PublisherImpressions string
	DemandImpressions    string
	MissedOpportunities  string
	SupplyTotal          string
	DemandTotal          string
	DemandPartnerFee     string
}{
	Time:                 "time",
	PublisherID:          "publisher_id",
	Domain:               "domain",
	Os:                   "os",
	Country:              "country",
	DeviceType:           "device_type",
	BidRequests:          "bid_requests",
	BidResponses:         "bid_responses",
	BidPriceCount:        "bid_price_count",
	BidPriceTotal:        "bid_price_total",
	PublisherImpressions: "publisher_impressions",
	DemandImpressions:    "demand_impressions",
	MissedOpportunities:  "missed_opportunities",
	SupplyTotal:          "supply_total",
	DemandTotal:          "demand_total",
	DemandPartnerFee:     "demand_partner_fee",
}

var PublisherHourlyTableColumns = struct {
	Time                 string
	PublisherID          string
	Domain               string
	Os                   string
	Country              string
	DeviceType           string
	BidRequests          string
	BidResponses         string
	BidPriceCount        string
	BidPriceTotal        string
	PublisherImpressions string
	DemandImpressions    string
	MissedOpportunities  string
	SupplyTotal          string
	DemandTotal          string
	DemandPartnerFee     string
}{
	Time:                 "publisher_hourly.time",
	PublisherID:          "publisher_hourly.publisher_id",
	Domain:               "publisher_hourly.domain",
	Os:                   "publisher_hourly.os",
	Country:              "publisher_hourly.country",
	DeviceType:           "publisher_hourly.device_type",
	BidRequests:          "publisher_hourly.bid_requests",
	BidResponses:         "publisher_hourly.bid_responses",
	BidPriceCount:        "publisher_hourly.bid_price_count",
	BidPriceTotal:        "publisher_hourly.bid_price_total",
	PublisherImpressions: "publisher_hourly.publisher_impressions",
	DemandImpressions:    "publisher_hourly.demand_impressions",
	MissedOpportunities:  "publisher_hourly.missed_opportunities",
	SupplyTotal:          "publisher_hourly.supply_total",
	DemandTotal:          "publisher_hourly.demand_total",
	DemandPartnerFee:     "publisher_hourly.demand_partner_fee",
}

// Generated where

var PublisherHourlyWhere = struct {
	Time                 whereHelpertime_Time
	PublisherID          whereHelperstring
	Domain               whereHelperstring
	Os                   whereHelperstring
	Country              whereHelperstring
	DeviceType           whereHelperstring
	BidRequests          whereHelperint64
	BidResponses         whereHelperint64
	BidPriceCount        whereHelperint64
	BidPriceTotal        whereHelperfloat64
	PublisherImpressions whereHelperint64
	DemandImpressions    whereHelperint64
	MissedOpportunities  whereHelperint64
	SupplyTotal          whereHelperfloat64
	DemandTotal          whereHelperfloat64
	DemandPartnerFee     whereHelperfloat64
}{
	Time:                 whereHelpertime_Time{field: "\"publisher_hourly\".\"time\""},
	PublisherID:          whereHelperstring{field: "\"publisher_hourly\".\"publisher_id\""},
	Domain:               whereHelperstring{field: "\"publisher_hourly\".\"domain\""},
	Os:                   whereHelperstring{field: "\"publisher_hourly\".\"os\""},
	Country:              whereHelperstring{field: "\"publisher_hourly\".\"country\""},
	DeviceType:           whereHelperstring{field: "\"publisher_hourly\".\"device_type\""},
	BidRequests:          whereHelperint64{field: "\"publisher_hourly\".\"bid_requests\""},
	BidResponses:         whereHelperint64{field: "\"publisher_hourly\".\"bid_responses\""},
	BidPriceCount:        whereHelperint64{field: "\"publisher_hourly\".\"bid_price_count\""},
	BidPriceTotal:        whereHelperfloat64{field: "\"publisher_hourly\".\"bid_price_total\""},
	PublisherImpressions: whereHelperint64{field: "\"publisher_hourly\".\"publisher_impressions\""},
	DemandImpressions:    whereHelperint64{field: "\"publisher_hourly\".\"demand_impressions\""},
	MissedOpportunities:  whereHelperint64{field: "\"publisher_hourly\".\"missed_opportunities\""},
	SupplyTotal:          whereHelperfloat64{field: "\"publisher_hourly\".\"supply_total\""},
	DemandTotal:          whereHelperfloat64{field: "\"publisher_hourly\".\"demand_total\""},
	DemandPartnerFee:     whereHelperfloat64{field: "\"publisher_hourly\".\"demand_partner_fee\""},
}

// PublisherHourlyRels is where relationship names are stored.
var PublisherHourlyRels = struct {
}{}

// publisherHourlyR is where relationships are stored.
type publisherHourlyR struct {
}

// NewStruct creates a new relationship struct
func (*publisherHourlyR) NewStruct() *publisherHourlyR {
	return &publisherHourlyR{}
}

// publisherHourlyL is where Load methods for each relationship are stored.
type publisherHourlyL struct{}

var (
	publisherHourlyAllColumns            = []string{"time", "publisher_id", "domain", "os", "country", "device_type", "bid_requests", "bid_responses", "bid_price_count", "bid_price_total", "publisher_impressions", "demand_impressions", "missed_opportunities", "supply_total", "demand_total", "demand_partner_fee"}
	publisherHourlyColumnsWithoutDefault = []string{"time", "publisher_id"}
	publisherHourlyColumnsWithDefault    = []string{"domain", "os", "country", "device_type", "bid_requests", "bid_responses", "bid_price_count", "bid_price_total", "publisher_impressions", "demand_impressions", "missed_opportunities", "supply_total", "demand_total", "demand_partner_fee"}
	publisherHourlyPrimaryKeyColumns     = []string{"time", "publisher_id", "domain", "os", "country", "device_type"}
	publisherHourlyGeneratedColumns      = []string{}
)

type (
	// PublisherHourlySlice is an alias for a slice of pointers to PublisherHourly.
	// This should almost always be used instead of []PublisherHourly.
	PublisherHourlySlice []*PublisherHourly
	// PublisherHourlyHook is the signature for custom PublisherHourly hook methods
	PublisherHourlyHook func(context.Context, boil.ContextExecutor, *PublisherHourly) error

	publisherHourlyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publisherHourlyType                 = reflect.TypeOf(&PublisherHourly{})
	publisherHourlyMapping              = queries.MakeStructMapping(publisherHourlyType)
	publisherHourlyPrimaryKeyMapping, _ = queries.BindMapping(publisherHourlyType, publisherHourlyMapping, publisherHourlyPrimaryKeyColumns)
	publisherHourlyInsertCacheMut       sync.RWMutex
	publisherHourlyInsertCache          = make(map[string]insertCache)
	publisherHourlyUpdateCacheMut       sync.RWMutex
	publisherHourlyUpdateCache          = make(map[string]updateCache)
	publisherHourlyUpsertCacheMut       sync.RWMutex
	publisherHourlyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publisherHourlyAfterSelectMu sync.Mutex
var publisherHourlyAfterSelectHooks []PublisherHourlyHook

var publisherHourlyBeforeInsertMu sync.Mutex
var publisherHourlyBeforeInsertHooks []PublisherHourlyHook
var publisherHourlyAfterInsertMu sync.Mutex
var publisherHourlyAfterInsertHooks []PublisherHourlyHook

var publisherHourlyBeforeUpdateMu sync.Mutex
var publisherHourlyBeforeUpdateHooks []PublisherHourlyHook
var publisherHourlyAfterUpdateMu sync.Mutex
var publisherHourlyAfterUpdateHooks []PublisherHourlyHook

var publisherHourlyBeforeDeleteMu sync.Mutex
var publisherHourlyBeforeDeleteHooks []PublisherHourlyHook
var publisherHourlyAfterDeleteMu sync.Mutex
var publisherHourlyAfterDeleteHooks []PublisherHourlyHook

var publisherHourlyBeforeUpsertMu sync.Mutex
var publisherHourlyBeforeUpsertHooks []PublisherHourlyHook
var publisherHourlyAfterUpsertMu sync.Mutex
var publisherHourlyAfterUpsertHooks []PublisherHourlyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublisherHourly) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublisherHourly) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublisherHourly) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublisherHourly) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublisherHourly) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublisherHourly) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublisherHourly) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublisherHourly) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublisherHourly) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherHourlyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublisherHourlyHook registers your hook function for all future operations.
func AddPublisherHourlyHook(hookPoint boil.HookPoint, publisherHourlyHook PublisherHourlyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		publisherHourlyAfterSelectMu.Lock()
		publisherHourlyAfterSelectHooks = append(publisherHourlyAfterSelectHooks, publisherHourlyHook)
		publisherHourlyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		publisherHourlyBeforeInsertMu.Lock()
		publisherHourlyBeforeInsertHooks = append(publisherHourlyBeforeInsertHooks, publisherHourlyHook)
		publisherHourlyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		publisherHourlyAfterInsertMu.Lock()
		publisherHourlyAfterInsertHooks = append(publisherHourlyAfterInsertHooks, publisherHourlyHook)
		publisherHourlyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		publisherHourlyBeforeUpdateMu.Lock()
		publisherHourlyBeforeUpdateHooks = append(publisherHourlyBeforeUpdateHooks, publisherHourlyHook)
		publisherHourlyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		publisherHourlyAfterUpdateMu.Lock()
		publisherHourlyAfterUpdateHooks = append(publisherHourlyAfterUpdateHooks, publisherHourlyHook)
		publisherHourlyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		publisherHourlyBeforeDeleteMu.Lock()
		publisherHourlyBeforeDeleteHooks = append(publisherHourlyBeforeDeleteHooks, publisherHourlyHook)
		publisherHourlyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		publisherHourlyAfterDeleteMu.Lock()
		publisherHourlyAfterDeleteHooks = append(publisherHourlyAfterDeleteHooks, publisherHourlyHook)
		publisherHourlyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		publisherHourlyBeforeUpsertMu.Lock()
		publisherHourlyBeforeUpsertHooks = append(publisherHourlyBeforeUpsertHooks, publisherHourlyHook)
		publisherHourlyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		publisherHourlyAfterUpsertMu.Lock()
		publisherHourlyAfterUpsertHooks = append(publisherHourlyAfterUpsertHooks, publisherHourlyHook)
		publisherHourlyAfterUpsertMu.Unlock()
	}
}

// One returns a single publisherHourly record from the query.
func (q publisherHourlyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PublisherHourly, error) {
	o := &PublisherHourly{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for publisher_hourly")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PublisherHourly records from the query.
func (q publisherHourlyQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublisherHourlySlice, error) {
	var o []*PublisherHourly

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PublisherHourly slice")
	}

	if len(publisherHourlyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PublisherHourly records in the query.
func (q publisherHourlyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count publisher_hourly rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publisherHourlyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if publisher_hourly exists")
	}

	return count > 0, nil
}

// PublisherHourlies retrieves all the records using an executor.
func PublisherHourlies(mods ...qm.QueryMod) publisherHourlyQuery {
	mods = append(mods, qm.From("\"publisher_hourly\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"publisher_hourly\".*"})
	}

	return publisherHourlyQuery{q}
}

// FindPublisherHourly retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublisherHourly(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, domain string, os string, country string, deviceType string, selectCols ...string) (*PublisherHourly, error) {
	publisherHourlyObj := &PublisherHourly{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"publisher_hourly\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"domain\"=$3 AND \"os\"=$4 AND \"country\"=$5 AND \"device_type\"=$6", sel,
	)

	q := queries.Raw(query, time, publisherID, domain, os, country, deviceType)

	err := q.Bind(ctx, exec, publisherHourlyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from publisher_hourly")
	}

	if err = publisherHourlyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return publisherHourlyObj, err
	}

	return publisherHourlyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublisherHourly) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publisher_hourly provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherHourlyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publisherHourlyInsertCacheMut.RLock()
	cache, cached := publisherHourlyInsertCache[key]
	publisherHourlyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publisherHourlyAllColumns,
			publisherHourlyColumnsWithDefault,
			publisherHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publisherHourlyType, publisherHourlyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publisherHourlyType, publisherHourlyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"publisher_hourly\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"publisher_hourly\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into publisher_hourly")
	}

	if !cached {
		publisherHourlyInsertCacheMut.Lock()
		publisherHourlyInsertCache[key] = cache
		publisherHourlyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PublisherHourly.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublisherHourly) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publisherHourlyUpdateCacheMut.RLock()
	cache, cached := publisherHourlyUpdateCache[key]
	publisherHourlyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publisherHourlyAllColumns,
			publisherHourlyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update publisher_hourly, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"publisher_hourly\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publisherHourlyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publisherHourlyType, publisherHourlyMapping, append(wl, publisherHourlyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update publisher_hourly row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for publisher_hourly")
	}

	if !cached {
		publisherHourlyUpdateCacheMut.Lock()
		publisherHourlyUpdateCache[key] = cache
		publisherHourlyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publisherHourlyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for publisher_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for publisher_hourly")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublisherHourlySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"publisher_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publisherHourlyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in publisherHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all publisherHourly")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublisherHourly) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no publisher_hourly provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherHourlyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publisherHourlyUpsertCacheMut.RLock()
	cache, cached := publisherHourlyUpsertCache[key]
	publisherHourlyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			publisherHourlyAllColumns,
			publisherHourlyColumnsWithDefault,
			publisherHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			publisherHourlyAllColumns,
			publisherHourlyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert publisher_hourly, could not build update column list")
		}

		ret := strmangle.SetComplement(publisherHourlyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(publisherHourlyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert publisher_hourly, could not build conflict column list")
			}

			conflict = make([]string, len(publisherHourlyPrimaryKeyColumns))
			copy(conflict, publisherHourlyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"publisher_hourly\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(publisherHourlyType, publisherHourlyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publisherHourlyType, publisherHourlyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert publisher_hourly")
	}

	if !cached {
		publisherHourlyUpsertCacheMut.Lock()
		publisherHourlyUpsertCache[key] = cache
		publisherHourlyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PublisherHourly record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublisherHourly) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PublisherHourly provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publisherHourlyPrimaryKeyMapping)
	sql := "DELETE FROM \"publisher_hourly\" WHERE \"time\"=$1 AND \"publisher_id\"=$2 AND \"domain\"=$3 AND \"os\"=$4 AND \"country\"=$5 AND \"device_type\"=$6"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from publisher_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for publisher_hourly")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publisherHourlyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no publisherHourlyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisher_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher_hourly")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublisherHourlySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publisherHourlyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"publisher_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publisherHourlyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisherHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher_hourly")
	}

	if len(publisherHourlyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublisherHourly) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublisherHourly(ctx, exec, o.Time, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublisherHourlySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublisherHourlySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"publisher_hourly\".* FROM \"publisher_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publisherHourlyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PublisherHourlySlice")
	}

	*o = slice

	return nil
}

// PublisherHourlyExists checks if the PublisherHourly row exists.
func PublisherHourlyExists(ctx context.Context, exec boil.ContextExecutor, time time.Time, publisherID string, domain string, os string, country string, deviceType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"publisher_hourly\" where \"time\"=$1 AND \"publisher_id\"=$2 AND \"domain\"=$3 AND \"os\"=$4 AND \"country\"=$5 AND \"device_type\"=$6 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, time, publisherID, domain, os, country, deviceType)
	}
	row := exec.QueryRowContext(ctx, sql, time, publisherID, domain, os, country, deviceType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if publisher_hourly exists")
	}

	return exists, nil
}

// Exists checks if the PublisherHourly row exists.
func (o *PublisherHourly) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PublisherHourlyExists(ctx, exec, o.Time, o.PublisherID, o.Domain, o.Os, o.Country, o.DeviceType)
}
