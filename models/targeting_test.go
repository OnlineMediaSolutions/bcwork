// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTargetings(t *testing.T) {
	t.Parallel()

	query := Targetings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTargetingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTargetingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Targetings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTargetingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TargetingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTargetingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TargetingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Targeting exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TargetingExists to return true, but got false.")
	}
}

func testTargetingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	targetingFound, err := FindTargeting(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if targetingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTargetingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Targetings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTargetingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Targetings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTargetingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	targetingOne := &Targeting{}
	targetingTwo := &Targeting{}
	if err = randomize.Struct(seed, targetingOne, targetingDBTypes, false, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}
	if err = randomize.Struct(seed, targetingTwo, targetingDBTypes, false, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = targetingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = targetingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Targetings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTargetingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	targetingOne := &Targeting{}
	targetingTwo := &Targeting{}
	if err = randomize.Struct(seed, targetingOne, targetingDBTypes, false, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}
	if err = randomize.Struct(seed, targetingTwo, targetingDBTypes, false, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = targetingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = targetingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func targetingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func targetingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func targetingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func targetingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func targetingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func targetingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func targetingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func targetingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func targetingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Targeting) error {
	*o = Targeting{}
	return nil
}

func testTargetingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Targeting{}
	o := &Targeting{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, targetingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Targeting object: %s", err)
	}

	AddTargetingHook(boil.BeforeInsertHook, targetingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	targetingBeforeInsertHooks = []TargetingHook{}

	AddTargetingHook(boil.AfterInsertHook, targetingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	targetingAfterInsertHooks = []TargetingHook{}

	AddTargetingHook(boil.AfterSelectHook, targetingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	targetingAfterSelectHooks = []TargetingHook{}

	AddTargetingHook(boil.BeforeUpdateHook, targetingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	targetingBeforeUpdateHooks = []TargetingHook{}

	AddTargetingHook(boil.AfterUpdateHook, targetingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	targetingAfterUpdateHooks = []TargetingHook{}

	AddTargetingHook(boil.BeforeDeleteHook, targetingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	targetingBeforeDeleteHooks = []TargetingHook{}

	AddTargetingHook(boil.AfterDeleteHook, targetingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	targetingAfterDeleteHooks = []TargetingHook{}

	AddTargetingHook(boil.BeforeUpsertHook, targetingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	targetingBeforeUpsertHooks = []TargetingHook{}

	AddTargetingHook(boil.AfterUpsertHook, targetingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	targetingAfterUpsertHooks = []TargetingHook{}
}

func testTargetingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTargetingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(targetingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTargetingToOnePublisherUsingPublisher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Targeting
	var foreign Publisher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, targetingDBTypes, false, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PublisherID = foreign.PublisherID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Publisher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PublisherID != foreign.PublisherID {
		t.Errorf("want: %v, got %v", foreign.PublisherID, check.PublisherID)
	}

	ranAfterSelectHook := false
	AddPublisherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Publisher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TargetingSlice{&local}
	if err = local.L.LoadPublisher(ctx, tx, false, (*[]*Targeting)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Publisher = nil
	if err = local.L.LoadPublisher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTargetingToOneSetOpPublisherUsingPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Targeting
	var b, c Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, targetingDBTypes, false, strmangle.SetComplement(targetingPrimaryKeyColumns, targetingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Publisher{&b, &c} {
		err = a.SetPublisher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Publisher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Targetings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PublisherID != x.PublisherID {
			t.Error("foreign key was wrong value", a.PublisherID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PublisherID))
		reflect.Indirect(reflect.ValueOf(&a.PublisherID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PublisherID != x.PublisherID {
			t.Error("foreign key was wrong value", a.PublisherID, x.PublisherID)
		}
	}
}

func testTargetingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTargetingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TargetingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTargetingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Targetings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	targetingDBTypes = map[string]string{`ID`: `integer`, `PublisherID`: `character varying`, `Domain`: `character varying`, `UnitSize`: `character varying`, `PlacementType`: `character varying`, `Country`: `ARRAYtext`, `DeviceType`: `ARRAYtext`, `Browser`: `ARRAYtext`, `Os`: `ARRAYtext`, `KV`: `jsonb`, `PriceModel`: `character varying`, `Value`: `double precision`, `DailyCap`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `Status`: `character varying`}
	_                = bytes.MinRead
)

func testTargetingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(targetingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(targetingAllColumns) == len(targetingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTargetingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(targetingAllColumns) == len(targetingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Targeting{}
	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, targetingDBTypes, true, targetingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(targetingAllColumns, targetingPrimaryKeyColumns) {
		fields = targetingAllColumns
	} else {
		fields = strmangle.SetComplement(
			targetingAllColumns,
			targetingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TargetingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTargetingsUpsert(t *testing.T) {
	t.Parallel()

	if len(targetingAllColumns) == len(targetingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Targeting{}
	if err = randomize.Struct(seed, &o, targetingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Targeting: %s", err)
	}

	count, err := Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, targetingDBTypes, false, targetingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Targeting struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Targeting: %s", err)
	}

	count, err = Targetings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
