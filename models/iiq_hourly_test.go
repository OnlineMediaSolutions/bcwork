// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIiqHourlies(t *testing.T) {
	t.Parallel()

	query := IiqHourlies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIiqHourliesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIiqHourliesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IiqHourlies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIiqHourliesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IiqHourlySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIiqHourliesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IiqHourlyExists(ctx, tx, o.Time, o.Dpid)
	if err != nil {
		t.Errorf("Unable to check if IiqHourly exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IiqHourlyExists to return true, but got false.")
	}
}

func testIiqHourliesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	iiqHourlyFound, err := FindIiqHourly(ctx, tx, o.Time, o.Dpid)
	if err != nil {
		t.Error(err)
	}

	if iiqHourlyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIiqHourliesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IiqHourlies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIiqHourliesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IiqHourlies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIiqHourliesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	iiqHourlyOne := &IiqHourly{}
	iiqHourlyTwo := &IiqHourly{}
	if err = randomize.Struct(seed, iiqHourlyOne, iiqHourlyDBTypes, false, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}
	if err = randomize.Struct(seed, iiqHourlyTwo, iiqHourlyDBTypes, false, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = iiqHourlyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = iiqHourlyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IiqHourlies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIiqHourliesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	iiqHourlyOne := &IiqHourly{}
	iiqHourlyTwo := &IiqHourly{}
	if err = randomize.Struct(seed, iiqHourlyOne, iiqHourlyDBTypes, false, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}
	if err = randomize.Struct(seed, iiqHourlyTwo, iiqHourlyDBTypes, false, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = iiqHourlyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = iiqHourlyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func iiqHourlyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func iiqHourlyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func iiqHourlyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func iiqHourlyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func iiqHourlyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func iiqHourlyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func iiqHourlyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func iiqHourlyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func iiqHourlyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IiqHourly) error {
	*o = IiqHourly{}
	return nil
}

func testIiqHourliesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IiqHourly{}
	o := &IiqHourly{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IiqHourly object: %s", err)
	}

	AddIiqHourlyHook(boil.BeforeInsertHook, iiqHourlyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	iiqHourlyBeforeInsertHooks = []IiqHourlyHook{}

	AddIiqHourlyHook(boil.AfterInsertHook, iiqHourlyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	iiqHourlyAfterInsertHooks = []IiqHourlyHook{}

	AddIiqHourlyHook(boil.AfterSelectHook, iiqHourlyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	iiqHourlyAfterSelectHooks = []IiqHourlyHook{}

	AddIiqHourlyHook(boil.BeforeUpdateHook, iiqHourlyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	iiqHourlyBeforeUpdateHooks = []IiqHourlyHook{}

	AddIiqHourlyHook(boil.AfterUpdateHook, iiqHourlyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	iiqHourlyAfterUpdateHooks = []IiqHourlyHook{}

	AddIiqHourlyHook(boil.BeforeDeleteHook, iiqHourlyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	iiqHourlyBeforeDeleteHooks = []IiqHourlyHook{}

	AddIiqHourlyHook(boil.AfterDeleteHook, iiqHourlyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	iiqHourlyAfterDeleteHooks = []IiqHourlyHook{}

	AddIiqHourlyHook(boil.BeforeUpsertHook, iiqHourlyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	iiqHourlyBeforeUpsertHooks = []IiqHourlyHook{}

	AddIiqHourlyHook(boil.AfterUpsertHook, iiqHourlyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	iiqHourlyAfterUpsertHooks = []IiqHourlyHook{}
}

func testIiqHourliesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIiqHourliesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(iiqHourlyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIiqHourliesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIiqHourliesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IiqHourlySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIiqHourliesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IiqHourlies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	iiqHourlyDBTypes = map[string]string{`Time`: `timestamp without time zone`, `Dpid`: `character varying`, `Request`: `bigint`, `Response`: `bigint`, `Impression`: `bigint`, `Revenue`: `double precision`}
	_                = bytes.MinRead
)

func testIiqHourliesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(iiqHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(iiqHourlyAllColumns) == len(iiqHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIiqHourliesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(iiqHourlyAllColumns) == len(iiqHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IiqHourly{}
	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, iiqHourlyDBTypes, true, iiqHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(iiqHourlyAllColumns, iiqHourlyPrimaryKeyColumns) {
		fields = iiqHourlyAllColumns
	} else {
		fields = strmangle.SetComplement(
			iiqHourlyAllColumns,
			iiqHourlyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IiqHourlySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIiqHourliesUpsert(t *testing.T) {
	t.Parallel()

	if len(iiqHourlyAllColumns) == len(iiqHourlyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IiqHourly{}
	if err = randomize.Struct(seed, &o, iiqHourlyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IiqHourly: %s", err)
	}

	count, err := IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, iiqHourlyDBTypes, false, iiqHourlyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IiqHourly struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IiqHourly: %s", err)
	}

	count, err = IiqHourlies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
