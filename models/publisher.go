// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Publisher is an object representing the database table.
type Publisher struct {
	PublisherID         string            `boil:"publisher_id" json:"publisher_id" toml:"publisher_id" yaml:"publisher_id"`
	CreatedAt           time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Name                string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	AccountManagerID    null.String       `boil:"account_manager_id" json:"account_manager_id,omitempty" toml:"account_manager_id" yaml:"account_manager_id,omitempty"`
	MediaBuyerID        null.String       `boil:"media_buyer_id" json:"media_buyer_id,omitempty" toml:"media_buyer_id" yaml:"media_buyer_id,omitempty"`
	CampaignManagerID   null.String       `boil:"campaign_manager_id" json:"campaign_manager_id,omitempty" toml:"campaign_manager_id" yaml:"campaign_manager_id,omitempty"`
	OfficeLocation      null.String       `boil:"office_location" json:"office_location,omitempty" toml:"office_location" yaml:"office_location,omitempty"`
	PauseTimestamp      null.Int64        `boil:"pause_timestamp" json:"pause_timestamp,omitempty" toml:"pause_timestamp" yaml:"pause_timestamp,omitempty"`
	StartTimestamp      null.Int64        `boil:"start_timestamp" json:"start_timestamp,omitempty" toml:"start_timestamp" yaml:"start_timestamp,omitempty"`
	ReactivateTimestamp null.Int64        `boil:"reactivate_timestamp" json:"reactivate_timestamp,omitempty" toml:"reactivate_timestamp" yaml:"reactivate_timestamp,omitempty"`
	IntegrationType     types.StringArray `boil:"integration_type" json:"integration_type,omitempty" toml:"integration_type" yaml:"integration_type,omitempty"`
	Status              null.String       `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`

	R *publisherR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publisherL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublisherColumns = struct {
	PublisherID         string
	CreatedAt           string
	Name                string
	AccountManagerID    string
	MediaBuyerID        string
	CampaignManagerID   string
	OfficeLocation      string
	PauseTimestamp      string
	StartTimestamp      string
	ReactivateTimestamp string
	IntegrationType     string
	Status              string
}{
	PublisherID:         "publisher_id",
	CreatedAt:           "created_at",
	Name:                "name",
	AccountManagerID:    "account_manager_id",
	MediaBuyerID:        "media_buyer_id",
	CampaignManagerID:   "campaign_manager_id",
	OfficeLocation:      "office_location",
	PauseTimestamp:      "pause_timestamp",
	StartTimestamp:      "start_timestamp",
	ReactivateTimestamp: "reactivate_timestamp",
	IntegrationType:     "integration_type",
	Status:              "status",
}

var PublisherTableColumns = struct {
	PublisherID         string
	CreatedAt           string
	Name                string
	AccountManagerID    string
	MediaBuyerID        string
	CampaignManagerID   string
	OfficeLocation      string
	PauseTimestamp      string
	StartTimestamp      string
	ReactivateTimestamp string
	IntegrationType     string
	Status              string
}{
	PublisherID:         "publisher.publisher_id",
	CreatedAt:           "publisher.created_at",
	Name:                "publisher.name",
	AccountManagerID:    "publisher.account_manager_id",
	MediaBuyerID:        "publisher.media_buyer_id",
	CampaignManagerID:   "publisher.campaign_manager_id",
	OfficeLocation:      "publisher.office_location",
	PauseTimestamp:      "publisher.pause_timestamp",
	StartTimestamp:      "publisher.start_timestamp",
	ReactivateTimestamp: "publisher.reactivate_timestamp",
	IntegrationType:     "publisher.integration_type",
	Status:              "publisher.status",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var PublisherWhere = struct {
	PublisherID         whereHelperstring
	CreatedAt           whereHelpertime_Time
	Name                whereHelperstring
	AccountManagerID    whereHelpernull_String
	MediaBuyerID        whereHelpernull_String
	CampaignManagerID   whereHelpernull_String
	OfficeLocation      whereHelpernull_String
	PauseTimestamp      whereHelpernull_Int64
	StartTimestamp      whereHelpernull_Int64
	ReactivateTimestamp whereHelpernull_Int64
	IntegrationType     whereHelpertypes_StringArray
	Status              whereHelpernull_String
}{
	PublisherID:         whereHelperstring{field: "\"publisher\".\"publisher_id\""},
	CreatedAt:           whereHelpertime_Time{field: "\"publisher\".\"created_at\""},
	Name:                whereHelperstring{field: "\"publisher\".\"name\""},
	AccountManagerID:    whereHelpernull_String{field: "\"publisher\".\"account_manager_id\""},
	MediaBuyerID:        whereHelpernull_String{field: "\"publisher\".\"media_buyer_id\""},
	CampaignManagerID:   whereHelpernull_String{field: "\"publisher\".\"campaign_manager_id\""},
	OfficeLocation:      whereHelpernull_String{field: "\"publisher\".\"office_location\""},
	PauseTimestamp:      whereHelpernull_Int64{field: "\"publisher\".\"pause_timestamp\""},
	StartTimestamp:      whereHelpernull_Int64{field: "\"publisher\".\"start_timestamp\""},
	ReactivateTimestamp: whereHelpernull_Int64{field: "\"publisher\".\"reactivate_timestamp\""},
	IntegrationType:     whereHelpertypes_StringArray{field: "\"publisher\".\"integration_type\""},
	Status:              whereHelpernull_String{field: "\"publisher\".\"status\""},
}

// PublisherRels is where relationship names are stored.
var PublisherRels = struct {
	Confiants        string
	DpoRules         string
	Floors           string
	Pixalates        string
	PublisherDemands string
	PublisherDomains string
	Targetings       string
}{
	Confiants:        "Confiants",
	DpoRules:         "DpoRules",
	Floors:           "Floors",
	Pixalates:        "Pixalates",
	PublisherDemands: "PublisherDemands",
	PublisherDomains: "PublisherDomains",
	Targetings:       "Targetings",
}

// publisherR is where relationships are stored.
type publisherR struct {
	Confiants        ConfiantSlice        `boil:"Confiants" json:"Confiants" toml:"Confiants" yaml:"Confiants"`
	DpoRules         DpoRuleSlice         `boil:"DpoRules" json:"DpoRules" toml:"DpoRules" yaml:"DpoRules"`
	Floors           FloorSlice           `boil:"Floors" json:"Floors" toml:"Floors" yaml:"Floors"`
	Pixalates        PixalateSlice        `boil:"Pixalates" json:"Pixalates" toml:"Pixalates" yaml:"Pixalates"`
	PublisherDemands PublisherDemandSlice `boil:"PublisherDemands" json:"PublisherDemands" toml:"PublisherDemands" yaml:"PublisherDemands"`
	PublisherDomains PublisherDomainSlice `boil:"PublisherDomains" json:"PublisherDomains" toml:"PublisherDomains" yaml:"PublisherDomains"`
	Targetings       TargetingSlice       `boil:"Targetings" json:"Targetings" toml:"Targetings" yaml:"Targetings"`
}

// NewStruct creates a new relationship struct
func (*publisherR) NewStruct() *publisherR {
	return &publisherR{}
}

func (r *publisherR) GetConfiants() ConfiantSlice {
	if r == nil {
		return nil
	}
	return r.Confiants
}

func (r *publisherR) GetDpoRules() DpoRuleSlice {
	if r == nil {
		return nil
	}
	return r.DpoRules
}

func (r *publisherR) GetFloors() FloorSlice {
	if r == nil {
		return nil
	}
	return r.Floors
}

func (r *publisherR) GetPixalates() PixalateSlice {
	if r == nil {
		return nil
	}
	return r.Pixalates
}

func (r *publisherR) GetPublisherDemands() PublisherDemandSlice {
	if r == nil {
		return nil
	}
	return r.PublisherDemands
}

func (r *publisherR) GetPublisherDomains() PublisherDomainSlice {
	if r == nil {
		return nil
	}
	return r.PublisherDomains
}

func (r *publisherR) GetTargetings() TargetingSlice {
	if r == nil {
		return nil
	}
	return r.Targetings
}

// publisherL is where Load methods for each relationship are stored.
type publisherL struct{}

var (
	publisherAllColumns            = []string{"publisher_id", "created_at", "name", "account_manager_id", "media_buyer_id", "campaign_manager_id", "office_location", "pause_timestamp", "start_timestamp", "reactivate_timestamp", "integration_type", "status"}
	publisherColumnsWithoutDefault = []string{"publisher_id", "created_at", "name"}
	publisherColumnsWithDefault    = []string{"account_manager_id", "media_buyer_id", "campaign_manager_id", "office_location", "pause_timestamp", "start_timestamp", "reactivate_timestamp", "integration_type", "status"}
	publisherPrimaryKeyColumns     = []string{"publisher_id"}
	publisherGeneratedColumns      = []string{}
)

type (
	// PublisherSlice is an alias for a slice of pointers to Publisher.
	// This should almost always be used instead of []Publisher.
	PublisherSlice []*Publisher
	// PublisherHook is the signature for custom Publisher hook methods
	PublisherHook func(context.Context, boil.ContextExecutor, *Publisher) error

	publisherQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publisherType                 = reflect.TypeOf(&Publisher{})
	publisherMapping              = queries.MakeStructMapping(publisherType)
	publisherPrimaryKeyMapping, _ = queries.BindMapping(publisherType, publisherMapping, publisherPrimaryKeyColumns)
	publisherInsertCacheMut       sync.RWMutex
	publisherInsertCache          = make(map[string]insertCache)
	publisherUpdateCacheMut       sync.RWMutex
	publisherUpdateCache          = make(map[string]updateCache)
	publisherUpsertCacheMut       sync.RWMutex
	publisherUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publisherAfterSelectMu sync.Mutex
var publisherAfterSelectHooks []PublisherHook

var publisherBeforeInsertMu sync.Mutex
var publisherBeforeInsertHooks []PublisherHook
var publisherAfterInsertMu sync.Mutex
var publisherAfterInsertHooks []PublisherHook

var publisherBeforeUpdateMu sync.Mutex
var publisherBeforeUpdateHooks []PublisherHook
var publisherAfterUpdateMu sync.Mutex
var publisherAfterUpdateHooks []PublisherHook

var publisherBeforeDeleteMu sync.Mutex
var publisherBeforeDeleteHooks []PublisherHook
var publisherAfterDeleteMu sync.Mutex
var publisherAfterDeleteHooks []PublisherHook

var publisherBeforeUpsertMu sync.Mutex
var publisherBeforeUpsertHooks []PublisherHook
var publisherAfterUpsertMu sync.Mutex
var publisherAfterUpsertHooks []PublisherHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Publisher) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Publisher) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Publisher) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Publisher) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Publisher) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Publisher) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Publisher) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Publisher) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Publisher) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publisherAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublisherHook registers your hook function for all future operations.
func AddPublisherHook(hookPoint boil.HookPoint, publisherHook PublisherHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		publisherAfterSelectMu.Lock()
		publisherAfterSelectHooks = append(publisherAfterSelectHooks, publisherHook)
		publisherAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		publisherBeforeInsertMu.Lock()
		publisherBeforeInsertHooks = append(publisherBeforeInsertHooks, publisherHook)
		publisherBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		publisherAfterInsertMu.Lock()
		publisherAfterInsertHooks = append(publisherAfterInsertHooks, publisherHook)
		publisherAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		publisherBeforeUpdateMu.Lock()
		publisherBeforeUpdateHooks = append(publisherBeforeUpdateHooks, publisherHook)
		publisherBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		publisherAfterUpdateMu.Lock()
		publisherAfterUpdateHooks = append(publisherAfterUpdateHooks, publisherHook)
		publisherAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		publisherBeforeDeleteMu.Lock()
		publisherBeforeDeleteHooks = append(publisherBeforeDeleteHooks, publisherHook)
		publisherBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		publisherAfterDeleteMu.Lock()
		publisherAfterDeleteHooks = append(publisherAfterDeleteHooks, publisherHook)
		publisherAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		publisherBeforeUpsertMu.Lock()
		publisherBeforeUpsertHooks = append(publisherBeforeUpsertHooks, publisherHook)
		publisherBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		publisherAfterUpsertMu.Lock()
		publisherAfterUpsertHooks = append(publisherAfterUpsertHooks, publisherHook)
		publisherAfterUpsertMu.Unlock()
	}
}

// One returns a single publisher record from the query.
func (q publisherQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Publisher, error) {
	o := &Publisher{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for publisher")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Publisher records from the query.
func (q publisherQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublisherSlice, error) {
	var o []*Publisher

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Publisher slice")
	}

	if len(publisherAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Publisher records in the query.
func (q publisherQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count publisher rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publisherQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if publisher exists")
	}

	return count > 0, nil
}

// Confiants retrieves all the confiant's Confiants with an executor.
func (o *Publisher) Confiants(mods ...qm.QueryMod) confiantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"confiant\".\"publisher_id\"=?", o.PublisherID),
	)

	return Confiants(queryMods...)
}

// DpoRules retrieves all the dpo_rule's DpoRules with an executor.
func (o *Publisher) DpoRules(mods ...qm.QueryMod) dpoRuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dpo_rule\".\"publisher\"=?", o.PublisherID),
	)

	return DpoRules(queryMods...)
}

// Floors retrieves all the floor's Floors with an executor.
func (o *Publisher) Floors(mods ...qm.QueryMod) floorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"floor\".\"publisher\"=?", o.PublisherID),
	)

	return Floors(queryMods...)
}

// Pixalates retrieves all the pixalate's Pixalates with an executor.
func (o *Publisher) Pixalates(mods ...qm.QueryMod) pixalateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pixalate\".\"publisher_id\"=?", o.PublisherID),
	)

	return Pixalates(queryMods...)
}

// PublisherDemands retrieves all the publisher_demand's PublisherDemands with an executor.
func (o *Publisher) PublisherDemands(mods ...qm.QueryMod) publisherDemandQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"publisher_demand\".\"publisher_id\"=?", o.PublisherID),
	)

	return PublisherDemands(queryMods...)
}

// PublisherDomains retrieves all the publisher_domain's PublisherDomains with an executor.
func (o *Publisher) PublisherDomains(mods ...qm.QueryMod) publisherDomainQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"publisher_domain\".\"publisher_id\"=?", o.PublisherID),
	)

	return PublisherDomains(queryMods...)
}

// Targetings retrieves all the targeting's Targetings with an executor.
func (o *Publisher) Targetings(mods ...qm.QueryMod) targetingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"targeting\".\"publisher\"=?", o.PublisherID),
	)

	return Targetings(queryMods...)
}

// LoadConfiants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadConfiants(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		var ok bool
		object, ok = maybePublisher.(*Publisher)
		if !ok {
			object = new(Publisher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisher))
			}
		}
	} else {
		s, ok := maybePublisher.(*[]*Publisher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisher))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args[object.PublisherID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}
			args[obj.PublisherID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`confiant`),
		qm.WhereIn(`confiant.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load confiant")
	}

	var resultSlice []*Confiant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice confiant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on confiant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for confiant")
	}

	if len(confiantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Confiants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &confiantR{}
			}
			foreign.R.Publisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublisherID == foreign.PublisherID {
				local.R.Confiants = append(local.R.Confiants, foreign)
				if foreign.R == nil {
					foreign.R = &confiantR{}
				}
				foreign.R.Publisher = local
				break
			}
		}
	}

	return nil
}

// LoadDpoRules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadDpoRules(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		var ok bool
		object, ok = maybePublisher.(*Publisher)
		if !ok {
			object = new(Publisher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisher))
			}
		}
	} else {
		s, ok := maybePublisher.(*[]*Publisher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisher))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args[object.PublisherID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}
			args[obj.PublisherID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`dpo_rule`),
		qm.WhereIn(`dpo_rule.publisher in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dpo_rule")
	}

	var resultSlice []*DpoRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dpo_rule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dpo_rule")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dpo_rule")
	}

	if len(dpoRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DpoRules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dpoRuleR{}
			}
			foreign.R.DpoRulePublisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PublisherID, foreign.Publisher) {
				local.R.DpoRules = append(local.R.DpoRules, foreign)
				if foreign.R == nil {
					foreign.R = &dpoRuleR{}
				}
				foreign.R.DpoRulePublisher = local
				break
			}
		}
	}

	return nil
}

// LoadFloors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadFloors(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		var ok bool
		object, ok = maybePublisher.(*Publisher)
		if !ok {
			object = new(Publisher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisher))
			}
		}
	} else {
		s, ok := maybePublisher.(*[]*Publisher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisher))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args[object.PublisherID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}
			args[obj.PublisherID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`floor`),
		qm.WhereIn(`floor.publisher in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load floor")
	}

	var resultSlice []*Floor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice floor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on floor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for floor")
	}

	if len(floorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Floors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &floorR{}
			}
			foreign.R.FloorPublisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublisherID == foreign.Publisher {
				local.R.Floors = append(local.R.Floors, foreign)
				if foreign.R == nil {
					foreign.R = &floorR{}
				}
				foreign.R.FloorPublisher = local
				break
			}
		}
	}

	return nil
}

// LoadPixalates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadPixalates(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		var ok bool
		object, ok = maybePublisher.(*Publisher)
		if !ok {
			object = new(Publisher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisher))
			}
		}
	} else {
		s, ok := maybePublisher.(*[]*Publisher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisher))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args[object.PublisherID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}
			args[obj.PublisherID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pixalate`),
		qm.WhereIn(`pixalate.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pixalate")
	}

	var resultSlice []*Pixalate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pixalate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pixalate")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pixalate")
	}

	if len(pixalateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Pixalates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pixalateR{}
			}
			foreign.R.Publisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublisherID == foreign.PublisherID {
				local.R.Pixalates = append(local.R.Pixalates, foreign)
				if foreign.R == nil {
					foreign.R = &pixalateR{}
				}
				foreign.R.Publisher = local
				break
			}
		}
	}

	return nil
}

// LoadPublisherDemands allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadPublisherDemands(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		var ok bool
		object, ok = maybePublisher.(*Publisher)
		if !ok {
			object = new(Publisher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisher))
			}
		}
	} else {
		s, ok := maybePublisher.(*[]*Publisher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisher))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args[object.PublisherID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}
			args[obj.PublisherID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`publisher_demand`),
		qm.WhereIn(`publisher_demand.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load publisher_demand")
	}

	var resultSlice []*PublisherDemand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice publisher_demand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on publisher_demand")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publisher_demand")
	}

	if len(publisherDemandAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PublisherDemands = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &publisherDemandR{}
			}
			foreign.R.Publisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublisherID == foreign.PublisherID {
				local.R.PublisherDemands = append(local.R.PublisherDemands, foreign)
				if foreign.R == nil {
					foreign.R = &publisherDemandR{}
				}
				foreign.R.Publisher = local
				break
			}
		}
	}

	return nil
}

// LoadPublisherDomains allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadPublisherDomains(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		var ok bool
		object, ok = maybePublisher.(*Publisher)
		if !ok {
			object = new(Publisher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisher))
			}
		}
	} else {
		s, ok := maybePublisher.(*[]*Publisher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisher))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args[object.PublisherID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}
			args[obj.PublisherID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`publisher_domain`),
		qm.WhereIn(`publisher_domain.publisher_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load publisher_domain")
	}

	var resultSlice []*PublisherDomain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice publisher_domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on publisher_domain")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publisher_domain")
	}

	if len(publisherDomainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PublisherDomains = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &publisherDomainR{}
			}
			foreign.R.Publisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublisherID == foreign.PublisherID {
				local.R.PublisherDomains = append(local.R.PublisherDomains, foreign)
				if foreign.R == nil {
					foreign.R = &publisherDomainR{}
				}
				foreign.R.Publisher = local
				break
			}
		}
	}

	return nil
}

// LoadTargetings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publisherL) LoadTargetings(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublisher interface{}, mods queries.Applicator) error {
	var slice []*Publisher
	var object *Publisher

	if singular {
		var ok bool
		object, ok = maybePublisher.(*Publisher)
		if !ok {
			object = new(Publisher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePublisher))
			}
		}
	} else {
		s, ok := maybePublisher.(*[]*Publisher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePublisher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePublisher))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &publisherR{}
		}
		args[object.PublisherID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publisherR{}
			}
			args[obj.PublisherID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`targeting`),
		qm.WhereIn(`targeting.publisher in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load targeting")
	}

	var resultSlice []*Targeting
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice targeting")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on targeting")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for targeting")
	}

	if len(targetingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Targetings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &targetingR{}
			}
			foreign.R.TargetingPublisher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublisherID == foreign.Publisher {
				local.R.Targetings = append(local.R.Targetings, foreign)
				if foreign.R == nil {
					foreign.R = &targetingR{}
				}
				foreign.R.TargetingPublisher = local
				break
			}
		}
	}

	return nil
}

// AddConfiants adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.Confiants.
// Sets related.R.Publisher appropriately.
func (o *Publisher) AddConfiants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Confiant) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PublisherID = o.PublisherID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"confiant\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"publisher_id"}),
				strmangle.WhereClause("\"", "\"", 2, confiantPrimaryKeyColumns),
			)
			values := []interface{}{o.PublisherID, rel.Domain, rel.PublisherID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PublisherID = o.PublisherID
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			Confiants: related,
		}
	} else {
		o.R.Confiants = append(o.R.Confiants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &confiantR{
				Publisher: o,
			}
		} else {
			rel.R.Publisher = o
		}
	}
	return nil
}

// AddDpoRules adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.DpoRules.
// Sets related.R.DpoRulePublisher appropriately.
func (o *Publisher) AddDpoRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DpoRule) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Publisher, o.PublisherID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dpo_rule\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"publisher"}),
				strmangle.WhereClause("\"", "\"", 2, dpoRulePrimaryKeyColumns),
			)
			values := []interface{}{o.PublisherID, rel.RuleID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Publisher, o.PublisherID)
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			DpoRules: related,
		}
	} else {
		o.R.DpoRules = append(o.R.DpoRules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dpoRuleR{
				DpoRulePublisher: o,
			}
		} else {
			rel.R.DpoRulePublisher = o
		}
	}
	return nil
}

// SetDpoRules removes all previously related items of the
// publisher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DpoRulePublisher's DpoRules accordingly.
// Replaces o.R.DpoRules with related.
// Sets related.R.DpoRulePublisher's DpoRules accordingly.
func (o *Publisher) SetDpoRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DpoRule) error {
	query := "update \"dpo_rule\" set \"publisher\" = null where \"publisher\" = $1"
	values := []interface{}{o.PublisherID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DpoRules {
			queries.SetScanner(&rel.Publisher, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DpoRulePublisher = nil
		}
		o.R.DpoRules = nil
	}

	return o.AddDpoRules(ctx, exec, insert, related...)
}

// RemoveDpoRules relationships from objects passed in.
// Removes related items from R.DpoRules (uses pointer comparison, removal does not keep order)
// Sets related.R.DpoRulePublisher.
func (o *Publisher) RemoveDpoRules(ctx context.Context, exec boil.ContextExecutor, related ...*DpoRule) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Publisher, nil)
		if rel.R != nil {
			rel.R.DpoRulePublisher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("publisher")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DpoRules {
			if rel != ri {
				continue
			}

			ln := len(o.R.DpoRules)
			if ln > 1 && i < ln-1 {
				o.R.DpoRules[i] = o.R.DpoRules[ln-1]
			}
			o.R.DpoRules = o.R.DpoRules[:ln-1]
			break
		}
	}

	return nil
}

// AddFloors adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.Floors.
// Sets related.R.FloorPublisher appropriately.
func (o *Publisher) AddFloors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Floor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Publisher = o.PublisherID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"floor\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"publisher"}),
				strmangle.WhereClause("\"", "\"", 2, floorPrimaryKeyColumns),
			)
			values := []interface{}{o.PublisherID, rel.RuleID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Publisher = o.PublisherID
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			Floors: related,
		}
	} else {
		o.R.Floors = append(o.R.Floors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &floorR{
				FloorPublisher: o,
			}
		} else {
			rel.R.FloorPublisher = o
		}
	}
	return nil
}

// AddPixalates adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.Pixalates.
// Sets related.R.Publisher appropriately.
func (o *Publisher) AddPixalates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pixalate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PublisherID = o.PublisherID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pixalate\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"publisher_id"}),
				strmangle.WhereClause("\"", "\"", 2, pixalatePrimaryKeyColumns),
			)
			values := []interface{}{o.PublisherID, rel.Domain, rel.PublisherID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PublisherID = o.PublisherID
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			Pixalates: related,
		}
	} else {
		o.R.Pixalates = append(o.R.Pixalates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pixalateR{
				Publisher: o,
			}
		} else {
			rel.R.Publisher = o
		}
	}
	return nil
}

// AddPublisherDemands adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.PublisherDemands.
// Sets related.R.Publisher appropriately.
func (o *Publisher) AddPublisherDemands(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PublisherDemand) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PublisherID = o.PublisherID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"publisher_demand\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"publisher_id"}),
				strmangle.WhereClause("\"", "\"", 2, publisherDemandPrimaryKeyColumns),
			)
			values := []interface{}{o.PublisherID, rel.PublisherID, rel.Domain, rel.DemandPartnerID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PublisherID = o.PublisherID
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			PublisherDemands: related,
		}
	} else {
		o.R.PublisherDemands = append(o.R.PublisherDemands, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &publisherDemandR{
				Publisher: o,
			}
		} else {
			rel.R.Publisher = o
		}
	}
	return nil
}

// AddPublisherDomains adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.PublisherDomains.
// Sets related.R.Publisher appropriately.
func (o *Publisher) AddPublisherDomains(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PublisherDomain) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PublisherID = o.PublisherID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"publisher_domain\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"publisher_id"}),
				strmangle.WhereClause("\"", "\"", 2, publisherDomainPrimaryKeyColumns),
			)
			values := []interface{}{o.PublisherID, rel.Domain, rel.PublisherID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PublisherID = o.PublisherID
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			PublisherDomains: related,
		}
	} else {
		o.R.PublisherDomains = append(o.R.PublisherDomains, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &publisherDomainR{
				Publisher: o,
			}
		} else {
			rel.R.Publisher = o
		}
	}
	return nil
}

// AddTargetings adds the given related objects to the existing relationships
// of the publisher, optionally inserting them as new records.
// Appends related to o.R.Targetings.
// Sets related.R.TargetingPublisher appropriately.
func (o *Publisher) AddTargetings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Targeting) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Publisher = o.PublisherID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"targeting\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"publisher"}),
				strmangle.WhereClause("\"", "\"", 2, targetingPrimaryKeyColumns),
			)
			values := []interface{}{o.PublisherID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Publisher = o.PublisherID
		}
	}

	if o.R == nil {
		o.R = &publisherR{
			Targetings: related,
		}
	} else {
		o.R.Targetings = append(o.R.Targetings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &targetingR{
				TargetingPublisher: o,
			}
		} else {
			rel.R.TargetingPublisher = o
		}
	}
	return nil
}

// Publishers retrieves all the records using an executor.
func Publishers(mods ...qm.QueryMod) publisherQuery {
	mods = append(mods, qm.From("\"publisher\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"publisher\".*"})
	}

	return publisherQuery{q}
}

// FindPublisher retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublisher(ctx context.Context, exec boil.ContextExecutor, publisherID string, selectCols ...string) (*Publisher, error) {
	publisherObj := &Publisher{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"publisher\" where \"publisher_id\"=$1", sel,
	)

	q := queries.Raw(query, publisherID)

	err := q.Bind(ctx, exec, publisherObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from publisher")
	}

	if err = publisherObj.doAfterSelectHooks(ctx, exec); err != nil {
		return publisherObj, err
	}

	return publisherObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Publisher) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publisher provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publisherInsertCacheMut.RLock()
	cache, cached := publisherInsertCache[key]
	publisherInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publisherAllColumns,
			publisherColumnsWithDefault,
			publisherColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publisherType, publisherMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publisherType, publisherMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"publisher\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"publisher\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into publisher")
	}

	if !cached {
		publisherInsertCacheMut.Lock()
		publisherInsertCache[key] = cache
		publisherInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Publisher.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Publisher) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publisherUpdateCacheMut.RLock()
	cache, cached := publisherUpdateCache[key]
	publisherUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publisherAllColumns,
			publisherPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update publisher, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"publisher\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publisherPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publisherType, publisherMapping, append(wl, publisherPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update publisher row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for publisher")
	}

	if !cached {
		publisherUpdateCacheMut.Lock()
		publisherUpdateCache[key] = cache
		publisherUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publisherQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for publisher")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for publisher")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublisherSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"publisher\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publisherPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in publisher slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all publisher")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Publisher) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no publisher provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publisherColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publisherUpsertCacheMut.RLock()
	cache, cached := publisherUpsertCache[key]
	publisherUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			publisherAllColumns,
			publisherColumnsWithDefault,
			publisherColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			publisherAllColumns,
			publisherPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert publisher, could not build update column list")
		}

		ret := strmangle.SetComplement(publisherAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(publisherPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert publisher, could not build conflict column list")
			}

			conflict = make([]string, len(publisherPrimaryKeyColumns))
			copy(conflict, publisherPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"publisher\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(publisherType, publisherMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publisherType, publisherMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert publisher")
	}

	if !cached {
		publisherUpsertCacheMut.Lock()
		publisherUpsertCache[key] = cache
		publisherUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Publisher record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Publisher) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Publisher provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publisherPrimaryKeyMapping)
	sql := "DELETE FROM \"publisher\" WHERE \"publisher_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from publisher")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for publisher")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publisherQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no publisherQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisher")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublisherSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publisherBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"publisher\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publisherPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publisher slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publisher")
	}

	if len(publisherAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Publisher) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublisher(ctx, exec, o.PublisherID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublisherSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublisherSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publisherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"publisher\".* FROM \"publisher\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publisherPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PublisherSlice")
	}

	*o = slice

	return nil
}

// PublisherExists checks if the Publisher row exists.
func PublisherExists(ctx context.Context, exec boil.ContextExecutor, publisherID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"publisher\" where \"publisher_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, publisherID)
	}
	row := exec.QueryRowContext(ctx, sql, publisherID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if publisher exists")
	}

	return exists, nil
}

// Exists checks if the Publisher row exists.
func (o *Publisher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PublisherExists(ctx, exec, o.PublisherID)
}
