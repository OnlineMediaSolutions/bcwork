// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPublisherDemands(t *testing.T) {
	t.Parallel()

	query := PublisherDemands()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPublisherDemandsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherDemandsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PublisherDemands().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherDemandsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherDemandSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPublisherDemandsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PublisherDemandExists(ctx, tx, o.PublisherID, o.Domain, o.DemandPartnerID)
	if err != nil {
		t.Errorf("Unable to check if PublisherDemand exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PublisherDemandExists to return true, but got false.")
	}
}

func testPublisherDemandsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	publisherDemandFound, err := FindPublisherDemand(ctx, tx, o.PublisherID, o.Domain, o.DemandPartnerID)
	if err != nil {
		t.Error(err)
	}

	if publisherDemandFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPublisherDemandsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PublisherDemands().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPublisherDemandsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PublisherDemands().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPublisherDemandsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	publisherDemandOne := &PublisherDemand{}
	publisherDemandTwo := &PublisherDemand{}
	if err = randomize.Struct(seed, publisherDemandOne, publisherDemandDBTypes, false, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherDemandTwo, publisherDemandDBTypes, false, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherDemandOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherDemandTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherDemands().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPublisherDemandsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	publisherDemandOne := &PublisherDemand{}
	publisherDemandTwo := &PublisherDemand{}
	if err = randomize.Struct(seed, publisherDemandOne, publisherDemandDBTypes, false, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}
	if err = randomize.Struct(seed, publisherDemandTwo, publisherDemandDBTypes, false, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = publisherDemandOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = publisherDemandTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func publisherDemandBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func publisherDemandAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func publisherDemandAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func publisherDemandBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func publisherDemandAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func publisherDemandBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func publisherDemandAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func publisherDemandBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func publisherDemandAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PublisherDemand) error {
	*o = PublisherDemand{}
	return nil
}

func testPublisherDemandsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PublisherDemand{}
	o := &PublisherDemand{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PublisherDemand object: %s", err)
	}

	AddPublisherDemandHook(boil.BeforeInsertHook, publisherDemandBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	publisherDemandBeforeInsertHooks = []PublisherDemandHook{}

	AddPublisherDemandHook(boil.AfterInsertHook, publisherDemandAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	publisherDemandAfterInsertHooks = []PublisherDemandHook{}

	AddPublisherDemandHook(boil.AfterSelectHook, publisherDemandAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	publisherDemandAfterSelectHooks = []PublisherDemandHook{}

	AddPublisherDemandHook(boil.BeforeUpdateHook, publisherDemandBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	publisherDemandBeforeUpdateHooks = []PublisherDemandHook{}

	AddPublisherDemandHook(boil.AfterUpdateHook, publisherDemandAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	publisherDemandAfterUpdateHooks = []PublisherDemandHook{}

	AddPublisherDemandHook(boil.BeforeDeleteHook, publisherDemandBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	publisherDemandBeforeDeleteHooks = []PublisherDemandHook{}

	AddPublisherDemandHook(boil.AfterDeleteHook, publisherDemandAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	publisherDemandAfterDeleteHooks = []PublisherDemandHook{}

	AddPublisherDemandHook(boil.BeforeUpsertHook, publisherDemandBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	publisherDemandBeforeUpsertHooks = []PublisherDemandHook{}

	AddPublisherDemandHook(boil.AfterUpsertHook, publisherDemandAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	publisherDemandAfterUpsertHooks = []PublisherDemandHook{}
}

func testPublisherDemandsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherDemandsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(publisherDemandColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPublisherDemandToOneDpoUsingDemandPartner(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PublisherDemand
	var foreign Dpo

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, publisherDemandDBTypes, false, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dpoDBTypes, false, dpoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dpo struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DemandPartnerID = foreign.DemandPartnerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DemandPartner().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DemandPartnerID != foreign.DemandPartnerID {
		t.Errorf("want: %v, got %v", foreign.DemandPartnerID, check.DemandPartnerID)
	}

	ranAfterSelectHook := false
	AddDpoHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Dpo) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PublisherDemandSlice{&local}
	if err = local.L.LoadDemandPartner(ctx, tx, false, (*[]*PublisherDemand)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DemandPartner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DemandPartner = nil
	if err = local.L.LoadDemandPartner(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DemandPartner == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPublisherDemandToOnePublisherUsingPublisher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PublisherDemand
	var foreign Publisher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, publisherDemandDBTypes, false, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, publisherDBTypes, false, publisherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Publisher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PublisherID = foreign.PublisherID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Publisher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PublisherID != foreign.PublisherID {
		t.Errorf("want: %v, got %v", foreign.PublisherID, check.PublisherID)
	}

	ranAfterSelectHook := false
	AddPublisherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Publisher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PublisherDemandSlice{&local}
	if err = local.L.LoadPublisher(ctx, tx, false, (*[]*PublisherDemand)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Publisher = nil
	if err = local.L.LoadPublisher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Publisher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPublisherDemandToOneSetOpDpoUsingDemandPartner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PublisherDemand
	var b, c Dpo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherDemandDBTypes, false, strmangle.SetComplement(publisherDemandPrimaryKeyColumns, publisherDemandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dpoDBTypes, false, strmangle.SetComplement(dpoPrimaryKeyColumns, dpoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dpoDBTypes, false, strmangle.SetComplement(dpoPrimaryKeyColumns, dpoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Dpo{&b, &c} {
		err = a.SetDemandPartner(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DemandPartner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DemandPartnerPublisherDemands[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DemandPartnerID != x.DemandPartnerID {
			t.Error("foreign key was wrong value", a.DemandPartnerID)
		}

		if exists, err := PublisherDemandExists(ctx, tx, a.PublisherID, a.Domain, a.DemandPartnerID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testPublisherDemandToOneSetOpPublisherUsingPublisher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PublisherDemand
	var b, c Publisher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, publisherDemandDBTypes, false, strmangle.SetComplement(publisherDemandPrimaryKeyColumns, publisherDemandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, publisherDBTypes, false, strmangle.SetComplement(publisherPrimaryKeyColumns, publisherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Publisher{&b, &c} {
		err = a.SetPublisher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Publisher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PublisherDemands[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PublisherID != x.PublisherID {
			t.Error("foreign key was wrong value", a.PublisherID)
		}

		if exists, err := PublisherDemandExists(ctx, tx, a.PublisherID, a.Domain, a.DemandPartnerID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testPublisherDemandsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherDemandsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PublisherDemandSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPublisherDemandsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PublisherDemands().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	publisherDemandDBTypes = map[string]string{`PublisherID`: `character varying`, `Domain`: `character varying`, `DemandPartnerID`: `character varying`, `AdsTXTStatus`: `boolean`, `Active`: `boolean`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                      = bytes.MinRead
)

func testPublisherDemandsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(publisherDemandPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(publisherDemandAllColumns) == len(publisherDemandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPublisherDemandsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(publisherDemandAllColumns) == len(publisherDemandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PublisherDemand{}
	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, publisherDemandDBTypes, true, publisherDemandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(publisherDemandAllColumns, publisherDemandPrimaryKeyColumns) {
		fields = publisherDemandAllColumns
	} else {
		fields = strmangle.SetComplement(
			publisherDemandAllColumns,
			publisherDemandPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PublisherDemandSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPublisherDemandsUpsert(t *testing.T) {
	t.Parallel()

	if len(publisherDemandAllColumns) == len(publisherDemandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PublisherDemand{}
	if err = randomize.Struct(seed, &o, publisherDemandDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherDemand: %s", err)
	}

	count, err := PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, publisherDemandDBTypes, false, publisherDemandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PublisherDemand struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PublisherDemand: %s", err)
	}

	count, err = PublisherDemands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
